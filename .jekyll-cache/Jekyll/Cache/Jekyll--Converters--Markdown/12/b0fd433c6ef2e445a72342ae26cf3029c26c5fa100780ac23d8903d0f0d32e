I"9<p><br /><br /></p>

<p><em>💡  쿠버네티스 네트워킹을 알아보기에 앞서 컨테이너 네트워킹에 대해 알아보자.</em></p>

<p><br /></p>

<h1 id="4-container-networking">4. Container Networking</h1>

<ul>
  <li>도커 컨테이너를 띄운 호스트
    <ul>
      <li>호스트 eth0: 192.168.1.10</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>도커 컨테이너 네트워킹 옵션 2가지
    <ul>
      <li>None network: <code class="language-plaintext highlighter-rouge">docker run —network none nginx</code>
        <ul>
          <li>컨테이너 외부 접속 불가 &amp; 외부에서 컨테이너 접속 불가</li>
        </ul>
      </li>
      <li>Host network: <code class="language-plaintext highlighter-rouge">docker run —network host nginx</code>
        <ul>
          <li>호스트와 컨테이너의 네트워크가 격리되지 않음</li>
          <li>추가 포트 매핑 불필요
            <ul>
              <li>포트 80에 어플리케이션을 배포 ⇒ <a href="http://192.168.1.10:80">http://192.168.1.10:80</a> 에서 애플리케이션 접속 가능</li>
              <li>단, 다른 컨테이너에서 동일 포트로 애플리케이션을 배포할 경우 작동하지 않음</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Bridge network</strong>
        <ul>
          <li>내부 사설망이 형성됨 (Bridge network: 172.0.0 - container a 172.17.0.2, container b 172.12.0.3)</li>
          <li>Docker가 호스트에 설치
            <ul>
              <li>
                <p>기본적으로 Bridge 라는 내부 사설 네트워크 생성 (<code class="language-plaintext highlighter-rouge">docker network ls</code> 커맨드를 통해 확인할 수 있음)</p>

                <p>⇒ 호스트에 docker0라는 이름으로 네트워크 생성( <code class="language-plaintext highlighter-rouge">ip link</code>로 확인 가능)</p>

                <ul>
                  <li>Docker0 ⇒ down state</li>
                  <li>Docker0: 172.17.0.1 할당 ( <code class="language-plaintext highlighter-rouge">ip addr</code>로 확인 가능)</li>
                </ul>
              </li>
              <li>
                <p>네임스페이스 확인</p>
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">ip netns</code></li>
                  <li><code class="language-plaintext highlighter-rouge">docker inspect 942d70e5785b2</code></li>
                  <li>컨테이너(172.17.0.3) = 네트워크 네임스페이스</li>
                  <li>도커는 위에서 했던것과 같이 컨테이너에 eth@ifOO, bridge 네트워크에 veth@ifOO 인터페이스를 생성해 케이블로 연결(뒤에있는 ifOO가 서로 쌍이 된다)</li>
                  <li>브릿지 네트워크 밑에 있는 컨테이너들 ⇒ 같은 네트워크이기 때문에 통신 가능</li>
                  <li>예: <a href="http://172.17.0.3:80">http://172.17.0.3:80</a> ⇒ 애플리케이션 실행 가능
                    <ul>
                      <li>하지만 외부에서 같은 주소로 접속했을 경우 접속 불가</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>호스트 외부에서 도커 컨테이너를 접속
    <ul>
      <li>Docker: Port publishing / Port Mapping
        <ul>
          <li><code class="language-plaintext highlighter-rouge">docker run -p 8080:80 nginx</code> 호스트의 8080 포트로 들어온 요청을 80포트로 전달 ⇒ 외부에서 <a href="http://172.17.0.3:8080">http://172.17.0.3:8080</a> : 접속 가능</li>
          <li>어떻게 8080 포트에서 80 포트로 트래픽 전달?
            <ul>
              <li>
                <p>NAT 규칙 생성</p>

                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  iptables <span class="se">\</span>
  	<span class="nt">-t</span> nat <span class="se">\</span>
  	<span class="nt">-A</span> PREROUTING <span class="se">\</span>
  	<span class="nt">-j</span> DNAT <span class="se">\</span>
  	<span class="nt">--dport</span> 8080 <span class="se">\</span>
  	<span class="nt">--to-destination</span> 80
</code></pre></div>                </div>

                <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  iptables <span class="se">\</span>
  	<span class="nt">-t</span> nat <span class="se">\</span>
  	<span class="nt">-A</span> DOCKER <span class="se">\</span>
  	<span class="nt">-j</span> DNAT <span class="se">\</span>
  	<span class="nt">--dport</span> 8080 <span class="se">\</span>
  	<span class="nt">--to-destination</span> 172.17.0.3:80
</code></pre></div>                </div>

                <p>⇒ <code class="language-plaintext highlighter-rouge">iptables -nvL -t nat</code> 으로 확인할 수 있음</p>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET