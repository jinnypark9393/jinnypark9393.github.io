{"componentChunkName":"component---src-templates-blog-template-js","path":"/220809-algorithm-book-with-pic/","result":{"data":{"cur":{"id":"519587bd-45c9-53e5-9d62-7e6021233841","html":"<h1 id=\"제-4장-기본적인-알고리즘5\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-4%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%985\" aria-label=\"제 4장 기본적인 알고리즘5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 4장: 기본적인 알고리즘(5)</h1>\n<h2 id=\"44-시간의-크고-작음을-비교하려면-단위를-초-단위로-통일한다\" style=\"position:relative;\"><a href=\"#44-%EC%8B%9C%EA%B0%84%EC%9D%98-%ED%81%AC%EA%B3%A0-%EC%9E%91%EC%9D%8C%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%98%EB%A0%A4%EB%A9%B4-%EB%8B%A8%EC%9C%84%EB%A5%BC-%EC%B4%88-%EB%8B%A8%EC%9C%84%EB%A1%9C-%ED%86%B5%EC%9D%BC%ED%95%9C%EB%8B%A4\" aria-label=\"44 시간의 크고 작음을 비교하려면 단위를 초 단위로 통일한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>44. 시간의 크고 작음을 비교하려면 단위를 초 단위로 통일한다</h2>\n<ul>\n<li>시간의 크고작음을 계산할 때에는 시간, 분, 초 순서대로 비교하는 알고리즘으로 구할 수도 있지만 초 단위로 시간을 통일시켜 비교하는 것이 더 좋다(컴퓨터는 연산에 특화 되었기 때문)</li>\n<li>시 분 초를 초단위로 변환하는 계산식\n<ul>\n<li>H시 M분 S초 = H<em>3600 + M</em>60 + S</li>\n<li>예: 6시 32분 12초(A) 7 7시 10분 52초(B)\n<ul>\n<li>6<em>3600 + 32</em>60 + 12 = 32532 (A)</li>\n<li>7<em>3600 + 10</em>60 + 52 =25832 (B)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"45-시간차를-구할-때에는-초-단위로-바꾸어-뺄셈하고-다시-시간으로-바꾼다\" style=\"position:relative;\"><a href=\"#45-%EC%8B%9C%EA%B0%84%EC%B0%A8%EB%A5%BC-%EA%B5%AC%ED%95%A0-%EB%95%8C%EC%97%90%EB%8A%94-%EC%B4%88-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EB%B0%94%EA%BE%B8%EC%96%B4-%EB%BA%84%EC%85%88%ED%95%98%EA%B3%A0-%EB%8B%A4%EC%8B%9C-%EC%8B%9C%EA%B0%84%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%BC%EB%8B%A4\" aria-label=\"45 시간차를 구할 때에는 초 단위로 바꾸어 뺄셈하고 다시 시간으로 바꾼다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>45. 시간차를 구할 때에는 초 단위로 바꾸어 뺄셈하고, 다시 시간으로 바꾼다</h2>\n<ul>\n<li>\n<p>시간을 초단위로 바꾸는 식</p>\n<ul>\n<li>H시 M분 s초 = H<em>3600 + M</em>60 + S</li>\n</ul>\n</li>\n<li>\n<p>초 단위 값인 TIME을 H시 M분 S초로 변환</p>\n<p>1단계: TIME을 3600으로 나눈 몫의 정수 부분 =H</p>\n<p>2단계: TIME을 3600으로 나눈 나머지 값이 R</p>\n<p>3단계: R을 60으로 나눈 몫이 M</p>\n<p>4단계: R을 60으로 나눈 나머지 값이 S</p>\n</li>\n<li>\n<p>예시</p>\n<p>1단계: TIME1에 H1 *3600 + M1 *60 + S1 대입</p>\n<p>2단계: TIME2에 H2 *3600 + M2 *60 + S2대입</p>\n<p>3단계: DIFF에 TIME2 - TIME1을 대입</p>\n<p>4단계: H에 DIFF를 3600으로 나눈 몫의 정수 부분을 대입</p>\n<p>2단계: TIME을 3600으로 나눈 나머지 값이 R</p>\n<p>3단계: R을 60으로 나눈 몫이 M</p>\n<p>4단계: R을 60으로 나눈 나머지 값이 S</p>\n</li>\n</ul>\n<p><br/><br/></p>","excerpt":"제 4장: 기본적인 알고리즘(5) 44. 시간의 크고 작음을 비교하려면 단위를 초 단위로 통일한다 시간의 크고작음을 계산할 때에는 시간, 분, 초 순서대로 비교하는 알고리즘으로 구할 수도 있지만 초 단위로 시간을 통일시켜 비교하는 것이 더 좋다(컴퓨터는 연산에 특화 되었기 때문) 시 분 초를 초단위로 변환하는 계산식 H시 M분 S초 = H3600 + M60 + S 예: 6시 32분 12초(A) 7 7시 10분 52초(B) 63600 + 3260 + 12 = 32532 (A) 73600 + 1060 + 52 =25832 (B) 45. 시간차를 구할 때에는 초 단위로 바꾸어 뺄셈하고, 다시 시간으로 바꾼다 시간을 초단위로 바꾸는 식 H시 M분 s초 = H3600 + M60 + S 초 단위 값인 TIME을 H시 M분 S초로 변환 1단계: TIME을 3600으로 나눈 몫의 정수 부분 =H 2단계: TIME을 3600으로 나눈 나머지 값이 R 3단계: R을 60으로 나눈 몫이 M 4단계: …","frontmatter":{"date":"August 09, 2022","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(5)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220809-algorithm-book-with-pic/"}},"next":{"id":"6514388b-e82f-5341-ba99-d06b880055f1","html":"<h1 id=\"1-배경상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD%EC%83%81%ED%99%A9\" aria-label=\"1 배경상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경상황</h1>\n<p>현재 프로젝트가 Java로 구성되어있어 자바 메모리 구조에 대해서는 이전에 개인적으로 공부한 적이 있다.</p>\n<br/>\n<p>하지만 최근 새로 착수한 프로젝트가 static의 과도한 사용으로 메모리 이슈가 발생하고 있는 프로젝트라 static의 개념을 새로 학습하고, Java 메모리 구조에 대해 다시 정리해보려 한다.</p>\n<br/>\n<h1 id=\"2-static정적이란\" style=\"position:relative;\"><a href=\"#2-static%EC%A0%95%EC%A0%81%EC%9D%B4%EB%9E%80\" aria-label=\"2 static정적이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Static(정적)이란?</h1>\n<p>영문을 그대로 직역하면 고정된이라는 뜻을 가지고 있는데, 실제로 static은 프로그램 시작 시 메모리에 고정적으로 할당되어, 프로그램이 종료될 때 해제된다.</p>\n<br/>\n<p><code class=\"language-text\">static</code> 이라는 키워드를 사용해 <strong>정적 변수(static variable)</strong> 과 <strong>정적 메서드(static method)</strong> 를 생성할 수 있다. 이 둘을 합쳐 <strong>정적 멤버(static member)</strong>, 혹은 <strong>클래스 멤버(class member)</strong> 라고 부른다.</p>\n<br/>\n<p>이렇게 생성된 정적 변수, 정적 메서드의 경우 클래스가 메모리에 올라갈 때 자동으로 생성된다. 즉, 인스턴스(객체) 생성 없이 바로 사용이 가능하다.</p>\n<br/>\n<h1 id=\"3-static의-사용용도\" style=\"position:relative;\"><a href=\"#3-static%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9A%A9%EB%8F%84\" aria-label=\"3 static의 사용용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Static의 사용용도</h1>\n<h2 id=\"상수를-정의\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%88%98%EB%A5%BC-%EC%A0%95%EC%9D%98\" aria-label=\"상수를 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상수를 정의</h2>\n<p>절대 변하지 않는 변수를 <strong>상수</strong>라고 하는데, 객체 내에서 매번 일반 변수로 정의하기 보다는 정적 변수로 선언 시 메모리를 아낄 수 있다.</p>\n<br/>\n<h2 id=\"유틸리티-클래스를-정의\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98\" aria-label=\"유틸리티 클래스를 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유틸리티 클래스를 정의</h2>\n<p><strong>유틸리티 클래스(utility class)</strong> 는 인스턴스 메서드와 변수를 제공하지 않고, 데이터 처리를 위한 정적 메서드만 존재하는 클래스를 뜻한다.</p>\n<br/>\n<p>예를 들어 Java의 <code class=\"language-text\">java.util.Math</code> 클래스의 경우, 상수 외의 인스턴스 변수가 없고, 계산을 위한 정적 메서드만 제공한다.</p>\n<br/>\n<p><strong>Static영역에 할당된 메모리의 경우, 모든 객체가 해당 메모리를 공유하기 때문에</strong>, 위와 같이 객체의 상태를 이용하지 않고, 여러 객체의 필요에 의해 데이터를 처리하는 공통 로직이 필요할 경우 static을 사용하여 메모리를 절약할 수 있다.</p>\n<br/>\n<h1 id=\"4-static의-단점\" style=\"position:relative;\"><a href=\"#4-static%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"4 static의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Static의 단점</h1>\n<h2 id=\"메모리-문제\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%AC%B8%EC%A0%9C\" aria-label=\"메모리 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 문제</h2>\n<p>Static은 프로그램 실행 시점에 메모리에 할당을 하며, 프로그램 종료 시까지 메모리에서 해제되지 않기 때문에 과도하게 사용할 경우 메모리 부족 문제가 발생할 수 있다.</p>\n<br/>\n<h2 id=\"동시성-문제\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C\" aria-label=\"동시성 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성 문제</h2>\n<p>Static은 전역에서 접근이 가능하므로 별도의 동기화 전략이 수립되어야 한다.</p>\n<br/>\n<h2 id=\"런타임-다형성-불가\" style=\"position:relative;\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84-%EB%8B%A4%ED%98%95%EC%84%B1-%EB%B6%88%EA%B0%80\" aria-label=\"런타임 다형성 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타임 다형성 불가</h2>\n<p>Static으로만 이루어진 메서드를 사용하는 객체의 경우, 해당 객체를 메모리로 할당해 사용하는 것이 아니고 <code class=\"language-text\">object.method</code> 로 바로 접근하여 호출하게 된다.</p>\n<br/>\n<h2 id=\"객체-상태-사용-불가\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%81%ED%83%9C-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\" aria-label=\"객체 상태 사용 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 상태 사용 불가</h2>\n<p>정적 메서드 내부에서는 클래스 인스턴스 필드를 사용할 수 없기 때문에 인자를 모두 외부에서 주입해야한다.</p>\n<br/>\n<p>Static은 프로그램 실행 시점에 메모리에 올라가는데, 정적 메서드 내부에 객체의 인스턴스 필드가 초기화 되지 않을 경우 문제가 생길 수 있기 때문에 위와 같이 구현된다. 따라서 정적 메서드 안에는 정적 변수만 사용 가능하다.</p>\n<br/>\n<p>일반 메서드라면 객체 내의 상태를 통해 해당 메서드를 구현할 수 있으므로 변화하는 상태에 따라 다채로운 기능 구현이 가능하나, 정적 메서드의 경우 이러한 형태로 구현할 수 없다.</p>\n<br/>\n<p>즉, 객체 내 정적 메서드가 많아지는 경우, 외부 값에 의존하는 수동적 객체가 된다.</p>\n<br/>\n<h2 id=\"테스트-용이성-저하\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9A%A9%EC%9D%B4%EC%84%B1-%EC%A0%80%ED%95%98\" aria-label=\"테스트 용이성 저하 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 용이성 저하</h2>\n<p>정적 필드는 전역으로 관리되기 때문에 프로그램 전체에서 해당 필드에 접근 및 수정이 가능하다.</p>\n<br/>\n<p>따라서 해당 필드를 추론하기 어려워 테스트가 까다롭다.</p>\n<br/>\n<h1 id=\"5-static의-메모리-할당\" style=\"position:relative;\"><a href=\"#5-static%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"5 static의 메모리 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Static의 메모리 할당</h1>\n<p>동적(Dynamic)의 경우 객체를 런타임 도중에 힙 영역(Heap Area)에 할당한다.</p>\n<br/>\n<p>반면, 정적(Static)의 경우, 프로그램이 시작되는 시점에 클래스 로더(Class Loader)가 클래스를 해석해 메서드 영역 혹은 힙 영역에 클래스 메타 정보 및 정적 변수를 적재한다.</p>\n<br/>\n<h1 id=\"6-static의-종류\" style=\"position:relative;\"><a href=\"#6-static%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"6 static의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Static의 종류</h1>\n<h2 id=\"static-변수\" style=\"position:relative;\"><a href=\"#static-%EB%B3%80%EC%88%98\" aria-label=\"static 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static 변수</h2>\n<ul>\n<li>정적 변수는 한 클래스의 모든 인스턴스에서 공유된다.</li>\n<li>같은 클래스에 속하는 모든 인스턴스에서 해당 정적 변수의 하나뿐인 복사본을 공유한다.</li>\n<li>정적 변수는 클래스가 메모리에 로딩될 때 초기화 된다.</li>\n<li>일반적으로 클래스의 새로운 인스턴스가 처음 만들어지거나, 정적 메서드가 실행될 때 해당 클래스를 불러와 로딩한다.</li>\n<li>정적 변수도 인스턴스 변수와 마찬가지로 선언만 하고 초기화 하지 않을 경우 기본 값으로 초기화된다.</li>\n<li><code class=\"language-text\">static final</code> 로 선언된 변수는 상수이며, 이 경우 초기화 하지 않으면 에러가 발생하며, 초기화 이후 값 변경이 불가하다.</li>\n<li>정적 변수는 정적 메서드와 달리 일반 메서드에서도 접근할 수 있다.</li>\n</ul>\n<br/>\n<h2 id=\"static-메서드\" style=\"position:relative;\"><a href=\"#static-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"static 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static 메서드</h2>\n<ul>\n<li>인스턴스를 필요로 하지 않는 메서드</li>\n<li>Static 키워드를 이용해 메서드를 선언</li>\n<li>클래스명을 사용해 호출</li>\n<li>정적 메서드와 정적 메서드가 아닌 메서드를 섞어 클래스를 선언할 수 있으나, 정적 메서드가 아닌 메서드가 있다면 그 클래스의 인스턴스를 만들 수 있는 방법이 있어야 한다.</li>\n<li>정적 메서드에서 정적 변수가 아닌 변수(인스턴스 변수)를. 사용할 수 없다.</li>\n<li>정적 메서드 내에서 정적 메서드가 아닌 메서드를 사용할 수 없다.</li>\n<li>정적 메서드 내에서 this 키워드를 사용할 수 없다.</li>\n<li>클래스가 메모리에 로딩될 때 자동으로 선언도니다.</li>\n<li>Import Static을 이용해 import한 뒤, 클래스명을 사용하지 않고 바로 사용할 수 있다.</li>\n</ul>\n<br/>","frontmatter":{"date":"August 08, 2022","title":"Java의 static(정적)이란?","categories":"프로그래밍","author":"jinnypark9393","emoji":"☕"},"fields":{"slug":"/220808-programming-java-static/"}},"prev":{"id":"e93fb860-d97c-5231-8f0e-f8710dd2d1a3","html":"<h1 id=\"제-4장-기본적인-알고리즘6\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-4%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%986\" aria-label=\"제 4장 기본적인 알고리즘6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 4장: 기본적인 알고리즘(6)</h1>\n<h2 id=\"46-두-변수의-값을-교환할-때는-임시-변수를-사용한다\" style=\"position:relative;\"><a href=\"#46-%EB%91%90-%EB%B3%80%EC%88%98%EC%9D%98-%EA%B0%92%EC%9D%84-%EA%B5%90%ED%99%98%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%9E%84%EC%8B%9C-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"46 두 변수의 값을 교환할 때는 임시 변수를 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>46. 두 변수의 값을 교환할 때는 임시 변수를 사용한다.</h2>\n<ul>\n<li>변수 X와 Y의 값을 교환 하려면, 아래 순서대로 하면 교환할 수 없다.\n<ul>\n<li>변수 Y에 변수 X 값 대입</li>\n<li>변수 X에 변수 Y 값 대입(이미 변수 X의 값은 Y값으로 덮어씌워짐)</li>\n</ul>\n</li>\n<li><strong>임시변수</strong>를 이용해 값을 임시로 저장해야한다.\n<ul>\n<li>1단계: 변수 W에 변수 Y 값 대입</li>\n<li>2단계: 변수 Y에 변수 X 값 대입</li>\n<li>3단계: 변수 X에 변수 W 값 대입</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"47-두-수의-최대공약수는-유클리드-호제법으로-구한다\" style=\"position:relative;\"><a href=\"#47-%EB%91%90-%EC%88%98%EC%9D%98-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98%EB%8A%94-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95%EC%9C%BC%EB%A1%9C-%EA%B5%AC%ED%95%9C%EB%8B%A4\" aria-label=\"47 두 수의 최대공약수는 유클리드 호제법으로 구한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>47. 두 수의 최대공약수는 유클리드 호제법으로 구한다</h2>\n<ul>\n<li>\n<p>최대공약수: 0이 아닌 정수들의 공통된 약수 중 가장 큰 수</p>\n</li>\n<li>\n<p><strong>유클리드 호제법</strong>으로 구하면 된다.</p>\n<ul>\n<li>호제법: 2개의 수가 서로 나누는 것</li>\n<li>정수 X와 Y(X ≥ Y)가 주어졌을 때 X를 Y로 나눈 나머지를 R이라고 하면, X와 Y의 최대공양수는 Y와 R의 최대공약수와 같다. 그러나 X와 0이 남았을 경우 최대공약수는 X로 한다.</li>\n</ul>\n</li>\n<li>\n<p>정수 X와 Y(X ≥ Y)의 최대공약수를 변수 GCD에 구하는 알고리즘</p>\n<p>1단계: 변수 R에 X/Y의 나머지 값을 대입</p>\n<p>2단계: 변수 R이 0이 아니라면 다음 3~5단계를 반복</p>\n<p>3단계: 변수 X에 변수 Y의 값을 대입한다.</p>\n<p>4단계: 변수 Y에 변수 R의 값을 대입한다.</p>\n<p>5단계: 변수 R에 X/Y의 나머지 값을 대입한다.</p>\n<p>6단계: 변수 GCD에 변수 Y값을 대입한다.</p>\n</li>\n</ul>\n<h2 id=\"칼럼-코드와-데이터는-어디에-있을까\" style=\"position:relative;\"><a href=\"#%EC%B9%BC%EB%9F%BC-%EC%BD%94%EB%93%9C%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%8A%94-%EC%96%B4%EB%94%94%EC%97%90-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"칼럼 코드와 데이터는 어디에 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>칼럼: 코드와 데이터는 어디에 있을까?</h2>\n<ul>\n<li>알고리즘을 컴퓨터에서 실제로 작동시키는 것 ⇒ <strong>프로그램</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>프로그램</th>\n<th>알고리즘</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>코드</td>\n<td>처리</td>\n</tr>\n<tr>\n<td>데이터</td>\n<td>변수</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>이 코드와 데이터들은 모두 컴퓨터의 기억장치인 메모리 공간에 배치</li>\n<li>메모리는 셀이라는 단위로 관리</li>\n<li>각 셀에는 주소(어드레스)가 붙어있다.\n<ul>\n<li>주소를 요소번호라고 하면, 메모리 공간을 큰 배열이라 생각할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"August 10, 2022","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(6)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220810-algorithm-book-with-pic/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220809-algorithm-book-with-pic/","nextSlug":"/220808-programming-java-static/","prevSlug":"/220810-algorithm-book-with-pic/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}