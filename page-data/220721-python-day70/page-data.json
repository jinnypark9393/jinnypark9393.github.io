{"componentChunkName":"component---src-templates-blog-template-js","path":"/220721-python-day70/","result":{"data":{"cur":{"id":"35042548-9482-5c69-bc87-3c3fe48c75c3","html":"<p>오늘도 셀프 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 강의 1일 1강 포스팅 챌린지 :)</p>\n<p><br/><br/></p>\n<h1 id=\"04-django-database-modeling-2\" style=\"position:relative;\"><a href=\"#04-django-database-modeling-2\" aria-label=\"04 django database modeling 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. Django Database Modeling (2)</h1>\n<h2 id=\"1-database-modeling\" style=\"position:relative;\"><a href=\"#1-database-modeling\" aria-label=\"1 database modeling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Database Modeling</h2>\n<ul>\n<li>지난 시간에 이어 PayPlan에 대해 모델링을 진행할 것</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># Create your models here.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PayPlan</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    updated_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    create_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>class로 models라는 모듈의 Model을 상속받아온다.</li>\n<li>컬럼 이름 및 데이터 타입 정의(예: name → 컬럼 이름, CharField → 데이터 타입)</li>\n<li>price의 경우 미국 등의 경우 integer를 사용할 수 없으나 한국 원화의 경우 integer를 사용해도 무방.</li>\n</ul>\n<br/>\n<p>실제로 코드에 적용해보자.</p>\n<ul>\n<li>\n<p>SHRINKERS > shortner > models.py 파일을 아래와 같이 수정해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># Create your models here.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PayPlan</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    updated_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    create_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>class를 추가해 준 뒤에는 잠시 주석처리 해둔다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>Terminal > New Terminal로 새 터미널 창을 연 다음 아래 명령어를 실행해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> ➜  shrinkers git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python manage<span class=\"token punctuation\">.</span>py migrate\nOperations to perform<span class=\"token punctuation\">:</span>\n  Apply <span class=\"token builtin\">all</span> migrations<span class=\"token punctuation\">:</span> admin<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> contenttypes<span class=\"token punctuation\">,</span> sessions\nRunning migrations<span class=\"token punctuation\">:</span>\n  Applying contenttypes<span class=\"token punctuation\">.</span>0001_initial<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0001_initial<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying admin<span class=\"token punctuation\">.</span>0001_initial<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying admin<span class=\"token punctuation\">.</span>0002_logentry_remove_auto_add<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying admin<span class=\"token punctuation\">.</span>0003_logentry_add_action_flag_choices<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying contenttypes<span class=\"token punctuation\">.</span>0002_remove_content_type_name<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0002_alter_permission_name_max_length<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0003_alter_user_email_max_length<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0004_alter_user_username_opts<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0005_alter_user_last_login_null<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0006_require_contenttypes_0002<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0007_alter_validators_add_error_messages<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0008_alter_user_username_max_length<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0009_alter_user_last_name_max_length<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0010_alter_group_name_max_length<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0011_update_proxy_permissions<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying auth<span class=\"token punctuation\">.</span>0012_alter_user_first_name_max_length<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK\n  Applying sessions<span class=\"token punctuation\">.</span>0001_initial<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK</code></pre></div>\n<ul>\n<li>위 명령어를 통해 Django 프레임워크가 필요로 하는 데이터 베이스를 생성한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>앞에서 작성한 class 코드의 주석처리를 해제하고, 아래의 명령어를 실행해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> ➜  shrinkers git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python manage<span class=\"token punctuation\">.</span>py makemigrations shortener  \nMigrations <span class=\"token keyword\">for</span> <span class=\"token string\">'shortener'</span><span class=\"token punctuation\">:</span>\n  shortener<span class=\"token operator\">/</span>migrations<span class=\"token operator\">/</span>0001_initial<span class=\"token punctuation\">.</span>py\n    <span class=\"token operator\">-</span> Create model PayPlan</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>여기서 에러가 발생했는데 해결 방법은 <a href=\"https://jinnypark9393.github.io/programming/Python-Django-makemigrations-error/\">여기</a> 참조</li>\n</ul>\n<br/>\n<ul>\n<li>migrate 을 진행해준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> ➜  shrinkers git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python manage<span class=\"token punctuation\">.</span>py migrate\nOperations to perform<span class=\"token punctuation\">:</span>\n  Apply <span class=\"token builtin\">all</span> migrations<span class=\"token punctuation\">:</span> admin<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> contenttypes<span class=\"token punctuation\">,</span> sessions<span class=\"token punctuation\">,</span> shortener\nRunning migrations<span class=\"token punctuation\">:</span>\n  Applying shortener<span class=\"token punctuation\">.</span>0001_initial<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"2-createsuperuser\" style=\"position:relative;\"><a href=\"#2-createsuperuser\" aria-label=\"2 createsuperuser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. CreateSuperUser</h2>\n<ul>\n<li>\n<p>앱의 첫 슈퍼 유저(사용자)를 만드는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py createsuperuser</code></pre></div>\n</li>\n</ul>\n<br/>    \n<ul>\n<li>\n<p>실습해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> ➜  shrinkers git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python manage<span class=\"token punctuation\">.</span>py createsuperuser\nUsername <span class=\"token punctuation\">(</span>leave blank to use <span class=\"token string\">'jinipark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> admin\nEmail address<span class=\"token punctuation\">:</span> admin@shrinkers<span class=\"token punctuation\">.</span>com \nPassword<span class=\"token punctuation\">:</span> \nPassword <span class=\"token punctuation\">(</span>again<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \nSuperuser created successfully<span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>비밀번호 규칙 → 최소 8자(8자 이하인 경우에도 생성은 가능)</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-dbeaver-설치\" style=\"position:relative;\"><a href=\"#3-dbeaver-%EC%84%A4%EC%B9%98\" aria-label=\"3 dbeaver 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. DBeaver 설치</h1>\n<ul>\n<li>DBeaver 공식 웹사이트(<a href=\"https://dbeaver.io/download/\">https://dbeaver.io/download/</a>)에 접속해 설치파일을 다운로드, 설치를 진행한다.</li>\n</ul>\n<br/>\n<ul>\n<li>DBeaver를 실행한뒤, 좌측 상단의 <code class=\"language-text\">+</code> 버튼을 눌러 프로젝트 생성을 시작한다.</li>\n<li>SQLite를 선택</li>\n<li>Path 옆의 Open 버튼을 선택 → 프로젝트 폴더의 SQLite3 파일을 선택</li>\n<li>완료 버튼 클릭(DB 드라이버가 없는 경우 다운로드를 받도록 안내창이 생성된다)</li>\n</ul>\n<br/>\n<ul>\n<li>Tables 중 <code class=\"language-text\">auth</code> 와 <code class=\"language-text\">Django</code> 로 시작하는 테이블은 Django 프레임워크가 사용하는 부분, <code class=\"language-text\">shortener_payplan</code> 위의 실습에서 생성한 부분이다.</li>\n<li><code class=\"language-text\">auth_user</code> 테이블에서 <code class=\"language-text\">Data</code> 탭을 클릭해 들어가보면, 위의 실습에서 생성한 superuser를 확인할 수 있다.</li>\n</ul>\n<br/>\n<ul>\n<li>위의 사항들은 Django admin에서도 확인할 수 있지만 DBMS에서 확인하는 것이 훨씬 편리하다.</li>\n</ul>\n<br/>\n<ul>\n<li>Django admin으로 접속해 내용을 확인해보자.\n<ul>\n<li>\n<p>터미널에서 아래 명령어를 입력해 서버를 실행해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> ➜  shrinkers git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python manage<span class=\"token punctuation\">.</span>py runserver</code></pre></div>\n</li>\n<li>\n<p><a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a> 주소로 접속하면 Django 메인 화면이 뜨는데, 여기서 <a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a> 로 이동해 위 실습에서 생성한 admin 유저로 로그인해준다.</p>\n</li>\n<li>\n<p>user를 들어가보면 admin이 등록되어있음을 확인할 수 있다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>\n<p><br/><br/></p>","excerpt":"오늘도 셀프 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 강의 1일 1강 포스팅 챌린지 :)  04. Django Database Modeling (2) 1. Database Modeling 지난 시간에 이어 PayPlan에 대해 모델링을 진행할 것 class로 models라는 모듈의 Model을 상속받아온다. 컬럼 이름 및 데이터 타입 정의(예: name → 컬럼 이름, CharField → 데이터 타입) price의 경우 미국 등의 경우 integer를 사용할 수 없으나 한국 원화의 경우 integer를 사용해도 무방. 실제로 코드에 적용해보자. SHRINKERS > shortner > models.py 파일을 아래와 같이 수정해준다. class를 추가해 준 뒤에는 잠시 주석처리 해둔다. Terminal > New Terminal로 새 터미널 창을 연 다음 아래 명령어를 실행해준다. 위 명령어를 통해 Django 프레임워크가 필요로 하는 데이터 베이스를 생성한…","frontmatter":{"date":"July 21, 2022","title":"Python 패스트캠퍼스 챌린지 70일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220721-python-day70/"}},"next":{"id":"98168d94-0dc3-52d4-8394-c0fdd6d28044","html":"<p><code class=\"language-text\">.gitignore</code> 는 지금까지 업무에서 종종 사용하고 있었는데, 집에서 Django 실습 진행하다가 <code class=\"language-text\">.gitignore</code>를 사용할 일이 생겨 다시금 개념과 사용 방법을 정리해두려 한다.</p>\n<p><br/><br/></p>\n<h1 id=\"1-gitignore란\" style=\"position:relative;\"><a href=\"#1-gitignore%EB%9E%80\" aria-label=\"1 gitignore란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. .gitignore란?</h1>\n<p>프로젝트 내에 remote 저장소에 올리고 싶지 않은 파일이 있을 경우 Git에서 제외할 수 있는 설정 파일이다.</p>\n<br/>\n<p>일반적으로 IDE tool과 관련된 설정파일(예를 들면 이클립스의 <code class=\"language-text\">.classpath</code> 나 <code class=\"language-text\">.project</code> 파일), 백업파일이나 로그, 컴파일/빌드가 완료된 파일, 시크릿 정보(AWS root 계정 접속 key나 Django secret key 등)을 제외할 때 사용한다.</p>\n<p><br/><br/></p>\n<h1 id=\"2-gitignore-사용법\" style=\"position:relative;\"><a href=\"#2-gitignore-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"2 gitignore 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. .gitignore 사용법</h1>\n<ul>\n<li>.gitignore 파일은 항상 최상위 디렉터리에 존재해야 한다고 한다.</li>\n<li>.gitignore 파일을 생성 후, 제외할 파일명을 지정해주면 되는데, 여러 옵션을 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># : 주석</span>\n\n<span class=\"token comment\"># a.txt 파일을 제외</span>\na.txt\n\n<span class=\"token comment\"># .txt 확장자를 가진 모든 파일 제외</span>\n*.txt\n\n<span class=\"token comment\"># .txt 확장자 파일을 제외하나, 이 중 b.txt 파일만 포함하고 싶을 경우</span>\n<span class=\"token operator\">!</span>b.txt\n\n<span class=\"token comment\"># 현재 디렉터리에 있는 c.txt 파일만 제외(하위 폴더 내의 c.txt 파일은 제외하지 않음)</span>\n/c.txt\n\n<span class=\"token comment\"># build 디렉터리 내의 모든 파일 제외</span>\nbuild/\n\n<span class=\"token comment\"># doc/d.txt 파일만 제외 (doc/sub/e.txt는 제외하지 않음)</span>\ndoc/*.txt\n\n<span class=\"token comment\"># doc 디렉터리 내의 모든 .txt 파일 제외</span>\ndoc/**/*.txt\n</code></pre></div>\n<ul>\n<li>위와 같이 제외할 파일을 지정한 뒤에는 GitHub과 같은 원격 저장소에 소스코드와 함께 <code class=\"language-text\">.gitignore</code> 를 push 해주면 적용된다.</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 20, 2022","title":"Git의 .gitignore란? (+사용방법)","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220720-git-gitignor/"}},"prev":{"id":"a089eff5-0daa-5948-8e22-aeae309fa73f","html":"<p>오늘도 셀프 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 강의 1일 1강 포스팅 챌린지 :)</p>\n<br/>\n<h1 id=\"1-userdata-추가\" style=\"position:relative;\"><a href=\"#1-userdata-%EC%B6%94%EA%B0%80\" aria-label=\"1 userdata 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. UserData 추가</h1>\n<ul>\n<li>Django는 프로젝트 생성시에 user 데이터베이스를 생성하기때문에 User 데이터베이스를 수정하기는 쉽지 않다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User <span class=\"token keyword\">as</span> U <span class=\"token comment\"># UserDetail 클래스에서 사용</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> AbstractUser <span class=\"token comment\"># AbstractUser 클래스에서 사용</span>\n\n<span class=\"token comment\"># Create your models here.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span>AbstractUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pay_plan <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>PayPlan<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>DO_NOTHING<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDetail</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>OneToOneField<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    pay_plan <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>PayPlan<span class=\"token punctuation\">,</span> on_delet<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>DO_NOTHING<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>AbstractUser: 현재 사용하고 있는 유저를 추상화해서 PayPlan을 넣겠다라는 것.</p>\n</li>\n<li>\n<p>두 가지 방법이 있음</p>\n<ul>\n<li>class Users → 한 테이블에 쌓임</li>\n<li>class UserDetail → 두 테이블에 쌓임</li>\n</ul>\n</li>\n<li>\n<p>AbstrctUser로 유저에 추가정보를 넣게 될 경우 settings.py에서 파일 내용을 아래와 같이 수정해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># Application definition</span>\nAUTH_USER_MODEL <span class=\"token operator\">=</span> <span class=\"token string\">\"shortener.Users\"</span>\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'shortener'</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">INSTALLED_APPS</code> 위에 <code class=\"language-text\">AUTH_USER_MODEL</code> 을 추가해 shortener의 Users 클래스를 사용할 것을 명시해주어야 한다(인증을 위해서 어떤 데이터/테이블을 사용할 것인지를 지정해주는 것).</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>\n<p><br/><br/></p>","frontmatter":{"date":"July 22, 2022","title":"Python 패스트캠퍼스 챌린지 71일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220722-python-day71/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220721-python-day70/","nextSlug":"/220720-git-gitignor/","prevSlug":"/220722-python-day71/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}