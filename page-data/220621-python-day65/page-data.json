{"componentChunkName":"component---src-templates-blog-template-js","path":"/220621-python-day65/","result":{"data":{"cur":{"id":"d59edfb8-6835-555f-a8ea-b69eadf72ccb","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬에서의 re모듈 사용방법(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-21-Python-Photo/2022-06-21-Python-Photo1.jpg\" alt=\"2022-06-21-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-21-Python-Photo/2022-06-21-Python-Photo2.jpg\" alt=\"2022-06-21-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"04-파이썬-re-모듈-사용-방법1\" style=\"position:relative;\"><a href=\"#04-%ED%8C%8C%EC%9D%B4%EC%8D%AC-re-%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%951\" aria-label=\"04 파이썬 re 모듈 사용 방법1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. 파이썬 re 모듈 사용 방법(1)</h1>\n<h2 id=\"1-re-모듈의-메서드\" style=\"position:relative;\"><a href=\"#1-re-%EB%AA%A8%EB%93%88%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1 re 모듈의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. re 모듈의 메서드</h2>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>찾는 경우</th>\n<th>없는 경우</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>match</td>\n<td>문자열 처음부터 검색</td>\n<td>match object 1개</td>\n<td>None</td>\n</tr>\n<tr>\n<td>search</td>\n<td>문자열 전체를 검색</td>\n<td>match object 1개</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>(regex, 문자열) 형태로 표현</li>\n</ul>\n<br/>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>찾는 경우</th>\n<th>없는 경우</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>findall</td>\n<td>문자열 전체를 검색</td>\n<td>문자열 리스트</td>\n<td>빈 리스트</td>\n</tr>\n<tr>\n<td>finditer</td>\n<td>문자열 전체를 검색</td>\n<td>match object iterator</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>findall ⇒ (’a’, ‘a’) 형태로 표현</li>\n<li>finditer ⇒ iterator(순서가 있는)의 약어.</li>\n</ul>\n<br/>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>찾는 경우</th>\n<th>없는 경우</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fullmatch</td>\n<td>패턴과 문자열이 남는 부분 없이 완벽하게 일치</td>\n<td>match object 1개</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p><br/><br/></p>\n<h2 id=\"2-match-객체의-메서드\" style=\"position:relative;\"><a href=\"#2-match-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2 match 객체의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. match 객체의 메서드</h2>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>반환 값 예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>group</td>\n<td>매칭된 문자열을 반환</td>\n<td>people</td>\n</tr>\n<tr>\n<td>start</td>\n<td>매칭된 문자열의 시작 위치</td>\n<td>5</td>\n</tr>\n<tr>\n<td>end</td>\n<td>매칭된 문자열의 끝 위치</td>\n<td>11</td>\n</tr>\n<tr>\n<td>span</td>\n<td>매칭된 문자열의 (시작, 끝) 튜플</td>\n<td>(5,11)</td>\n</tr>\n</tbody>\n</table>\n<p><br/><br/></p>\n<h2 id=\"3-실습\" style=\"position:relative;\"><a href=\"#3-%EC%8B%A4%EC%8A%B5\" aria-label=\"3 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 실습</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>맨 앞의 love를 지울 경우에는 어떻게 표시되는지 보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\nNone</code></pre></div>\n<br/>\n<ul>\n<li>search 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>findall 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<ul>\n<li>finditer를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></code></pre></div>\n<ul>\n<li>순서가 있는 오브젝트를 출력할 때에는 for in문을 사용해야한다.</li>\n</ul>\n<br/>\n<ul>\n<li>for in문을 사용해 finditer문의 결과를 다시 출력해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>fullmatch도 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'Hey Guys, read books'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.*</code> 로 표현해도 일치할 것이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<h2 id=\"3-search-object의-메서드\" style=\"position:relative;\"><a href=\"#3-search-object%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"3 search object의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. search object의 메서드</h2>\n<ul>\n<li><code class=\"language-text\">.group()</code> 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople</code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.start()</code> 메서드도 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) start() : 매칭된 문자열의 시작 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과: 매칭된 문자열의 시작 위치(5)를 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople\n<span class=\"token number\">5</span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.end()</code> 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) start() : 매칭된 문자열의 시작 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 3) end() : 매칭된 문자열의 끝 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople\n<span class=\"token number\">5</span>\n<span class=\"token number\">11</span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.span()</code> 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) start() : 매칭된 문자열의 시작 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 3) end() : 매칭된 문자열의 끝 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 4) span() : 매칭된 문자열의 (시작, 끝)의 위치 튜플을 반환</span>\nprint<span class=\"token punctuation\">(</span>result.span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople\n<span class=\"token number\">5</span>\n<span class=\"token number\">11</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 re모듈 사용방법(1))을 알아보았다. 다음 포스팅에서는 파이썬 re모듈 사용방법(2)에 대해 알아보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","excerpt":"오늘은 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 파트 2의 파이썬에서의 re모듈 사용방법(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.  아래는 공부 인증 사진. 2022-06-21-Python-Photo1 2022-06-21-Python-Photo2  04. 파이썬 re 모듈 사용 방법(1) 1. re 모듈의 메서드 종류 기능 찾는 경우 없는 경우 match 문자열 처음부터 검색 match object 1개 None search 문자열 전체를 검색 match object 1개 None (regex, 문자열) 형태로 표현 종류 기능 찾는 경우 없는 경우 findall 문자열 전체를 검색 문자열 리스트 빈 리스트 finditer 문자열 전체를 검색 match object iterator None findall ⇒ (’a’, ‘a’) 형태로 표현 finditer ⇒ iterato…","frontmatter":{"date":"June 21, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 65일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220621-python-day65/"}},"next":{"id":"8b18ba57-66d5-5c7d-9c70-b208f9ab2a19","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬에서의 정규표현식 사용방법(2)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-20-Python-Photo/2022-06-20-Python-Photo1.jpg\" alt=\"2022-06-20-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-20-Python-Photo/2022-06-20-Python-Photo2.jpg\" alt=\"2022-06-20-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"01-정규표현식-소개\" style=\"position:relative;\"><a href=\"#01-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%86%8C%EA%B0%9C\" aria-label=\"01 정규표현식 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 정규표현식 소개</h1>\n<ul>\n<li>정규표현식: 문자열에서 특정 패턴을 찾고 싶을 때\n<ul>\n<li>조건문, 반복문 들을 복잡하게 사용해야할 때 사용</li>\n</ul>\n</li>\n<li>유효성 검사: if문을 사용하면 여러 줄에 걸쳐 작업해야하나 정규표현식은 아주 빠르게 할 수 있다.정</li>\n</ul>\n<br/>\n<h2 id=\"정규-표현식의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"정규 표현식의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규 표현식의 장점</h2>\n<ul>\n<li>문자열 추출, 유효성 검사에서 유용하게 쓰일 수 있다.</li>\n<li>거의 모든 언어에서 지원(범용성이 높다)</li>\n</ul>\n<br/>\n<h2 id=\"정규-표현식의-단점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"정규 표현식의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규 표현식의 단점</h2>\n<ul>\n<li>가독성이 좋지 못하다.</li>\n<li>유지보수가 힘들다(내가 짠 코드를 남이 이해하기 어렵고, 남이 짠 코드를 내가 이해하기 어렵다).\n<ul>\n<li>예: <code class=\"language-text\">^(?=.*[A-Za-z]...(생략)</code></li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"03-정규표현식-사용방법2\" style=\"position:relative;\"><a href=\"#03-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%952\" aria-label=\"03 정규표현식 사용방법2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. 정규표현식 사용방법(2)</h1>\n<h2 id=\"1-quantifiers--alternation\" style=\"position:relative;\"><a href=\"#1-quantifiers--alternation\" aria-label=\"1 quantifiers  alternation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Quantifiers &#x26; Alternation</h2>\n<h3 id=\"1-quantifiers수량자\" style=\"position:relative;\"><a href=\"#1-quantifiers%EC%88%98%EB%9F%89%EC%9E%90\" aria-label=\"1 quantifiers수량자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Quantifiers(수량자)</h3>\n<ul>\n<li>\n<p>Quantifiers(수량자): 갯수를 지정할 수 있는 정규표현식</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">rait rabit rabbit rabbbit rabbbbit</code></pre></div>\n<ul>\n<li><code class=\"language-text\">rabit/gm</code> : 1 match</li>\n<li><code class=\"language-text\">rab*it/gm</code> : 5 matches(b가 0개 이상인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab+it/gm</code> : 4 matches(b가 1개 이상인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab?it/gm</code> : 2 matches(b가 0개 혹은 1개인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab{3}it/gm</code> : 1 match(b가 정확히 3개 들어있는 경우만 불러온다)</li>\n<li><code class=\"language-text\">rab{2,}it/gm</code> : 3 matches(b가 2개 이상인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab{1,3}it/gm</code> : 3 matches(b가 1~3개 들어있는 경우를 모두 불러온다)</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-alternation\" style=\"position:relative;\"><a href=\"#2-alternation\" aria-label=\"2 alternation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Alternation</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#좋아요, #좋아요반사, #팔로우, #맞팔,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">#.+,</code> : <code class=\"language-text\">#</code> # 문자로 시작하는 &#x26; <code class=\"language-text\">.</code> = 모든 문자 &#x26; <code class=\"language-text\">,</code> 로 끝나는 문자 ⇒ 전체 한줄이 잡힘(Greedy방식)</li>\n<li><code class=\"language-text\">#.+?,</code>: Non-Greedy방식. 매치가 최소한으로 일어나도록 해줌 ⇒ 단어 하나씩 잡힘</li>\n<li><code class=\"language-text\">#.{3}?,</code> : 3글자 이상인 단어</li>\n<li><code class=\"language-text\">#.{2,3}?,</code> : 2글자 이상 3글자 이하인 단어</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">grey gray</code></pre></div>\n<ul>\n<li><code class=\"language-text\">gray|grey</code> : gray 또는 grey를 찾는다.</li>\n<li><code class=\"language-text\">gr(e|a)y</code> : gray 또는 grey를 찾는다(e &#x26; a가 그룹).</li>\n<li><code class=\"language-text\">gr[ae]y</code> : gray 또는 grey를 찾는다(a 혹은 e를 찾는다).</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"2-groups--lookaround\" style=\"position:relative;\"><a href=\"#2-groups--lookaround\" aria-label=\"2 groups  lookaround permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Groups &#x26; Lookaround</h2>\n<h3 id=\"1-groups\" style=\"position:relative;\"><a href=\"#1-groups\" aria-label=\"1 groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Groups</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#좋아요, #좋아요반사, #팔로우, #맞팔,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">#(.+?),#</code> : 그룹화해서 ,특정 부분만 뽑고싶을 때(#와 , 제거 등) 사용</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">I am a tiny tiny boy.\nMay I have have a question?</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\\1</code>: 역참조.</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-lookaround\" style=\"position:relative;\"><a href=\"#2-lookaround\" aria-label=\"2 lookaround permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Lookaround</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>소가죽 샌들 -레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>스마트 워치 -레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>브이넥 반팔 티셔츠 -애플스토어\n쿨링밴딩 팬츠 -바나나스토어\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>남친룩 오버핏 셔츠 -래빗팜\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>여친룩 오버핏 셔츠 -래빗팜</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\\[(특가할인|품절)].*</code> : [특가할인] [품절]데이터를 뽑는 것.</li>\n<li><code class=\"language-text\">\\[(?:특가할인|품절)].*</code> : [특가할인] [품절]데이터를 뽑지만 그룹에 대한 결과로 나타내고 싶지 않은 경우</li>\n<li><code class=\"language-text\">\\[(?:특가할인|품절)].*</code> : 긍정형 전방 탐색\n<ul>\n<li><code class=\"language-text\">.*(?=-레몬스토어)</code></li>\n<li><code class=\"language-text\">.*?=-(?!레몬).*스토어</code></li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 정규표현식 사용방법(2)을 알아보았다. 다음 포스팅에서는 파이썬 re모듈 사용방법(1)에 대해 알아보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","frontmatter":{"date":"June 20, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 64일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220620-python-day64/"}},"prev":{"id":"cf8c2750-82fa-5caa-ad8c-38e6807efb05","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬 re 모듈 사용 방법(2)를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-22-Python-Photo/2022-06-22-Python-Photo1.jpg\" alt=\"2022-06-22-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-22-Python-Photo/2022-06-22-Python-Photo2.jpg\" alt=\"2022-06-22-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"05-파이썬-re-모듈-사용-방법2\" style=\"position:relative;\"><a href=\"#05-%ED%8C%8C%EC%9D%B4%EC%8D%AC-re-%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%952\" aria-label=\"05 파이썬 re 모듈 사용 방법2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>05. 파이썬 re 모듈 사용 방법(2)</h1>\n<ul>\n<li>실습: 전화번호 형식을 검사하는 정규표현식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">02-512-3232\n010-2343-3333\n<span class=\"token number\">1</span>-32-321\naaa-bbb-cccc\n010-23435-5555\n010-2343-55555</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"1-groupindex\" style=\"position:relative;\"><a href=\"#1-groupindex\" aria-label=\"1 groupindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. group(index)</h2>\n<ul>\n<li><code class=\"language-text\">\\d{2,3}-\\d{3,4}-\\d{4}</code> 로 전화번호 형식을 표현할 수 있다.</li>\n<li>하지만 마지막 행의 경우 마지막 번호가 다섯자리(전화번호가 아님)임에도 불구하고 매칭이되었다.\n<ul>\n<li><code class=\"language-text\">\\d{2,3}-\\d{3,4}-\\d{4}$</code> 로 걸러낼 수 있다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>파이썬에 적용하면 아래와 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 전화번호 정규표현식 연습</span>\n<span class=\"token comment\"># https://regexr.com/63bls</span>\n\n<span class=\"token comment\"># 1. Group 그룹</span>\n\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-\\d{4}$'</span>, str1<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/use/Documents/python_advanced/myvenv/Chapter06/02.정규표현식\n<span class=\"token number\">2</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">13</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'010-2343-3333'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>마지막 번호를 그룹으로 묶어준다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 전화번호 정규표현식 연습</span>\n<span class=\"token comment\"># https://regexr.com/63bls</span>\n\n<span class=\"token comment\"># 1. Group 그룹</span>\n\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})$'</span>, str1<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/use/Documents/python_advanced/myvenv/Chapter06/02.정규표현식\n<span class=\"token number\">2</span>.py\n<span class=\"token number\">3333</span></code></pre></div>\n<ul>\n<li>group으로 묶지 않거나 group(0)으로 지정한 경우 전체 매칭 값이 나온다.</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"2-그룹으로-만든-매칭-결과-가져오기\" style=\"position:relative;\"><a href=\"#2-%EA%B7%B8%EB%A3%B9%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A0-%EB%A7%A4%EC%B9%AD-%EA%B2%B0%EA%B3%BC-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"2 그룹으로 만든 매칭 결과 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 그룹으로 만든 매칭 결과 가져오기</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">010-2343-7888,010-2343-1234,010-2343-5678,010-2343-9999,010-2343-2222</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\\d{2,3}-\\d{3,4}-\\d{4}(?=,|$)</code> ⇒ ,를 제외한 번호값들 가져오는 정규표현식\n<ul>\n<li><code class=\"language-text\">?=</code> 를 통해 콤마(,)를 조건에는 표현하나 결과에는 가져오지 않도록 한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>파이썬에 적용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 전화번호 정규표현식 연습</span>\n<span class=\"token comment\"># https://regexr.com/63bls</span>\n\n<span class=\"token comment\"># 1. Group 그룹</span>\n\n<span class=\"token comment\"># 1) 매칭되는 문자열이 한 개</span>\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})$'</span>, str1<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) 매칭되는 문자열 여러개</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-7888,010-2343-1234,010-2343-5678,010-2343-9999,010-2343-2222'</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})(?=,|$)'</span>, str2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span></code></pre></div>\n<ul>\n<li>마지막 4자리를 그룹으로 감싸주어야 출력이 된다.</li>\n</ul>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/use/Documents/python_advanced/myvenv/Chapter06/02.정규표현식\n<span class=\"token number\">2</span>.py\n<span class=\"token number\">3333</span>\n<span class=\"token number\">7888</span>\n<span class=\"token number\">1234</span>\n<span class=\"token number\">5678</span>\n<span class=\"token number\">9999</span>\n<span class=\"token number\">2222</span></code></pre></div>\n<br/>\n<ul>\n<li>출력형식을 변경해주려면 enumerate를 추가한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 전화번호 정규표현식 연습</span>\n<span class=\"token comment\"># https://regexr.com/63bls</span>\n\n<span class=\"token comment\"># 1. Group 그룹</span>\n\n<span class=\"token comment\"># 1) 매칭되는 문자열이 한 개</span>\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})$'</span>, str1<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) 매칭되는 문자열 여러개</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-7888,010-2343-1234,010-2343-5678,010-2343-9999,010-2343-2222'</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})(?=,|$)'</span>, str2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> idx, result <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>results, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>:\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{idx}. {result.group(1)}'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/use/Documents/python_advanced/myvenv/Chapter06/02.정규표현식\n<span class=\"token number\">2</span>.py\n<span class=\"token number\">3333</span>\n<span class=\"token number\">1</span>. <span class=\"token number\">7888</span>\n<span class=\"token number\">2</span>. <span class=\"token number\">1234</span>\n<span class=\"token number\">3</span>. <span class=\"token number\">5678</span>\n<span class=\"token number\">4</span>. <span class=\"token number\">9999</span>\n<span class=\"token number\">5</span>. <span class=\"token number\">2222</span></code></pre></div>\n<h2 id=\"3-sub문자열-교체--후방-탐색\" style=\"position:relative;\"><a href=\"#3-sub%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B5%90%EC%B2%B4--%ED%9B%84%EB%B0%A9-%ED%83%90%EC%83%89\" aria-label=\"3 sub문자열 교체  후방 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. sub(문자열 교체) &#x26; 후방 탐색</h2>\n<ul>\n<li>전방탐색의 경우, (매칭O)-(매칭X) 순서일 때만 적용 가능(뒤의 내용을 없애고 싶은 경우)</li>\n<li><code class=\"language-text\">(?&lt;=\\d{2,3}-\\d{3,4}-)\\d{4}</code> 일 경우 뒤의 네 자리만 가져올 수 있음.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 전화번호 정규표현식 연습</span>\n<span class=\"token comment\"># https://regexr.com/63bls</span>\n\n<span class=\"token comment\"># 1. Group 그룹</span>\n\n<span class=\"token comment\"># 1) 매칭되는 문자열이 한 개</span>\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})$'</span>, str1<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) 매칭되는 문자열 여러개</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-7888,010-2343-1234,010-2343-5678,010-2343-9999,010-2343-2222'</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})(?=,|$)'</span>, str2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> idx, result <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>results, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>:\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{idx}. {result.group(1)}'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. Subsitution (교체)</span>\nstr3 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.sub<span class=\"token punctuation\">(</span><span class=\"token string\">'(?&lt;=\\d{2,3}-\\d{3,4}-)\\d{4}'</span>, <span class=\"token string\">'****'</span>, str3<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"/Users/jinipark/Documents/python_advanced/myvenv/Chapter06/02.정규표현식2.py\"</span>, line <span class=\"token number\">22</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    result <span class=\"token operator\">=</span> re.sub<span class=\"token punctuation\">(</span><span class=\"token string\">'(?&lt;=\\d{2,3}-\\d{3,4}-)\\d{4}'</span>, <span class=\"token string\">'****'</span>, str3<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/re.py\"</span>, line <span class=\"token number\">209</span>, <span class=\"token keyword\">in</span> sub\n    <span class=\"token builtin class-name\">return</span> _compile<span class=\"token punctuation\">(</span>pattern, flags<span class=\"token punctuation\">)</span>.sub<span class=\"token punctuation\">(</span>repl, string, count<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/re.py\"</span>, line <span class=\"token number\">303</span>, <span class=\"token keyword\">in</span> _compile\n    p <span class=\"token operator\">=</span> sre_compile.compile<span class=\"token punctuation\">(</span>pattern, flags<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_compile.py\"</span>, line <span class=\"token number\">768</span>, <span class=\"token keyword\">in</span> compile\n    code <span class=\"token operator\">=</span> _code<span class=\"token punctuation\">(</span>p, flags<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_compile.py\"</span>, line <span class=\"token number\">607</span>, <span class=\"token keyword\">in</span> _code\n    _compile<span class=\"token punctuation\">(</span>code, p.data, flags<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/sre_compile.py\"</span>, line <span class=\"token number\">182</span>, <span class=\"token keyword\">in</span> _compile\n    raise error<span class=\"token punctuation\">(</span><span class=\"token string\">\"look-behind requires fixed-width pattern\"</span><span class=\"token punctuation\">)</span>\nre.error: look-behind requires fixed-width pattern</code></pre></div>\n<ul>\n<li>\n<p>에러메시지가 발생한다.</p>\n<ul>\n<li>후방 탐색 ⇒ 범위가 고정되어야 함</li>\n<li>전방 탐색 ⇒ 범위가 유동적임</li>\n</ul>\n</li>\n<li>\n<p>각 범위를 3,4,4로 고정해준다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 전화번호 정규표현식 연습</span>\n<span class=\"token comment\"># https://regexr.com/63bls</span>\n\n<span class=\"token comment\"># 1. Group 그룹</span>\n\n<span class=\"token comment\"># 1) 매칭되는 문자열이 한 개</span>\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})$'</span>, str1<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) 매칭되는 문자열 여러개</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-7888,010-2343-1234,010-2343-5678,010-2343-9999,010-2343-2222'</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'\\d{2,3}-\\d{3,4}-(\\d{4})(?=,|$)'</span>, str2<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> idx, result <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>results, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>:\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">'{idx}. {result.group(1)}'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. Subsitution (교체)</span>\nstr3 <span class=\"token operator\">=</span> <span class=\"token string\">'010-2343-3333'</span>\nresult <span class=\"token operator\">=</span> re.sub<span class=\"token punctuation\">(</span><span class=\"token string\">'(?&lt;=\\d{3}-\\d{4}-)\\d{4}'</span>, <span class=\"token string\">'****'</span>, str3<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/02.정규표현식\n<span class=\"token number\">2</span>.py\n<span class=\"token number\">3333</span>\n<span class=\"token number\">1</span>. <span class=\"token number\">7888</span>\n<span class=\"token number\">2</span>. <span class=\"token number\">1234</span>\n<span class=\"token number\">3</span>. <span class=\"token number\">5678</span>\n<span class=\"token number\">4</span>. <span class=\"token number\">9999</span>\n<span class=\"token number\">5</span>. <span class=\"token number\">2222</span>\n010-2343-****</code></pre></div>\n<ul>\n<li>맨 마지막 4글자가 교체되었다.</li>\n</ul>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 re모듈의 사용방법(2)을 알아보았다. 다음 포스팅에서는 정규표현식 실습문제를 풀어보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","frontmatter":{"date":"June 22, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 66일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220622-python-day66/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220621-python-day65/","nextSlug":"/220620-python-day64/","prevSlug":"/220622-python-day66/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}