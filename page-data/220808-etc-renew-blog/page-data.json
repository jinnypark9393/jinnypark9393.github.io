{"componentChunkName":"component---src-templates-blog-template-js","path":"/220808-etc-renew-blog/","result":{"data":{"cur":{"id":"0c820bc9-e72c-5739-855f-28252493dcdf","html":"<p>gatsby(정적 웹사이트 생성기)에서 맘에 드는 테마를 발견해 gatsby로 이관하였다.\n기존 포스팅은 아직 이관중.</p>","excerpt":"gatsby(정적 웹사이트 생성기)에서 맘에 드는 테마를 발견해 gatsby로 이관하였다.\n기존 포스팅은 아직 이관중.","frontmatter":{"date":"August 08, 2022","title":"블로그 리뉴얼(jekyll 에서 gatsby로)","categories":"etc","author":"jinnypark9393","emoji":"📔"},"fields":{"slug":"/220808-etc-renew-blog/"}},"next":{"id":"c035e5dd-0be8-5792-9959-264edf4db075","html":"<h1 id=\"제-4장-기본적인-알고리즘4\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-4%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%984\" aria-label=\"제 4장 기본적인 알고리즘4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 4장: 기본적인 알고리즘(4)</h1>\n<h2 id=\"42-배열-데이터의-최소-값을-구하려면-최소-값을-저장할-변수를-준비한다\" style=\"position:relative;\"><a href=\"#42-%EB%B0%B0%EC%97%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%B5%9C%EC%86%8C-%EA%B0%92%EC%9D%84-%EA%B5%AC%ED%95%98%EB%A0%A4%EB%A9%B4-%EC%B5%9C%EC%86%8C-%EA%B0%92%EC%9D%84-%EC%A0%80%EC%9E%A5%ED%95%A0-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%A4%80%EB%B9%84%ED%95%9C%EB%8B%A4\" aria-label=\"42 배열 데이터의 최소 값을 구하려면 최소 값을 저장할 변수를 준비한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>42. 배열 데이터의 최소 값을 구하려면 최소 값을 저장할 변수를 준비한다</h2>\n<ul>\n<li>최소값을 구하는 알고리즘은 최대값을 구하는 알고리즘과 유사하나 두 가지가 다르다\n<ul>\n<li>최소 값을 저장하는 변수의 초기 값</li>\n<li>배열 요소의 비교 논리</li>\n</ul>\n</li>\n<li>최소 값을 구하는 순서\n<ul>\n<li>1단계: 최소 값을 저장하는 변수 MIN을 대상 데이터들의 최대 값보다 큰 값으로 초기화한다.</li>\n<li>2단계: 첨자를 저장하는 변수 I를 0으로 초기화한다.</li>\n<li>3단계: I가 N 미만이라면 4~5단계를 반복한다.</li>\n<li>4단계: JUM[I] &#x3C; MIN이라면, MIN에 JUM[I]를 대입한다.</li>\n<li>5단계: I를 1 증가시킨다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"43-배열-데이터에-등수를-매기려면-순위를-저장할-또-다른-배열을-준비한다\" style=\"position:relative;\"><a href=\"#43-%EB%B0%B0%EC%97%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EB%93%B1%EC%88%98%EB%A5%BC-%EB%A7%A4%EA%B8%B0%EB%A0%A4%EB%A9%B4-%EC%88%9C%EC%9C%84%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%A0-%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%A4%80%EB%B9%84%ED%95%9C%EB%8B%A4\" aria-label=\"43 배열 데이터에 등수를 매기려면 순위를 저장할 또 다른 배열을 준비한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>43. 배열 데이터에 등수를 매기려면 순위를 저장할 또 다른 배열을 준비한다.</h2>\n<ul>\n<li>등수를 구하는 방법\n<ul>\n<li>1단계: 배열 RANK의 모든 요소를 1로 초기화한다.</li>\n<li>2단계: 첨자를 저장하는 변수 I에 0을 저장한다.</li>\n<li>3단계: I이 N미만이라면 4~8단계를 반복한다.</li>\n<li>4단계: 첨자를 저장하는 변수 J를 0으로 초기화한다.</li>\n<li>5단계: J가 N 미만이라면 아래 6~7단계를 반복한다.</li>\n<li>6단계: JUM[I] &#x3C; JUM[J]라면, RANK[I]를 1 증가시킨다.</li>\n<li>7단계: J를 1 증가시킨다.</li>\n<li>8단계: I에 1을 증가시킨다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"August 07, 2022","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(4)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220807-algorithm-book-with-pic/"}},"prev":{"id":"6514388b-e82f-5341-ba99-d06b880055f1","html":"<h1 id=\"0-배경상황\" style=\"position:relative;\"><a href=\"#0-%EB%B0%B0%EA%B2%BD%EC%83%81%ED%99%A9\" aria-label=\"0 배경상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 배경상황</h1>\n<p>현재 프로젝트가 Java로 구성되어있어 자바 메모리 구조에 대해서는 이전에 개인적으로 공부한 적이 있다.</p>\n<br/>\n<p>하지만 최근 새로 착수한 프로젝트가 static의 과도한 사용으로 메모리 이슈가 발생하고 있는 프로젝트라 static의 개념을 새로 학습하고, Java 메모리 구조에 대해 다시 정리해보려 한다.</p>\n<h1 id=\"1-static정적이란\" style=\"position:relative;\"><a href=\"#1-static%EC%A0%95%EC%A0%81%EC%9D%B4%EB%9E%80\" aria-label=\"1 static정적이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Static(정적)이란?</h1>\n<p>영문을 그대로 직역하면 고정된이라는 뜻을 가지고 있는데, 실제로 static은 프로그램 시작 시 메모리에 고정적으로 할당되어, 프로그램이 종료될 때 해제된다.</p>\n<br/>\n<p><code class=\"language-text\">static</code> 이라는 키워드를 사용해 **정적 변수(static variable)**과 **정적 메서드(static method)**를 생성할 수 있다. 이 둘을 합쳐 <strong>정적 멤버(static member)</strong>, 혹은 **클래스 멤버(class member)**라고 부른다.</p>\n<br/>\n<p>이렇게 생성된 정적 변수, 정적 메서드의 경우 클래스가 메모리에 올라갈 때 자동으로 생성된다. 즉, 인스턴스(객체) 생성 없이 바로 사용이 가능하다.</p>\n<br/>\n<h1 id=\"2-static의-사용용도\" style=\"position:relative;\"><a href=\"#2-static%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9A%A9%EB%8F%84\" aria-label=\"2 static의 사용용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Static의 사용용도</h1>\n<h2 id=\"상수를-정의\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%88%98%EB%A5%BC-%EC%A0%95%EC%9D%98\" aria-label=\"상수를 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상수를 정의</h2>\n<p>절대 변하지 않는 변수를 <strong>상수</strong>라고 하는데, 객체 내에서 매번 일반 변수로 정의하기 보다는 정적 변수로 선언 시 메모리를 아낄 수 있다.</p>\n<br/>\n<h2 id=\"유틸리티-클래스를-정의\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98\" aria-label=\"유틸리티 클래스를 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유틸리티 클래스를 정의</h2>\n<p>**유틸리티 클래스(utility class)**는 인스턴스 메서드와 변수를 제공하지 않고, 데이터 처리를 위한 정적 메서드만 존재하는 클래스를 뜻한다.</p>\n<br/>\n<p>예를 들어 Java의 <code class=\"language-text\">java.util.Math</code> 클래스의 경우, 상수 외의 인스턴스 변수가 없고, 계산을 위한 정적 메서드만 제공한다.</p>\n<br/>\n<p><strong>Static영역에 할당된 메모리의 경우, 모든 객체가 해당 메모리를 공유하기 때문에</strong>, 위와 같이 객체의 상태를 이용하지 않고, 여러 객체의 필요에 의해 데이터를 처리하는 공통 로직이 필요할 경우 static을 사용하여 메모리를 절약할 수 있다.</p>\n<br/>\n<h1 id=\"3-static의-단점\" style=\"position:relative;\"><a href=\"#3-static%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"3 static의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Static의 단점</h1>\n<h2 id=\"메모리-문제\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%AC%B8%EC%A0%9C\" aria-label=\"메모리 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 문제</h2>\n<p>Static은 프로그램 실행 시점에 메모리에 할당을 하며, 프로그램 종료 시까지 메모리에서 해제되지 않기 때문에 과도하게 사용할 경우 메모리 부족 문제가 발생할 수 있다.</p>\n<br/>\n<h2 id=\"동시성-문제\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C\" aria-label=\"동시성 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시성 문제</h2>\n<p>Static은 전역에서 접근이 가능하므로 별도의 동기화 전략이 수립되어야 한다.</p>\n<br/>\n<h2 id=\"런타임-다형성-불가\" style=\"position:relative;\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84-%EB%8B%A4%ED%98%95%EC%84%B1-%EB%B6%88%EA%B0%80\" aria-label=\"런타임 다형성 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타임 다형성 불가</h2>\n<p>Static으로만 이루어진 메서드를 사용하는 객체의 경우, 해당 객체를 메모리로 할당해 사용하는 것이 아니고 <code class=\"language-text\">object.method</code> 로 바로 접근하여 호출하게 된다.</p>\n<br/>\n<h2 id=\"객체-상태-사용-불가\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%81%ED%83%9C-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\" aria-label=\"객체 상태 사용 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 상태 사용 불가</h2>\n<p>정적 메서드 내부에서는 클래스 인스턴스 필드를 사용할 수 없기 때문에 인자를 모두 외부에서 주입해야한다.</p>\n<br/>\n<p>Static은 프로그램 실행 시점에 메모리에 올라가는데, 정적 메서드 내부에 객체의 인스턴스 필드가 초기화 되지 않을 경우 문제가 생길 수 있기 때문에 위와 같이 구현된다. 따라서 정적 메서드 안에는 정적 변수만 사용 가능하다.</p>\n<br/>\n<p>일반 메서드라면 객체 내의 상태를 통해 해당 메서드를 구현할 수 있으므로 변화하는 상태에 따라 다채로운 기능 구현이 가능하나, 정적 메서드의 경우 이러한 형태로 구현할 수 없다.</p>\n<br/>\n<p>즉, 객체 내 정적 메서드가 많아지는 경우, 외부 값에 의존하는 수동적 객체가 된다.</p>\n<br/>\n<h2 id=\"테스트-용이성-저하\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9A%A9%EC%9D%B4%EC%84%B1-%EC%A0%80%ED%95%98\" aria-label=\"테스트 용이성 저하 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 용이성 저하</h2>\n<p>정적 필드는 전역으로 관리되기 때문에 프로그램 전체에서 해당 필드에 접근 및 수정이 가능하다.</p>\n<br/>\n<p>따라서 해당 필드를 추론하기 어려워 테스트가 까다롭다.</p>\n<br/>\n<h1 id=\"4-static의-메모리-할당\" style=\"position:relative;\"><a href=\"#4-static%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"4 static의 메모리 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Static의 메모리 할당</h1>\n<p>동적(Dynamic)의 경우 객체를 런타임 도중에 힙 영역(Heap Area)에 할당한다.</p>\n<br/>\n<p>반면, 정적(Static)의 경우, 프로그램이 시작되는 시점에 클래스 로더(Class Loader)가 클래스를 해석해 메서드 영역 혹은 힙 영역에 클래스 메타 정보 및 정적 변수를 적재한다.</p>\n<br/>\n<h1 id=\"5-static의-종류\" style=\"position:relative;\"><a href=\"#5-static%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"5 static의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Static의 종류</h1>\n<h2 id=\"static-변수\" style=\"position:relative;\"><a href=\"#static-%EB%B3%80%EC%88%98\" aria-label=\"static 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static 변수</h2>\n<ul>\n<li>정적 변수는 한 클래스의 모든 인스턴스에서 공유된다.</li>\n<li>같은 클래스에 속하는 모든 인스턴스에서 해당 정적 변수의 하나뿐인 복사본을 공유한다.</li>\n<li>정적 변수는 클래스가 메모리에 로딩될 때 초기화 된다.</li>\n<li>일반적으로 클래스의 새로운 인스턴스가 처음 만들어지거나, 정적 메서드가 실행될 때 해당 클래스를 불러와 로딩한다.</li>\n<li>정적 변수도 인스턴스 변수와 마찬가지로 선언만 하고 초기화 하지 않을 경우 기본 값으로 초기화된다.</li>\n<li><code class=\"language-text\">static final</code> 로 선언된 변수는 상수이며, 이 경우 초기화 하지 않으면 에러가 발생하며, 초기화 이후 값 변경이 불가하다.</li>\n<li>정적 변수는 정적 메서드와 달리 일반 메서드에서도 접근할 수 있다.</li>\n</ul>\n<br/>\n<h2 id=\"static-메서드\" style=\"position:relative;\"><a href=\"#static-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"static 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static 메서드</h2>\n<ul>\n<li>인스턴스를 필요로 하지 않는 메서드</li>\n<li>Static 키워드를 이용해 메서드를 선언</li>\n<li>클래스명을 사용해 호출</li>\n<li>정적 메서드와 정적 메서드가 아닌 메서드를 섞어 클래스를 선언할 수 있으나, 정적 메서드가 아닌 메서드가 있다면 그 클래스의 인스턴스를 만들 수 있는 방법이 있어야 한다.</li>\n<li>정적 메서드에서 정적 변수가 아닌 변수(인스턴스 변수)를. 사용할 수 없다.</li>\n<li>정적 메서드 내에서 정적 메서드가 아닌 메서드를 사용할 수 없다.</li>\n<li>정적 메서드 내에서 this 키워드를 사용할 수 없다.</li>\n<li>클래스가 메모리에 로딩될 때 자동으로 선언도니다.</li>\n<li>Import Static을 이용해 import한 뒤, 클래스명을 사용하지 않고 바로 사용할 수 있다.</li>\n</ul>\n<br/>","frontmatter":{"date":"August 08, 2022","title":"Java의 static(정적)이란?","categories":"프로그래밍","author":"jinnypark9393","emoji":"☕"},"fields":{"slug":"/220808-programming-java-static/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220808-etc-renew-blog/","nextSlug":"/220807-algorithm-book-with-pic/","prevSlug":"/220808-programming-java-static/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}