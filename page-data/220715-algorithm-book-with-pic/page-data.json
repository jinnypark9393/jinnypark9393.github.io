{"componentChunkName":"component---src-templates-blog-template-js","path":"/220715-algorithm-book-with-pic/","result":{"data":{"cur":{"id":"316014cd-ea07-58bc-b345-4b3177a0da56","html":"<h1 id=\"제-4장-기본적인-알고리즘3\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-4%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%983\" aria-label=\"제 4장 기본적인 알고리즘3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 4장: 기본적인 알고리즘(3)</h1>\n<h2 id=\"40-배열-데이터의-평균-값은-반복-처리를-통해-합계와-개수를-구한-후-계산한다\" style=\"position:relative;\"><a href=\"#40-%EB%B0%B0%EC%97%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%8F%89%EA%B7%A0-%EA%B0%92%EC%9D%80-%EB%B0%98%EB%B3%B5-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%95%A9%EA%B3%84%EC%99%80-%EA%B0%9C%EC%88%98%EB%A5%BC-%EA%B5%AC%ED%95%9C-%ED%9B%84-%EA%B3%84%EC%82%B0%ED%95%9C%EB%8B%A4\" aria-label=\"40 배열 데이터의 평균 값은 반복 처리를 통해 합계와 개수를 구한 후 계산한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>40. 배열 데이터의 평균 값은 반복 처리를 통해 합계와 개수를 구한 후 계산한다</h2>\n<ul>\n<li>\n<p>배열의 끝에 저장된 보초 값으로 배열 데이터 개수를 관리하는 배열의 평균값 계산</p>\n<ul>\n<li>배열의 합계와 배열의 개수를 구한 뒤 평균 계산</li>\n</ul>\n</li>\n<li>\n<p>예시: 어떤 학급의 기말점수 (0~100)가 저장된 배열 JUM(배열 끝 보초값 —1)의 평균값은?</p>\n<ul>\n<li>평균 = 총점 / 학급 인원 수</li>\n<li>학급 인원 수 = COUNT (유효한 요소의 개수를 세는 변수)</li>\n<li>총점 = SUM (배열 요소의 합계 값을 저장하는 변수)</li>\n</ul>\n<p><strong>1단계</strong>: 변수 COUNT와 합계를 저장하는 변수 SUM을 0으로 초기화한다.</p>\n<p><strong>2단계</strong>: 배열 JUM의 첨자를 저장하는 변수 I를 0으로 초기화한다.</p>\n<p><strong>3단계</strong>: JUM[I]이 보초 값(-1)을 가리키지 않는 동안, 다음의 4~5 단계를 반복한다.</p>\n<p><strong>4단계</strong>: Count에 1을 더하고 SUM에 SUM + JUM[I]를 저장한다.</p>\n<p><strong>5단계</strong>: I에 1을 더한다.</p>\n<p><strong>6단계</strong>: 평균 값을 저장하는 변수 AVE에 SUM / COUNT의 값을 계산 값을 대입한다.</p>\n</li>\n</ul>\n<h2 id=\"41-배열-데이터의-최대-값을-구하려면-최대-값을-저장할-변수를-준비한다\" style=\"position:relative;\"><a href=\"#41-%EB%B0%B0%EC%97%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%B5%9C%EB%8C%80-%EA%B0%92%EC%9D%84-%EA%B5%AC%ED%95%98%EB%A0%A4%EB%A9%B4-%EC%B5%9C%EB%8C%80-%EA%B0%92%EC%9D%84-%EC%A0%80%EC%9E%A5%ED%95%A0-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%A4%80%EB%B9%84%ED%95%9C%EB%8B%A4\" aria-label=\"41 배열 데이터의 최대 값을 구하려면 최대 값을 저장할 변수를 준비한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>41. 배열 데이터의 최대 값을 구하려면 최대 값을 저장할 변수를 준비한다</h2>\n<ul>\n<li>\n<p>최대 값을 구하는 예시</p>\n<ul>\n<li>최고 점수 구하기</li>\n<li>일일 입장객의 수 중 최대 입장객 수 구하기</li>\n<li>각 지점의 매출 금액 중 가장 큰 금액 구하기</li>\n</ul>\n</li>\n<li>\n<p>최대 값을 구하려면 최대 값을 저장하는 변수를 준비해야한다(MAX)</p>\n<ul>\n<li>MAX의 초기화 = 대상 데이터의 가장 작은 값보다 작은 값으로 초기화</li>\n</ul>\n<p><strong>1단계</strong>: 최대 값을 저장하는 변수 MAX를 대상 데이터들의 최소 값보다 작은 값으로 초기화 시킨다.</p>\n<p><strong>2단계</strong>: 첨자를 저장하는 변수 I를 0으로 초기화시킨다.</p>\n<p><strong>3단계</strong>: I가 N미만이라면 4~5단계를 반복한다ㅏ.</p>\n<p><strong>4단계</strong>: JUM[I] > MAX라면, MAX에 JUM[I]를 대입한다.</p>\n<p><strong>5단계</strong>: I를 1 증가시킨다.</p>\n</li>\n</ul>\n<p><br/><br/></p>","excerpt":"제 4장: 기본적인 알고리즘(3) 40. 배열 데이터의 평균 값은 반복 처리를 통해 합계와 개수를 구한 후 계산한다 배열의 끝에 저장된 보초 값으로 배열 데이터 개수를 관리하는 배열의 평균값 계산 배열의 합계와 배열의 개수를 구한 뒤 평균 계산 예시: 어떤 학급의 기말점수 (0~100)가 저장된 배열 JUM(배열 끝 보초값 —1)의 평균값은? 평균 = 총점 / 학급 인원 수 학급 인원 수 = COUNT (유효한 요소의 개수를 세는 변수) 총점 = SUM (배열 요소의 합계 값을 저장하는 변수) 1단계: 변수 COUNT와 합계를 저장하는 변수 SUM을 0으로 초기화한다. 2단계: 배열 JUM의 첨자를 저장하는 변수 I를 0으로 초기화한다. 3단계: JUM[I]이 보초 값(-1)을 가리키지 않는 동안, 다음의 4~5 단계를 반복한다. 4단계: Count에 1을 더하고 SUM에 SUM + JUM[I]를 저장한다. 5단계: I에 1을 더한다. 6단계: 평균 값을 저장하는 변수 AVE에 S…","frontmatter":{"date":"July 15, 2022","title":"그림으로 배우는 알고리즘 제 3장 - 기본적인 알고리즘(3)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220715-algorithm-book-with-pic/"}},"next":{"id":"52a0186f-bc0a-5201-a5ac-13aaf7ef75bc","html":"<h1 id=\"제-4장-기본적인-알고리즘2\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-4%EC%9E%A5-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%982\" aria-label=\"제 4장 기본적인 알고리즘2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 4장: 기본적인 알고리즘(2)</h1>\n<h2 id=\"38-배열-데이터의-합을-계산하려면-더한-값을-저장할-변수를-준비한다\" style=\"position:relative;\"><a href=\"#38-%EB%B0%B0%EC%97%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%ED%95%A9%EC%9D%84-%EA%B3%84%EC%82%B0%ED%95%98%EB%A0%A4%EB%A9%B4-%EB%8D%94%ED%95%9C-%EA%B0%92%EC%9D%84-%EC%A0%80%EC%9E%A5%ED%95%A0-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%A4%80%EB%B9%84%ED%95%9C%EB%8B%A4\" aria-label=\"38 배열 데이터의 합을 계산하려면 더한 값을 저장할 변수를 준비한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>38. 배열 데이터의 합을 계산하려면 더한 값을 저장할 변수를 준비한다</h2>\n<ul>\n<li>\n<p>여러 데이터의 합을 구하는 처리 ⇒ 배열 합계 알고리즘</p>\n<ul>\n<li>예시\n<ul>\n<li>시험점수의 총 합 계산</li>\n<li>일일 입장객의 수를 통해 해당 월 전체 입장객 수 구하기</li>\n<li>각 지점의 매출액을 합해 전 지점 매출액 구하기</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>데이터 N개의 합을 구하는 계산식</p>\n<ul>\n<li>DATA[0] + DATA[1] + … + DATA[N-1]</li>\n</ul>\n</li>\n<li>\n<p>다음과 같은 반복처리를 통해 구할 수 있다.</p>\n<p><strong>1단계</strong>: 합계를 저장하는 변수 SUM 을 0으로 초기화</p>\n<p><strong>2단계</strong>: 합계에 더하는 배열 요소를 가리키는 첨자를 저장하는 변수 I를 0으로 초기화</p>\n<p><strong>3단계</strong>: I가 N 미만이라면 다음 4~5단계를 반복한다</p>\n<p><strong>4단계</strong>: SUM + DATA[I]를 계산하여 그 값을 SUM에 대입한다</p>\n<p><strong>5단계</strong>: I의 값에 1을 더한다</p>\n</li>\n</ul>\n<h2 id=\"39-배열-안-요소의-개수를-구하려면-카운터를-준비한다\" style=\"position:relative;\"><a href=\"#39-%EB%B0%B0%EC%97%B4-%EC%95%88-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%88%98%EB%A5%BC-%EA%B5%AC%ED%95%98%EB%A0%A4%EB%A9%B4-%EC%B9%B4%EC%9A%B4%ED%84%B0%EB%A5%BC-%EC%A4%80%EB%B9%84%ED%95%9C%EB%8B%A4\" aria-label=\"39 배열 안 요소의 개수를 구하려면 카운터를 준비한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>39. 배열 안 요소의 개수를 구하려면 카운터를 준비한다</h2>\n<ul>\n<li>\n<p>배열 데이터의 요소 개수</p>\n<ol>\n<li>미리 고정 값으로 정함</li>\n<li>다른 변수로 관리</li>\n<li>배열 마지막 요소의 끝에 보초 값 저장</li>\n</ol>\n</li>\n<li>\n<p>보초 값으로 배열 마지막 요소를 관리하는 배열에서 요소의 개수를 구하는 알고리즘</p>\n<ul>\n<li>예시: 어떤 시험에 응시한 모든 학생의 점수가 저장된 배열 JUM\n<ul>\n<li>배열 JUM의 끝에 ‘-1’을 저장해 응시자 수를 관리(예: 응시자 수가 5명일 경우 JUM[5]에 -1이 저장</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>요소의 개수를 세는 변수 COUNT를 이용해 다음과 같이 반복처리한다.</p>\n<p><strong>1단계</strong>: 요소의 개수를 센다(카운터). 변수 COUNT를 0으로 초기화 한다.</p>\n<p><strong>2단계</strong>: 요소의 값을 가리키기 위한 첨자를 저장하는 변수 I를 0으로 초기화 한다.</p>\n<p><strong>3단계</strong>: JUM[I]가 보초값(-1)을 가리키지 않는 동안 당므의 4~5단계를 반복한다.</p>\n<p><strong>4단계</strong>: COUNT 값에 1을 더한다.</p>\n<p><strong>5단계</strong>: I 값에 1을 더한다.</p>\n</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 14, 2022","title":"그림으로 배우는 알고리즘 제 3장 - 기본적인 알고리즘(2)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220714-algorithm-book-with-pic/"}},"prev":{"id":"4e6447ea-f6b8-57f4-a411-c0fdb52f9d47","html":"<h1 id=\"그림으로-배우는-알고리즘-제-3장-자료구조-4\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%9C-3%EC%9E%A5-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-4\" aria-label=\"그림으로 배우는 알고리즘 제 3장 자료구조 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그림으로 배우는 알고리즘 제 3장: 자료구조 (4)</h1>\n<h2 id=\"29-n번째-요소의-참조가-빠른-것은-배열-느린-것은-리스트-구조\" style=\"position:relative;\"><a href=\"#29-n%EB%B2%88%EC%A7%B8-%EC%9A%94%EC%86%8C%EC%9D%98-%EC%B0%B8%EC%A1%B0%EA%B0%80-%EB%B9%A0%EB%A5%B8-%EA%B2%83%EC%9D%80-%EB%B0%B0%EC%97%B4-%EB%8A%90%EB%A6%B0-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"29 n번째 요소의 참조가 빠른 것은 배열 느린 것은 리스트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>29. N번째 요소의 참조가 빠른 것은 배열, 느린 것은 리스트 구조</h2>\n<ul>\n<li>N번째 요소 조회</li>\n<li>예: 나열된 데이터에서 5번째 요소를 조회\n<ul>\n<li>배열\n<ul>\n<li>요소 번호를 사용해 바로 찾아낼 수 있다. ARRAY[5]</li>\n<li>어떠한 요소를 조회하더라도 모든 시간적 비용은 동일하다.</li>\n</ul>\n</li>\n<li>리스트: 1번째 데이터부터 차례대로 끄능ㄹ 따라가야한다.\n<ul>\n<li>1번째 요소를 조회한다.</li>\n<li>1번째 요소의 끈을 따라 2번째 요소를 조회한다.</li>\n<li>2번째 요소의 끈을 따라 3번째 요소를 조회한다.</li>\n<li>3번째 요소의 끈을 따라 4번째 요소를 조회한다.</li>\n<li>4번째 요소의 끈을 따라 5번째 요소를 조회한다.</li>\n</ul>\n⇒ 요소의 수가 많을 수록 느려진다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"30-데이터의-삽입삭제가-빠른-것은-리스트-느린-것은-배열\" style=\"position:relative;\"><a href=\"#30-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C%EA%B0%80-%EB%B9%A0%EB%A5%B8-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%8A%90%EB%A6%B0-%EA%B2%83%EC%9D%80-%EB%B0%B0%EC%97%B4\" aria-label=\"30 데이터의 삽입삭제가 빠른 것은 리스트 느린 것은 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>30. 데이터의 삽입/삭제가 빠른 것은 리스트, 느린 것은 배열</h2>\n<ol>\n<li>데이터 삽입\n<ul>\n<li>새로운 데이터를 순서대로 나열된 데이터 열의 특정 위치에 삽입\n<ul>\n<li>배열: 삽입 위치 다음에 존재하는 모든 데이터를 뒤로 이동시켜야 한다(예: 삽입 데이터 뒤에 1,000개 데이터 존재 시 데이터 이동 작업 1,000번 반복).</li>\n<li>리스트: 삽입 데이터의 앞뒤 데이터를 연결하고 있는 끈을 잘라 새로운 데이터에 연결하기만 하면 된다(1번 작업)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>데이터 삭제\n<ul>\n<li>배열: 삭제 데이터 뒤에 있는 모든 데이터를 앞으로 옮겨야한다.</li>\n<li>리스트: 제거하고자 하는 데이터의 끈을 자른 후 앞 뒤 데이터를 이어 붙이기만 하면 된다.</li>\n</ul>\n</li>\n</ol>\n<p><br/><br/></p>","frontmatter":{"date":"July 16, 2022","title":"그림으로 배우는 알고리즘 제 3장 - 기본적인 알고리즘(4)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220716-algorithm-book-with-pic/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220715-algorithm-book-with-pic/","nextSlug":"/220714-algorithm-book-with-pic/","prevSlug":"/220716-algorithm-book-with-pic/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}