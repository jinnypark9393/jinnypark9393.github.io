{"componentChunkName":"component---src-templates-blog-template-js","path":"/221211-progrmming-javascript-nodejs-\bpkg-build/","result":{"data":{"cur":{"id":"d6563d21-0205-5baf-a3b2-4c1369450301","html":"<h1 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h1>\n<p>회사 과제 진행하느라 급히(?) Node.js + express를 배워서 웹 앱을 작성하는 중인데, Node.js를 처음 다루다보니 빌드 &#x26; 배포 방법을 처음으로 알게되어 기록용으로 남겨둔다.</p>\n<br/>\n<h1 id=\"2-pkg-모듈-다운로드--packagejson-설정\" style=\"position:relative;\"><a href=\"#2-pkg-%EB%AA%A8%EB%93%88-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C--packagejson-%EC%84%A4%EC%A0%95\" aria-label=\"2 pkg 모듈 다운로드  packagejson 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. pkg 모듈 다운로드 &#x26; package.json 설정</h1>\n<p>이전 회사에서 진행했던 Java 프로젝트의 경우에는 빌드 도구로 Ant와 Maven으로 빌드를 했었는데(그런데 요즘에는 Gradle &#x26; Maven을 많이 쓰고 Ant는 거의 쓰지 않는다고 한다. 어쩐지 처음 프로젝트 시작할 때 Ant 빌드 방법을 아무리 구글링 해도 옛날 자료밖에 안나오더라….눈물), node프로젝트는 pkg 모듈로 빌드 &#x26; 실행파일 생성을 진행할 수 있다고 한다.</p>\n<br/>\n<p>먼저 pkg 모듈을 사용하기 위해 npm으로 pkg 모듈을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev pkg</code></pre></div>\n<p>pkg는 빌드용 모듈이기 때문에 <code class=\"language-text\">--save-dev</code> 옵션을 주어 <code class=\"language-text\">devDependencies</code> 로 추가한다.</p>\n<br/>\n<p>설치가 완료되면 package.json 파일에 아래와 같이 pkg모듈이 <code class=\"language-text\">devDependencies</code> 에 추가된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  <span class=\"token string\">\"devDependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"pkg\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^5.8.0\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>다음으로는 어떤 파일을 실행파일에 추가할지, 타겟 플랫폼은 무엇인지 package.json에 설정 해주어야 한다.</p>\n<br/>\n<p>package.json 파일의 scripts에 build 명령어를 정의해준다. scripts에 명령어를 정의해주면 <code class=\"language-text\">npm run [정의한 명령어]</code> 로 명령어를 실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"init\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"rm ./bin/*\"</span>,\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodemon ./bin/www\"</span>,\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>,\n    <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"npm run init &amp;&amp; pkg . --out-path bin\"</span>\n  <span class=\"token punctuation\">}</span>,</code></pre></div>\n<p>빌드를 진행하려면 기본적으로 <code class=\"language-text\">pkg .</code> 명령어만 입력하면 빌드가 진행된다. 하지만 나는 <code class=\"language-text\">--out-path</code> 로 빌드 결과물이 저장될 디렉토리를 지정하고, <code class=\"language-text\">\"init\"</code> 명령어를 추가해 <code class=\"language-text\">pkg .</code> 명령어를 통해 빌드 수행을 하기 전 이전 빌드로 생성된 결과물을 삭제(<code class=\"language-text\">rm ./bin/*</code>)해서 빌드 폴더를 초기화해주는 작업을 추가로 지정하였다.</p>\n<br/>\n<p>다음은 package.json 파일에 pkg를 추가해 pkg 명령어를 실행할 때 전달할 옵션값들을 정의해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"pkg\"</span>:<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"./server.js\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"assets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"views/**/*\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"targets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node18-linux-x64\"</span>,\n      <span class=\"token string\">\"node18-macos-x64\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>,</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\"scripts\"</code> (위에서 정의했던 scripts와는 다름): 바이너리로 컴파일할 js파일들의 경로를 지정해준다. 내가 만든 프로젝트는 매우 간단하게 작성한 express 프로젝트였기 때문에 root경로에 있는 server.js 파일만 지정해주었다.</li>\n<li><code class=\"language-text\">\"assets\"</code> : ejs 등 컴파일은 불필요하지만 실행파일에 포함되어야하는 파일들을 정의해준다. 나는 ejs 파일들이 저장되어있는 views 디렉터리를 지정해주었다.</li>\n<li><code class=\"language-text\">\"targets\"</code> : 타겟 플랫폼을 지정하는 옵션이다. 아무것도 지정하지 않으면 windows, linux, macos 세 개의 실행파일이 저장된다. 나는 AWS 서버 위에 올릴 linux 외에 로컬에서 실행 테스트를 하기 위해 macos로도 실행파일을 생성하도록 지정하였다. 참고로 <code class=\"language-text\">node</code> 뒤에 있는 숫자는 사용할 노드 버전이며, 현재 사용하고 있는 노드 버전을 <code class=\"language-text\">node -v</code> 로 확인하여 지정해주면 된다.</li>\n</ul>\n<br/>\n<p>설정이 완료되면 아래 명령어를 실행해 실행 파일을 만들고, 만들어진 파일을 열어서 실행에 문제가 없는지 확인해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p>이렇게 빌드를 완료하게 되면 Linux에서 다른 의존성 없이도 node.js 프로젝트를 실행할 수 있다.</p>\n<br/>\n<p>이렇게 작성한 전체 package.json 파일은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"anyshopping\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"This is e-commerse website for Anycompany\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"server.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"init\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"rm ./bin/*\"</span>,\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodemon ./server.js\"</span>,\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>,\n    <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"npm run init &amp;&amp; pkg . --out-path bin\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>,\n  <span class=\"token string\">\"bin\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"./server.js\"</span>,\n  <span class=\"token string\">\"pkg\"</span>:<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"./server.js\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"assets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"views/**/*\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"targets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node18-linux-x64\"</span>,\n      <span class=\"token string\">\"node18-macos-x64\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"dotenv\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^16.0.3\"</span>,\n    <span class=\"token string\">\"ejs\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^3.1.8\"</span>,\n    <span class=\"token string\">\"express\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^4.18.2\"</span>,\n    <span class=\"token string\">\"mysql\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^2.18.1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"devDependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"pkg\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^5.8.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>","excerpt":"1. 배경 상황 회사 과제 진행하느라 급히(?) Node.js + express를 배워서 웹 앱을 작성하는 중인데, Node.js를 처음 다루다보니 빌드 & 배포 방법을 처음으로 알게되어 기록용으로 남겨둔다. 2. pkg 모듈 다운로드 & package.json 설정 이전 회사에서 진행했던 Java 프로젝트의 경우에는 빌드 도구로 Ant와 Maven으로 빌드를 했었는데(그런데 요즘에는 Gradle & Maven을 많이 쓰고 Ant는 거의 쓰지 않는다고 한다. 어쩐지 처음 프로젝트 시작할 때 Ant 빌드 방법을 아무리 구글링 해도 옛날 자료밖에 안나오더라….눈물), node프로젝트는 pkg 모듈로 빌드 & 실행파일 생성을 진행할 수 있다고 한다. 먼저 pkg 모듈을 사용하기 위해 npm으로 pkg 모듈을 설치한다. pkg는 빌드용 모듈이기 때문에  옵션을 주어  로 추가한다. 설치가 완료되면 package.json 파일에 아래와 같이 pkg모듈이  에 추가된다. 다음으로는 어떤 파일…","frontmatter":{"date":"December 11, 2022","title":"Node.js 프로젝트 pkg 모듈로 빌드하기","categories":"프로그래밍","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221211-progrmming-javascript-nodejs-\bpkg-build/"}},"next":{"id":"f0ad175d-a842-5af1-9f25-921f41c2d1e1","html":"<h1 id=\"1-mysql-설치\" style=\"position:relative;\"><a href=\"#1-mysql-%EC%84%A4%EC%B9%98\" aria-label=\"1 mysql 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. MySQL 설치</h1>\n<p>MacOS에서 MySQL을 설치하기 위해서는 홈브루(Homebrew)를 사용할 수 있다.</p>\n<br/>\n<p>먼저 홈브루를 최신으로 업데이트 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew update</code></pre></div>\n<br/>\n<p>다음으로는 홈브루를 통해 mysql을 설치해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">brew install mysql</code></pre></div>\n<br/>\n<p><code class=\"language-text\">brew list</code> 명령어를 통해 mysql이 정상적으로 설치 되었는지 확인해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  anyshopping git:(master) ✗ brew list         \n==> Formulae\naws-iam-authenticator   icu4c                   lz4                     protobuf\nca-certificates         libcbor                 mysql                   xz\ngettext                 libevent                openssl@1.1             zlib\ngit                     libfido2                pcre2                   zstd\n\n==> Casks\niterm2</code></pre></div>\n<br/>\n<p>mysql 서버를 아래와 같이 기동해 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  anyshopping git:(master) ✗ mysql.server start    \nStarting MySQL\n.. SUCCESS!</code></pre></div>\n<br/>\n<p><code class=\"language-text\">mysql_secure_installation</code> 으로 상세 설정을 진행해준다.</p>\n<ul>\n<li>VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component?\n<ul>\n<li>비밀번호 설정 규칙 설정할 것인지 여부. 예를 선택할 경우 3단계 중에서 하나를 선택할 수있다.</li>\n</ul>\n</li>\n<li>By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users?\n<ul>\n<li>익명 사용자 허용을 삭제할 것인지? 예를 선택할 경우 <code class=\"language-text\">-u</code> 옵션을 통해 유저를 지정해야한다.</li>\n</ul>\n</li>\n<li>Normally, root should only be allowed to connect from ‘localhost’. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely?\n<ul>\n<li>원격지에서 root 사용자 로그인금지(localhost만 허용). 예를 선택할 경우 localhost에서의 접속만 허용하게 된다.</li>\n</ul>\n</li>\n<li>By default, MySQL comes with a database named ‘test’ that anyone can access. This is also intended only for testing, and should be removed before moving into a production</li>\n</ul>\n<p>environment. Remove test database and access to it?\n- 자동으로 생성되는 테스트용 데이터베이스를 삭제할지 여부 선택. 예를 선택할 경우 테스트용 데이터베이스가 삭제된 상태로 설정된다.</p>\n<br/>\n<p>생성한 MySQL 서버에 접속해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  anyshopping git:(master) ✗ mysql -p                 \nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.0.31 Homebrew\n\nCopyright (c) 2000, 2022, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.</code></pre></div>\n<ul>\n<li>참고: MySQL CLI에서 빠져나오려면 <code class=\"language-text\">exit</code> 을 입력하면 된다.</li>\n</ul>\n<br/>\n<h1 id=\"2-mysql-workbench-설치\" style=\"position:relative;\"><a href=\"#2-mysql-workbench-%EC%84%A4%EC%B9%98\" aria-label=\"2 mysql workbench 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. MySQL Workbench 설치</h1>\n<p>구글에서 MySQL workbench 다운로드로 검색하거나 <a href=\"https://dev.mysql.com/downloads/workbench/\">이 URL</a>을 통해 접속한 뒤, 해당하는 OS를 선택하고, 다운로드 버튼을 클릭한다.</p>\n<br/>\n<p>다음 화면에서는 로그인 하라는 메시지가 뜨는데, 무시하고 스크롤 다운해서 <code class=\"language-text\">No thanks, just start my download.</code> 라는 문구를 클릭해주면 다운로드를 받을 수 있다.</p>\n<br/>\n<p>MacOS의 경우 일반적인 애플리케이션을 설치하듯, 다운로드 받은 dmg파일 오픈하여 Application폴더에 넣어주면 설치가 완료된다.</p>\n<br/>\n<p>MySQL Workbench 앱을 더블 클릭해 오픈하게 되면, 현재 기동중인 MySQL 서비스로 접속할 수 있다(메인 화면에 보이지 않는 경우에는 MySQL이 현재 구동중인지 확인).</p>\n<br/>\n<p>첫 접속 뒤 팝업으로 뜨는 Database creation창에서 database를 생성해도 되고, 추후에 Schema 탭으로 이동한 뒤, Create schema로 새로운 schema를, Create table로 table을 생성할 수 있다.</p>\n<br/>\n<h1 id=\"3-mysql-종료\" style=\"position:relative;\"><a href=\"#3-mysql-%EC%A2%85%EB%A3%8C\" aria-label=\"3 mysql 종료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. MySQL 종료</h1>\n<p>설치 및 구동 확인이 끝나면 서버를 종료한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">➜  anyshopping git<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ mysql<span class=\"token punctuation\">.</span>server stop \nShutting down MySQL\n<span class=\"token punctuation\">.</span> <span class=\"token constant\">SUCCESS</span><span class=\"token operator\">!</span></code></pre></div>\n<br/>","frontmatter":{"date":"December 09, 2022","title":"MacOS에서 MySQL Workbench 설치 및 데이터베이스 생성하기","categories":"데이터베이스","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221209-database-macos-mysql-install/"}},"prev":{"id":"a724a556-6b02-5c8b-ba85-4543b0520906","html":"<p>MacOS에서는 기본적으로 ⌘ + ⇧ + 4 등의 단축키를 이용해 캡처를 할 수 있지만, 스크롤이 있는 페이지의 경우에는 전체 스크롤을 캡처하기가 어렵다.</p>\n<br/>\n<p>하지만 캡처 대상이 Chrome 브라우저일 경우에는 Chrome 브라우저에서 제공하는 스크린 샷 기능을 활용해 웹사이트의 전체 스크롤 혹은 특정 컴포넌트를 캡처할 수 있다.</p>\n<ol>\n<li>해당하는 웹페이지로 이동 후 F12키를 누르거나,  해당 웹페이지 빈 곳 우클릭 후 검사(Inspect) 클릭( ⌥+⌘+I)</li>\n<li>개발자 도구가 열리면 Console 탭으로 이동한 뒤, ⌘ + ⇧ + P 단축키를 눌러 명령 메뉴를 연다. 명령 메뉴에 screenshot을 검색해서 <code class=\"language-text\">Capture full size screenshot</code>을 클릭하면 PNG파일로 저장된다.</li>\n</ol>\n<br/>\n<p>웹페이지의 특정 컴포넌트만 캡처하고 싶은 경우,</p>\n<ol>\n<li>해당하는 웹페이지로 이동 후 F12키를 누르거나,  해당 웹페이지 빈 곳 우클릭 후 검사(Inspect) 클릭( ⌥+⌘+I)</li>\n<li>Element 탭에서 캡처를 원하는 태그를 우클릭 후 <code class=\"language-text\">Capture node screenshot</code> 을 클릭하면 PNG파일로 저장된다.</li>\n</ol>\n<br/>","frontmatter":{"date":"December 12, 2022","title":"Chrome 브라우저 창 전체 스크롤/특정 컴포넌트만 스크린샷하기(크롬 개발자도구 활용)","categories":"ETC","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221212-etc-chrome-screenshot/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/221211-progrmming-javascript-nodejs-\bpkg-build/","nextSlug":"/221209-database-macos-mysql-install/","prevSlug":"/221212-etc-chrome-screenshot/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}