{"componentChunkName":"component---src-templates-blog-template-js","path":"/220625-algorithm-book-with-pic/","result":{"data":{"cur":{"id":"45e4fc96-9b0c-5512-b2e6-43ac19cb257f","html":"<h1 id=\"algorithm그림으로-배우는-알고리즘-제-3장-자료구조-4\" style=\"position:relative;\"><a href=\"#algorithm%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%9C-3%EC%9E%A5-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-4\" aria-label=\"algorithm그림으로 배우는 알고리즘 제 3장 자료구조 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Algorithm]그림으로 배우는 알고리즘 제 3장: 자료구조 (4)</h1>\n<h1 id=\"그림으로-배우는-알고리즘-제-3장-자료구조-4\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%9C-3%EC%9E%A5-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-4\" aria-label=\"그림으로 배우는 알고리즘 제 3장 자료구조 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그림으로 배우는 알고리즘 제 3장: 자료구조 (4)</h1>\n<h2 id=\"29-n번째-요소의-참조가-빠른-것은-배열-느린-것은-리스트-구조\" style=\"position:relative;\"><a href=\"#29-n%EB%B2%88%EC%A7%B8-%EC%9A%94%EC%86%8C%EC%9D%98-%EC%B0%B8%EC%A1%B0%EA%B0%80-%EB%B9%A0%EB%A5%B8-%EA%B2%83%EC%9D%80-%EB%B0%B0%EC%97%B4-%EB%8A%90%EB%A6%B0-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"29 n번째 요소의 참조가 빠른 것은 배열 느린 것은 리스트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>29. N번째 요소의 참조가 빠른 것은 배열, 느린 것은 리스트 구조</h2>\n<ul>\n<li>N번째 요소 조회</li>\n<li>예: 나열된 데이터에서 5번째 요소를 조회\n<ul>\n<li>배열\n<ul>\n<li>요소 번호를 사용해 바로 찾아낼 수 있다. ARRAY[5]</li>\n<li>어떠한 요소를 조회하더라도 모든 시간적 비용은 동일하다.</li>\n</ul>\n</li>\n<li>리스트: 1번째 데이터부터 차례대로 끄능ㄹ 따라가야한다.\n<ul>\n<li>1번째 요소를 조회한다.</li>\n<li>1번째 요소의 끈을 따라 2번째 요소를 조회한다.</li>\n<li>2번째 요소의 끈을 따라 3번째 요소를 조회한다.</li>\n<li>3번째 요소의 끈을 따라 4번째 요소를 조회한다.</li>\n<li>4번째 요소의 끈을 따라 5번째 요소를 조회한다.</li>\n</ul>\n⇒ 요소의 수가 많을 수록 느려진다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"30-데이터의-삽입삭제가-빠른-것은-리스트-느린-것은-배열\" style=\"position:relative;\"><a href=\"#30-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C%EA%B0%80-%EB%B9%A0%EB%A5%B8-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%8A%90%EB%A6%B0-%EA%B2%83%EC%9D%80-%EB%B0%B0%EC%97%B4\" aria-label=\"30 데이터의 삽입삭제가 빠른 것은 리스트 느린 것은 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>30. 데이터의 삽입/삭제가 빠른 것은 리스트, 느린 것은 배열</h2>\n<ol>\n<li>데이터 삽입\n<ul>\n<li>새로운 데이터를 순서대로 나열된 데이터 열의 특정 위치에 삽입\n<ul>\n<li>배열: 삽입 위치 다음에 존재하는 모든 데이터를 뒤로 이동시켜야 한다(예: 삽입 데이터 뒤에 1,000개 데이터 존재 시 데이터 이동 작업 1,000번 반복).</li>\n<li>리스트: 삽입 데이터의 앞뒤 데이터를 연결하고 있는 끈을 잘라 새로운 데이터에 연결하기만 하면 된다(1번 작업)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>데이터 삭제\n<ul>\n<li>배열: 삭제 데이터 뒤에 있는 모든 데이터를 앞으로 옮겨야한다.</li>\n<li>리스트: 제거하고자 하는 데이터의 끈을 자른 후 앞 뒤 데이터를 이어 붙이기만 하면 된다.</li>\n</ul>\n</li>\n</ol>\n<p><br/><br/></p>","excerpt":"[Algorithm]그림으로 배우는 알고리즘 제 3장: 자료구조 (4) 그림으로 배우는 알고리즘 제 3장: 자료구조 (4) 29. N번째 요소의 참조가 빠른 것은 배열, 느린 것은 리스트 구조 N번째 요소 조회 예: 나열된 데이터에서 5번째 요소를 조회 배열 요소 번호를 사용해 바로 찾아낼 수 있다. ARRAY[5] 어떠한 요소를 조회하더라도 모든 시간적 비용은 동일하다. 리스트: 1번째 데이터부터 차례대로 끄능ㄹ 따라가야한다. 1번째 요소를 조회한다. 1번째 요소의 끈을 따라 2번째 요소를 조회한다. 2번째 요소의 끈을 따라 3번째 요소를 조회한다. 3번째 요소의 끈을 따라 4번째 요소를 조회한다. 4번째 요소의 끈을 따라 5번째 요소를 조회한다. ⇒ 요소의 수가 많을 수록 느려진다. 30. 데이터의 삽입/삭제가 빠른 것은 리스트, 느린 것은 배열 데이터 삽입 새로운 데이터를 순서대로 나열된 데이터 열의 특정 위치에 삽입 배열: 삽입 위치 다음에 존재하는 모든 데이터를 뒤로 이동…","frontmatter":{"date":"June 25, 2022","title":"그림으로 배우는 알고리즘 제3장 - 자료구조(4)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220625-algorithm-book-with-pic/"}},"next":{"id":"97a2e4f4-178c-5ff6-b40f-12f318ccec16","html":"<h1 id=\"1-aws의-well-architected-framework란\" style=\"position:relative;\"><a href=\"#1-aws%EC%9D%98-well-architected-framework%EB%9E%80\" aria-label=\"1 aws의 well architected framework란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS의 Well-Architected Framework란?</h1>\n<p>AWS서비스를 사용해 구성한 아키텍처들을 평가하는 프레임워크로, AWS에서 시스템 구축을 진행하며 쌓아온 노하우를 살려 AWS의 고객 혹은 파트너사에서 아키텍처를 평가할 수 있는 모범 사례(Best Practice), 그리고 아키텍처가 모범사례에 얼마나 잘 맞는지 평가할 수 있도록 만들었다. 이 Well-Architected Framework를 이용하면 시스템을 구축하면서 내리게 되는 결정의 단점을 이해할 수 있다. 참고로 AWS에서 주관하는 시험 문제들도 이 Well-Architected Framework에 따라 답이 결정되므로 자격증 시험을 준비하는 사람들도 꼭 알아야 한다.</p>\n<p>Well-architected에서 평가되는 항목은 운영 우수성, 보안, 안정성, 성능 효율성, 비용 최적화로 총 5가지의 기둥(Pillar)로 구성되며, 최신 Well-Architected Framework 자료를 보려면 <a href=\"https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&#x26;wa-lens-whitepapers.sort-order=desc\">이 링크</a>를 참조하자.</p>\n<h2 id=\"1-운영-우수성\" style=\"position:relative;\"><a href=\"#1-%EC%9A%B4%EC%98%81-%EC%9A%B0%EC%88%98%EC%84%B1\" aria-label=\"1 운영 우수성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 운영 우수성</h2>\n<ul>\n<li><strong><a href=\"https://docs.aws.amazon.com/ko_kr/wellarchitected/latest/framework/operational-excellence.html\">운영 우수성이란?</a></strong> 운영 우수성 원칙은 효과적인 개발 및 워크로드 실행을 지원하고, 작업에 대한 인사이트를 얻고, 지원 프로세스 및 절차를 지속적으로 개선하여 비즈니스 가치를 제공할 수 있는 능력을 포함한다.</li>\n</ul>\n<h3 id=\"운영-우수성의-예시\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81-%EC%9A%B0%EC%88%98%EC%84%B1%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"운영 우수성의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영 우수성의 예시</h3>\n<ul>\n<li>각 구성요소가 수요에 따라 효과적으로 확장</li>\n<li>Blueprint Architecture를 기반으로, 여러 환경을 쉽게 관리 및 복제할 수 있어야 한다.</li>\n</ul>\n<h2 id=\"2-보안\" style=\"position:relative;\"><a href=\"#2-%EB%B3%B4%EC%95%88\" aria-label=\"2 보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 보안</h2>\n<ul>\n<li><strong><a href=\"https://docs.aws.amazon.com/ko_kr/wellarchitected/latest/security-pillar\">보안이란?</a></strong> 보안 원칙에는 클라우드 기술을 활용하여 보안을 강화하고 데이터, 시스템 및 자산을 보호하는 능력이 포함된다.</li>\n</ul>\n<h3 id=\"보안-예시\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88-%EC%98%88%EC%8B%9C\" aria-label=\"보안 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안 예시</h3>\n<ul>\n<li>모든 서비스 레이어에 대한 보안 조치</li>\n</ul>\n<h2 id=\"3-안정성\" style=\"position:relative;\"><a href=\"#3-%EC%95%88%EC%A0%95%EC%84%B1\" aria-label=\"3 안정성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 안정성</h2>\n<ul>\n<li><strong><a href=\"https://docs.aws.amazon.com/ko_kr/wellarchitected/latest/reliability-pillar/welcome.html\">안정성이란?</a></strong> 워크로드의 기능이 필요한 때에 기능을 정확하고 일관되게 수행. 워크로드를 운영 및 테스트할 수 있는 기능이 포함.</li>\n</ul>\n<h3 id=\"안정성의-예시\" style=\"position:relative;\"><a href=\"#%EC%95%88%EC%A0%95%EC%84%B1%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"안정성의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>안정성의 예시</h3>\n<ul>\n<li>고가용성(High Availability)</li>\n<li>재해 복구(Disaster Recovery)</li>\n<li>자가 복구(Auto Healing)</li>\n<li>스토리지 보관 전략(Archive)</li>\n</ul>\n<h2 id=\"4-성능-효율성\" style=\"position:relative;\"><a href=\"#4-%EC%84%B1%EB%8A%A5-%ED%9A%A8%EC%9C%A8%EC%84%B1\" aria-label=\"4 성능 효율성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 성능 효율성</h2>\n<ul>\n<li><strong><a href=\"https://docs.aws.amazon.com/ko_kr/wellarchitected/latest/performance-efficiency-pillar/welcome.html\">성능 효율성이란?</a></strong> 컴퓨팅 리소스를 효율적으로 사용하여 요구 사항을 충족하고 수요 변경 및 기술 변화에 따라 이러한 효율성을 유지</li>\n</ul>\n<h3 id=\"성능-효율성-예시\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EC%98%88%EC%8B%9C\" aria-label=\"성능 효율성 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 효율성 예시</h3>\n<ul>\n<li>고성능 및 높은 처리량의 데이터베이스 구성.</li>\n<li>글로벌 사용자에게도 낮은 지연시간으로 서비스</li>\n</ul>\n<h2 id=\"5-비용-최적화\" style=\"position:relative;\"><a href=\"#5-%EB%B9%84%EC%9A%A9-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"5 비용 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 비용 최적화</h2>\n<ul>\n<li><strong><a href=\"https://docs.aws.amazon.com/ko_kr/wellarchitected/latest/cost-optimization-pillar/welcome.html\">비용 최적화란?</a></strong> 워크로드의 수명 주기에 걸쳐 시스템을 개선하고 구체화하는 지속적인 프로세스. 비용을 최소화하고 조직의 투자 수익률을 극대화하는 동시에 비즈니스 성과를 달성.</li>\n</ul>\n<h3 id=\"비용-최적화-예시\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%9A%A9-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%98%88%EC%8B%9C\" aria-label=\"비용 최적화 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비용 최적화 예시</h3>\n<ul>\n<li>모든 구성요소에서 비용 효율성 추구</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 24, 2022","title":"AWS의 Well-Architected Framework란?","categories":"클라우드","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220624-cloud-aws-well-architected-framework/"}},"prev":{"id":"62c4e749-abaa-55ac-a38b-481545d7c3e9","html":"<h1 id=\"1-aws-codecommit\" style=\"position:relative;\"><a href=\"#1-aws-codecommit\" aria-label=\"1 aws codecommit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS CodeCommit</h1>\n<ul>\n<li>GIt 기반의 repository를 클라우드 기반으로  제공하는 서비스</li>\n<li>애플리케이션을 개발하면서 관리할 소스코드를 안전하게 저장, 제어할 수 있는 기능을 제공</li>\n<li>완전 관리형 서비스로 사용자가 자체 소스코드 제어 시스템을 운영하거나 인프라 규모 조정을 걱정할 필요 없이 코드부터 바이너리까지 모든 사항을 저장</li>\n<li>비용은 최초 5명의 활성 사용자의 경우 프리티어, 이상일 경우 사용자당 과금\n<ul>\n<li>최초 5명의 활성사용자\n<ul>\n<li>비용: 0.00 USD</li>\n<li>계정당 리포지토리 1,000개, 요청 시 최대 25,000개</li>\n<li>매달 50GB의 스토리지</li>\n<li>매달 10,000건의 Git 요청</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>최초 5명 이후 추가되는 활성 사\n<ul>\n<li>계정당 리포지토리 1,000개, 요청 시 최대 25,000개</li>\n<li>활성 사용자당 50GB의 스토리지</li>\n<li>활성 사용자당 10,000건의 Git 요청</li>\n<li>CodeCommit에 해당하는 외부 툴로는 Github, Gitlab 등이 존재</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-aws-codebuild\" style=\"position:relative;\"><a href=\"#2-aws-codebuild\" aria-label=\"2 aws codebuild permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. AWS CodeBuild</h1>\n<ul>\n<li>애플리케이션 개발에 필요한 소스코드를 컴파일 및 테스트 후 배포하기 전 단계까지 제공하는 서비스</li>\n<li>자체 빌드서버가 필요하지 않기 때문에 서버를 직접 설정, 패치 및 업데이트를 적용하고 관리할 필요가 없다(완전 관리형 서비스)\n<ul>\n<li>Jenkins의 경우 별도 서버세팅이 필요</li>\n</ul>\n</li>\n<li>비용은 분 단위로 계산되며, 빌드 제출 시간부터 빌드 종료시까지가 비용 계산에 포함. 끝자리는 반올림 처리.\n<ul>\n<li>컴퓨팅 인스턴스(arm1.small, general1.small, general1.medium) 및 지역에 따라 비용 상이.</li>\n<li>프리티어: 매월 100분(빌드 시간 기준) build.general1.small 티어.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-aws-codedeploy\" style=\"position:relative;\"><a href=\"#3-aws-codedeploy\" aria-label=\"3 aws codedeploy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. AWS CodeDeploy</h1>\n<ul>\n<li>AWS EC2, ECS 등 컴퓨팅 시스템에 대한 애플리케이션 배포를 자동화하는 완전 관리형 서비스.</li>\n<li>지속적인 배포를 지원하는 대표적 CD(Continuous Deployment/Continuous Delivery)도구</li>\n<li>기존 운영 중인 애플리케이션의 영향을 최소화하며 신속하게 배포할 수 있는 기능을 제공</li>\n<li>비용은 EC2 인스턴스에 코드를 배포하는 경우 무료, 온프레미스에 배포하는 경우에만 1개 서버 당 0.02USD 발생</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"4-aws-codepipeline\" style=\"position:relative;\"><a href=\"#4-aws-codepipeline\" aria-label=\"4 aws codepipeline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. AWS CodePipeline</h1>\n<ul>\n<li>애플리케이션의 변경 내용을 지속적으로 릴리스 하는 데에 필요한 단계를 자동화\n<ul>\n<li>고객으로부터 새로운 개발에 대한 요청이나 버그 수정 요청을 받는다.</li>\n<li>개발자는 요청사항을 반영해 소스 리포지토리에 변경사항 업데이트 ⇒ CodePipeline이 자동으로 변경내용 감지</li>\n<li>변경 내용을 빌드. 테스트를 구성한 경우에는 테스트 실행</li>\n<li>빌드된 코드를 스테이징 서버로 배포. CodePipeline은 스테이징 서버에서 통합 또는 부하 테스트 등의 추가 테스트 진행</li>\n<li>파이프라인에 추가한 수동 승인 작업 승인 후 CodePipeline이 테스트 및 승인 된 코드를 운영(production) 인스턴스에 배포</li>\n</ul>\n</li>\n<li>비용은 활성 파이프라인 당 월별 1 USD 청구(매월 1개의 활성파이프라인 프리티어 제공)\n<ul>\n<li><strong>활성 파이프라인?</strong> 해당 월에 한 번 이상 코드 변경이 수행된 파이프라인</li>\n<li>타 서비스에서 작업을 트리거 하는 경우 추가 요금이 발생할 수 있음.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"4-참고-자료\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"4 참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참고 자료</h1>\n<ul>\n<li>AWS에서 CI/CD 파이프라인 설정 - <a href=\"http://aws.amazon.com/ko/getting-started/hands-on/set-up-ci-cd-pipeline\">aws.amazon.com/ko/getting-started/hands-on/set-up-ci-cd-pipeline</a></li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 26, 2022","title":"AWS의 CI/CD 툴: AWS CodeCommit, CodeBuild, CodeDeploy, CodePipeline","categories":"클라우드","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220626-cloud-aws-cicd-tools/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220625-algorithm-book-with-pic/","nextSlug":"/220624-cloud-aws-well-architected-framework/","prevSlug":"/220626-cloud-aws-cicd-tools/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}