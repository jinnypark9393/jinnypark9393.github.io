{"componentChunkName":"component---src-templates-blog-template-js","path":"/220723-git-cannot-apply-gitignore/","result":{"data":{"cur":{"id":"ff846ecb-d635-520a-ac5a-6ef3c9284767","html":"<h1 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h1>\n<p>며칠 전 <code class=\"language-text\">.gitignore</code>에 대해 알아보는 <a href=\"https://jinnypark9393.github.io/devops/Git-what-is-gitignore/\">포스팅</a>을 올린 적이 있는데, 관련해서 <code class=\"language-text\">.gitignore</code>를 적용했음에도 불구하고 커밋 내역에 해당 파일이 계속 남아잇는 문제가 발생해 해결 방법을 적어두려 한다.</p>\n<p><br/><br/></p>\n<h1 id=\"2-해결-방법\" style=\"position:relative;\"><a href=\"#2-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"2 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 해결 방법</h1>\n<p><code class=\"language-text\">.gitignore</code>에 파일을 추가했음에도 불구하고 파일이 계속해서 커밋 목록에 남아 있는 것은 <code class=\"language-text\">.gitignore</code>에 파일을 추가하기 전 stage에 올라갔던 파일들이 캐시가 남아있어 커밋 목록에 뜨게 되는 것이라고 한다.</p>\n<br/>\n<p>따라서 해당 파일이 들어 있는 디렉터리로 이동한 후, 아래와 같이 캐시를 삭제해주는 명령어를 입력해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> -r --cached <span class=\"token builtin class-name\">.</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">.</code> ; 현재 디렉터리를 지정</li>\n</ul>\n<br/>\n<p>이렇게 캐시를 지운 뒤, git add와 git commit으로 다시 커밋을 생성해주면 이제 <code class=\"language-text\">.gitignore</code>가 제대로 적용되는 것을 확인할 수 있다.</p>\n<p><br/><br/></p>","excerpt":"1. 배경 상황 며칠 전 에 대해 알아보는 포스팅을 올린 적이 있는데, 관련해서 를 적용했음에도 불구하고 커밋 내역에 해당 파일이 계속 남아잇는 문제가 발생해 해결 방법을 적어두려 한다.  2. 해결 방법 에 파일을 추가했음에도 불구하고 파일이 계속해서 커밋 목록에 남아 있는 것은 에 파일을 추가하기 전 stage에 올라갔던 파일들이 캐시가 남아있어 커밋 목록에 뜨게 되는 것이라고 한다. 따라서 해당 파일이 들어 있는 디렉터리로 이동한 후, 아래와 같이 캐시를 삭제해주는 명령어를 입력해주면 된다.  ; 현재 디렉터리를 지정 이렇게 캐시를 지운 뒤, git add와 git commit으로 다시 커밋을 생성해주면 이제 가 제대로 적용되는 것을 확인할 수 있다.","frontmatter":{"date":"July 23, 2022","title":"Git에서 .gitignore가 적용이 되지 않는 에러 해결 방법","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220723-git-cannot-apply-gitignore/"}},"next":{"id":"a089eff5-0daa-5948-8e22-aeae309fa73f","html":"<p>오늘도 셀프 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 강의 1일 1강 포스팅 챌린지 :)</p>\n<br/>\n<h1 id=\"1-userdata-추가\" style=\"position:relative;\"><a href=\"#1-userdata-%EC%B6%94%EA%B0%80\" aria-label=\"1 userdata 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. UserData 추가</h1>\n<ul>\n<li>Django는 프로젝트 생성시에 user 데이터베이스를 생성하기때문에 User 데이터베이스를 수정하기는 쉽지 않다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User <span class=\"token keyword\">as</span> U <span class=\"token comment\"># UserDetail 클래스에서 사용</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> AbstractUser <span class=\"token comment\"># AbstractUser 클래스에서 사용</span>\n\n<span class=\"token comment\"># Create your models here.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Users</span><span class=\"token punctuation\">(</span>AbstractUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pay_plan <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>PayPlan<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>DO_NOTHING<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDetail</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>OneToOneField<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    pay_plan <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>PayPlan<span class=\"token punctuation\">,</span> on_delet<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>DO_NOTHING<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>AbstractUser: 현재 사용하고 있는 유저를 추상화해서 PayPlan을 넣겠다라는 것.</p>\n</li>\n<li>\n<p>두 가지 방법이 있음</p>\n<ul>\n<li>class Users → 한 테이블에 쌓임</li>\n<li>class UserDetail → 두 테이블에 쌓임</li>\n</ul>\n</li>\n<li>\n<p>AbstrctUser로 유저에 추가정보를 넣게 될 경우 settings.py에서 파일 내용을 아래와 같이 수정해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># Application definition</span>\nAUTH_USER_MODEL <span class=\"token operator\">=</span> <span class=\"token string\">\"shortener.Users\"</span>\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'shortener'</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">INSTALLED_APPS</code> 위에 <code class=\"language-text\">AUTH_USER_MODEL</code> 을 추가해 shortener의 Users 클래스를 사용할 것을 명시해주어야 한다(인증을 위해서 어떤 데이터/테이블을 사용할 것인지를 지정해주는 것).</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>\n<p><br/><br/></p>","frontmatter":{"date":"July 22, 2022","title":"Python 패스트캠퍼스 챌린지 71일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220722-python-day71/"}},"prev":{"id":"6065efab-2d62-5dc8-bd37-551b0b37291c","html":"<p>“<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 강의의 Django 파트를 수강하고 있는데, 생각보다 설명이 생략된 부분이 많아 코드 따라치기만 하게 되는듯해 Django 공식문서의 튜토리얼을 따라해 이해도를 높인 다음 다시 들으려한다.</p>\n<br/>\n<p>이 글은 Django 문서의 <a href=\"https://docs.djangoproject.com/ko/4.0/intro/tutorial01/\">첫 번째 장고 앱 작성하기</a> 튜토리얼을 참고해 실습한 내용을 정리한 것이다.</p>\n<p><br/><br/></p>\n<h1 id=\"1-산출물\" style=\"position:relative;\"><a href=\"#1-%EC%82%B0%EC%B6%9C%EB%AC%BC\" aria-label=\"1 산출물 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 산출물</h1>\n<ul>\n<li>Polls라는 이름의 간단한 설문조사 애플리케이션을 제작\n<ul>\n<li>Public: 사람들이 설문 내용을 보고 직접 투표할 수 있는 개방된 사이트</li>\n<li>Private: 관리자가 설문을 추가, 변경, 삭제할 수 있는 관리용 사이트</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-사전-작업\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85\" aria-label=\"2 사전 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 사전 작업</h1>\n<ul>\n<li>\n<p><code class=\"language-text\">Django</code> 를 설치한다(Django 4.0버전 기준. Python 3.8이상 버전 설치 권장).</p>\n</li>\n<li>\n<p>Django가 설치가 잘 되었는지 확인하기 위해 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  <span class=\"token operator\">~</span> git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 <span class=\"token operator\">-</span>m django <span class=\"token operator\">-</span><span class=\"token operator\">-</span>version\n<span class=\"token number\">4.0</span><span class=\"token number\">.6</span></code></pre></div>\n<ul>\n<li>설치가 되지 않았다면 “No module named django”와 같은 에러가 발생한다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-프로젝트-생성\" style=\"position:relative;\"><a href=\"#3-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"3 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 프로젝트 생성</h1>\n<p>프로젝트를 저장할 디렉터리로 이동한 후, 다음의 명령어를 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  github git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ django<span class=\"token operator\">-</span>admin startproject myfirstsite</code></pre></div>\n<ul>\n<li>myfirstsite라는 디렉터리가 생성되었다.</li>\n<li>참고: 프로젝트 생성 시, Python 혹은 Django에서 사용 중인 이름은 피해야 한다. 특히 django(Django 자체와 충돌 발생), test(Python 패키지 이름 중 하나)와 같은 이름은 피해야 한다.</li>\n</ul>\n<br/>\n<p>ll 명령어로 프로젝트 디렉터리가 잘 생성되었는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  github git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ ll\ntotal <span class=\"token number\">0</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">35</span> jinipark  staff   <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>1K Jun <span class=\"token number\">28</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">48</span> jinnypark9393<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">4</span> jinipark  staff   128B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span> myfirstsite</code></pre></div>\n<br/>\n<p>초기 생성된 Django 프로젝트 myfirstsite 하위에는 아래와 같은 디렉터리/파일이 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```python\n➜  myfirstsite git:(master) ✗ tree\n.\n├── manage.py\n└── myfirstsite\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n\n1 directory, 6 files\n```\n\n- **`manage.py`**: Django 프로젝트에서 사용하는 커맨드라인의 유틸리티. 자세한 정보는 [django-admin and manage.py](https://docs.djangoproject.com/ko/4.0/ref/django-admin/) 에서 확인.\n- **`myfirstsite/`** 디렉토리 내부에는 프로젝트를 위한 실제 Python 패키지들이 저장된다. 이 디렉토리 내의 이름을 이용하여, (**`myfirstsite.urls`** 와 같은 식으로) 프로젝트의 어디서나 Python 패키지들을 import할 수 있다.\n- **`myfirstsite/__init__.py`**: Python이 이 디렉토리를 패키지처럼 다루라고 알려주는 용도의 단순한 빈 파일이다. 패키지에 대해 궁금하다면 [패키지](https://docs.python.org/3/tutorial/modules.html#tut-packages)를 참고한다.\n- **`mysfirstite/settings.py`**: 현재 Django 프로젝트의 환경 및 구성을 저장한다. [Django settings](https://docs.djangoproject.com/ko/4.0/topics/settings/)에서 환경 설정이 어떻게 동작하는지 확인할 수 있다.\n- **`myfirstsite/urls.py`**: 현재 Django project 의 URL 선언을 저장한다. 사이트의 “목차” 라고 생각하면 된다. 자세한 내용은 [URL dispatcher](https://docs.djangoproject.com/ko/4.0/topics/http/urls/) 를 참고한다.\n- **`myfirstsite/asgi.py`**: 현재 프로젝트를 서비스하기 위한 ASGI-호환 웹 서버의 진입점이다. 자세한 내용은 [ASGI를 사용하여 배포하는 방법](https://docs.djangoproject.com/ko/4.0/howto/deployment/asgi/) 를 참고한다.\n- **`myfirstsite/wsgi.py`**: 현재 프로젝트를 서비스하기 위한 WSGI 호환 웹 서버의 진입점다. 자세한 내용은 [WSGI를 사용하여 배포하는 방법](https://docs.djangoproject.com/ko/4.0/howto/deployment/wsgi/)를 참고한다.</code></pre></div>\n<p><br/><br/></p>\n<h1 id=\"4-개발-서버\" style=\"position:relative;\"><a href=\"#4-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84\" aria-label=\"4 개발 서버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 개발 서버</h1>\n<p><code class=\"language-text\">myfirstsite</code> 디렉터리로 이동해 다음 명령어를 입력하면 Django 개발 서버를 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py runserver\nWatching <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> changes <span class=\"token keyword\">with</span> StatReloader\nPerforming system checks<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\nYou have <span class=\"token number\">18</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> Your project may <span class=\"token keyword\">not</span> work properly until you <span class=\"token builtin\">apply</span> the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> admin<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> contenttypes<span class=\"token punctuation\">,</span> sessions<span class=\"token punctuation\">.</span>\nRun <span class=\"token string\">'python manage.py migrate'</span> to <span class=\"token builtin\">apply</span> them<span class=\"token punctuation\">.</span>\nJuly <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2022</span> <span class=\"token operator\">-</span> <span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token number\">39</span><span class=\"token punctuation\">:</span><span class=\"token number\">59</span>\nDjango version <span class=\"token number\">4.0</span><span class=\"token number\">.6</span><span class=\"token punctuation\">,</span> using settings <span class=\"token string\">'myfirstsite.settings'</span>\nStarting development server at http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8000</span><span class=\"token operator\">/</span>\nQuit the server <span class=\"token keyword\">with</span> CONTROL<span class=\"token operator\">-</span>C<span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n<ul>\n<li>데이터베이스에 적용되지 않은 변경사항들(migrations)는 현재는 크게 신경쓰지 않아도 된다.</li>\n<li>웹 브라우저에서 <code class=\"language-text\">http://127.0.0.1:8000</code> 을 입력해 개발서버에 접속할 수 있다.</li>\n<li>개발 서버는 순수 Python으로 작성된 경량의 웹 서버이며 운영 이관 전까지 Apache와 같은 운영 서버를 구성할 필요 없이 신속하게 개발 할 수 있도록 만들어진 도구이다(운영 환경과 유사한 환경에서는 사용하지 말 것)</li>\n<li>포트 변경\n<ul>\n<li>\n<p>기본적으로 runserver 명령은 8080포트를 사용하도록 설정되어있다.</p>\n</li>\n<li>\n<p>이 설정을 변경하려면 아래와 같이 커맨드라인에서 인수를 전달하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py runserver <span class=\"token number\">8080</span></code></pre></div>\n</li>\n<li>\n<p>IP를 변경하려면 포트와 함께 커맨드라인에서 인수를 전달한다.</p>\n</li>\n</ul>\n</li>\n<li>runserver는 요청이 들어올 때마다 Python 파일을 다시 불러오므로 코드 변경사항 반영을 위해 서버를 기동하지 않아도 된다. 다만 파일 추가 등 몇 동작은 개발서버가 자동으로 인식하지 못하는 경우도 있다.</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"5-설문조사polls-앱-만들기\" style=\"position:relative;\"><a href=\"#5-%EC%84%A4%EB%AC%B8%EC%A1%B0%EC%82%ACpolls-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"5 설문조사polls 앱 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 설문조사(polls) 앱 만들기</h1>\n<p>다음으로는 생성된 프로젝트 내에서 앱(app)을 생성해보자. Django에서는 앱의 기본 디렉터리 구조를 자동으로 생성해준다.</p>\n<ul>\n<li>참고: 프로젝트와 앱의 차이\n<ul>\n<li>앱: 블로그 시스템, 공개 기록 데이터베이스 또는 소규모 의견조사 앱과 같은 작업을 수행하는 웹 애플리케이션.</li>\n<li>프로젝트: 특정 웹 사이트에 대한 구성 및 앱의 모음. 한 프로젝트에 여러 개의 앱이 포함될 수 있으며, 앱은 여러 프로젝트에 있을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p>manage.py가 존재하는 디렉터리에서 polls라는 이름의 앱을 생성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py startapp polls\n➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ ll\ntotal <span class=\"token number\">8</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">-</span><span class=\"token operator\">-</span>r<span class=\"token operator\">-</span><span class=\"token operator\">-</span>  <span class=\"token number\">1</span> jinipark  staff     0B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">39</span> db<span class=\"token punctuation\">.</span>sqlite3\n<span class=\"token operator\">-</span>rwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">1</span> jinipark  staff   667B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span> manage<span class=\"token punctuation\">.</span>py\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">8</span> jinipark  staff   256B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">39</span> myfirstsite\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">9</span> jinipark  staff   288B Jul <span class=\"token number\">24</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">50</span> polls\n➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ cd polls\n➜  polls git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ tree\n<span class=\"token punctuation\">.</span>\n├── __init__<span class=\"token punctuation\">.</span>py\n├── admin<span class=\"token punctuation\">.</span>py\n├── apps<span class=\"token punctuation\">.</span>py\n├── migrations\n│   └── __init__<span class=\"token punctuation\">.</span>py\n├── models<span class=\"token punctuation\">.</span>py\n├── tests<span class=\"token punctuation\">.</span>py\n└── views<span class=\"token punctuation\">.</span>py</code></pre></div>\n<h1 id=\"6-첫-번째-뷰-작성하기\" style=\"position:relative;\"><a href=\"#6-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B7%B0-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"6 첫 번째 뷰 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 첫 번째 뷰 작성하기</h1>\n<p><code class=\"language-text\">polls</code> 디렉터리의 <code class=\"language-text\">view.py</code>파일을 열어 다음과 같은 파이썬 코드를 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world. You're at the polls index.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>뷰를 생성한 뒤에는 URLconf를 사용해 뷰를 호출할 수 있도록 URL을 연결해준다. 먼저, urls.py라는 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  polls git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token function\">touch</span> urls.py\n➜  polls git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ tree\n<span class=\"token builtin class-name\">.</span>\n├── __init__.py\n├── admin.py\n├── apps.py\n├── migrations\n│   └── __init__.py\n├── models.py\n├── tests.py\n├── urls.py\n└── views.py\n\n<span class=\"token number\">1</span> directory, <span class=\"token number\">8</span> files</code></pre></div>\n<p><code class=\"language-text\">urls.py</code> 파일에 다음과 같은 코드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">from django.urls <span class=\"token function\">import</span> path\n\nfrom <span class=\"token builtin class-name\">.</span> <span class=\"token function\">import</span> views\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span>, view.index, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>다음으로는 최상위 URLconf에서 <code class=\"language-text\">polls.urls</code> 모듈을 바라보게 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">from django.contrib <span class=\"token function\">import</span> admin\nfrom django.urls <span class=\"token function\">import</span> path\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'polls/'</span>, include<span class=\"token punctuation\">(</span><span class=\"token string\">'polls.urls'</span><span class=\"token punctuation\">))</span>,\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span>, admin.site.urls<span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">include()</code> : 다른 URLconf들을 참조할 수 있도록 도와주는 함수. Django가 이 함수를 만나게 되면 URL의 그 시점까지 일치하는 부분을 잘라내고, 남은 문자열 부분을 후속 처리를 위해 include된 URLconf로 전달한다.</li>\n</ul>\n<p><code class=\"language-text\">polls</code> 의 index뷰가 잘 연결되어있는지 확인하기 위해 개발서버를 올려 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage.py runserver\nWatching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes with StatReloader\nPerforming system checks<span class=\"token punctuation\">..</span>.\n\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n\nYou have <span class=\"token number\">18</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>. Your project may not work properly <span class=\"token keyword\">until</span> you apply the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: admin, auth, contenttypes, sessions.\nRun <span class=\"token string\">'python manage.py migrate'</span> to apply them.\nJuly <span class=\"token number\">23</span>, <span class=\"token number\">2022</span> - <span class=\"token number\">21</span>:07:37\nDjango version <span class=\"token number\">4.0</span>.6, using settings <span class=\"token string\">'myfirstsite.settings'</span>\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.</code></pre></div>\n<p><code class=\"language-text\">http://127.0.0.1:8000/polls</code>를 브라우저에 입력하면 polls의 index 뷰에 정의한 “Hello, world. You’re at the polls index.” 가 보인다.</p>\n<p><code class=\"language-text\">path()</code> 함수에는 필수 인수 <code class=\"language-text\">route</code> &#x26; <code class=\"language-text\">view</code>, 추가 옵션으로 <code class=\"language-text\">kwargs</code> &#x26; <code class=\"language-text\">name</code> 까지 총 4개의 인수가 전달된다.</p>\n<h2 id=\"1-path-인수-route\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-route\" aria-label=\"1 path 인수 route permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: route</h2>\n<ul>\n<li>URL 패턴을 가진 문자열. 요청이 처리될 때 Django는 urlpatterns의 첫 패턴부터 일치하는 패턴을 찾을때까지 요청된 URL을 각 패턴과 리스트를 순서대로 비교한다.</li>\n<li>패턴은 GET, POST의 매개변수들, 혹은 도메인 이름을 색인하지 않는다.\n<ul>\n<li><code class=\"language-text\">https://www.example.com/myapp/</code> → <code class=\"language-text\">myapp/</code> 만 바라본다.</li>\n<li><code class=\"language-text\">https://www.example.com/myapp/?page=3</code> → <code class=\"language-text\">myapp/</code>만 바라본다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-path-인수-view\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-view\" aria-label=\"1 path 인수 view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: view</h2>\n<ul>\n<li>일치하는 패턴을 찾으면, <a href=\"https://docs.djangoproject.com/ko/4.0/ref/request-response/#django.http.HttpRequest\">HttpRequest</a> 객체를 첫번째 인수로 하여 경로로 부터 ‘캡처된’ 값을 키워드 인수로하여 특정한 view 함수를 호출한다.</li>\n</ul>\n<h2 id=\"1-path-인수-kwargs\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-kwargs\" aria-label=\"1 path 인수 kwargs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: kwargs</h2>\n<ul>\n<li>임의의 키워드 인수들은 목표한 view 에 딕셔너리형으로 전달된다.</li>\n</ul>\n<h2 id=\"1-path-인수-name\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-name\" aria-label=\"1 path 인수 name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: name</h2>\n<ul>\n<li>URL 에 name을 붙이면, 템플릿을 포함한 Django 어디에서나 명확하게 참조할 수 있다.</li>\n<li>이 기능을 이용해 단 하나의 파일만 수정해도 project 내의 모든 URL 패턴을 바꿀 수 있다.</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 24, 2022","title":"Python Django 튜토리얼(1)프로젝트/앱 생성하고 view 작성하기","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220724-programming-python-django-tutorial1/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220723-git-cannot-apply-gitignore/","nextSlug":"/220722-python-day71/","prevSlug":"/220724-programming-python-django-tutorial1/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}