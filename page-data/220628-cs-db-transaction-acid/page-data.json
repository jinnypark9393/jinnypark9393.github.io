{"componentChunkName":"component---src-templates-blog-template-js","path":"/220628-cs-db-transaction-acid/","result":{"data":{"cur":{"id":"bde9e9eb-92d2-5eff-8960-0b27de8586ea","html":"<h1 id=\"1-데이터베이스-트랜잭션database-transaction이란\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98database-transaction%EC%9D%B4%EB%9E%80\" aria-label=\"1 데이터베이스 트랜잭션database transaction이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데이터베이스 트랜잭션(Database transaction)이란?</h1>\n<ul>\n<li><strong>데이터베이스 트랜잭션(Database Transaction)</strong>: 데이터베이스의 여러 작업들을 하나로 묶은 단위이다.</li>\n<li>All-or-Nothing: 한 덩어리의 작업(트랜잭션)은 모두 실행되거나, 실행되지 않는다.</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"트랜잭션이-필요한-이유\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"트랜잭션이 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 트랜잭션이 필요한 이유</h2>\n<p>예를 들어 은행 A에서 은행 B로 돈을 보낸다고 가정한다. 이 때 A에서 출금 후, B로 송금하려할 때 시스템에 장애가 발생해 시스템이 멈추게 된다면 어떻게 될까?</p>\n<br/>\n<p>A에서 돈은 출금되었지만, B로 송금되지 않고 증발하는 큰 문제가 발생할 수 있다.</p>\n<br/>\n<p>트랜잭션은 이런 문제가 발생하지 않도록 해주는 역할을 한다.</p>\n<br/>\n<p>대부분은 데이터베이스에서는 송금이 되다가 마는 상황이 발생하지 않도록 여러 방법을 제공하지만, 공통으로 제공하는 가장 기본적인 방법은 트랜잭션을 통해 <strong>데이터의 유효성</strong>을 보장하는 것이다.</p>\n<p><br/><br/></p>\n<h1 id=\"2-acid란\" style=\"position:relative;\"><a href=\"#2-acid%EB%9E%80\" aria-label=\"2 acid란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ACID란?</h1>\n<ul>\n<li>데이터베이스 트랜잭션들이 안정적으로 수행되는 것을 보장하기 위한 네 가지 성질을 일컫는 단어이다.</li>\n</ul>\n<br/>\n<p>ACID의 각 성질을 알아보자.</p>\n<br/>\n<h2 id=\"1-원자성atomicity\" style=\"position:relative;\"><a href=\"#1-%EC%9B%90%EC%9E%90%EC%84%B1atomicity\" aria-label=\"1 원자성atomicity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 원자성(Atomicity)</h2>\n<ul>\n<li>모든 작업이 반영되거나, 혹은 모두 롤백(rollback)되는 성질이다.</li>\n<li>예를 들면, 위의 송금 예시처럼 트랜잭션이 중간 단계까지 실행하고 실패하는 일이 없도록 한다.</li>\n</ul>\n<br/>\n<h2 id=\"2-일관성consistency\" style=\"position:relative;\"><a href=\"#2-%EC%9D%BC%EA%B4%80%EC%84%B1consistency\" aria-label=\"2 일관성consistency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 일관성(Consistency)</h2>\n<ul>\n<li>데이터는 미리 정의된 규칙에서만 수정이 가능하다.</li>\n<li>트랜잭션이 실행을 성공적으로 완료하면, 언제나 일관성 있는 데이터베이스 상태로 유지해야한다.</li>\n<li>예를 들면 숫자 컬럼(column)에 문자열(string)이 저장되지 않도록 보장한다.</li>\n</ul>\n<br/>\n<h2 id=\"3-고립성isolation\" style=\"position:relative;\"><a href=\"#3-%EA%B3%A0%EB%A6%BD%EC%84%B1isolation\" aria-label=\"3 고립성isolation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 고립성(Isolation)</h2>\n<ul>\n<li>트랜잭션이 실행되고 있을 때, 다른 트랜잭션의 작업이 끼어들지 못하도록 보장하는 성질이다.</li>\n<li>즉, 트랜잭션 바깥에 있는 어떤 연산도 중간단계의 데이터를 볼 수 없게 하는 것이다.</li>\n<li>예를 들어, 은행 관리자는 이체 작업 도중 쿼리를 실행하더라도 특정 계좌간 이체하는 양 쪽을 볼 수 없다.</li>\n</ul>\n<br/>\n<h2 id=\"4-영구성durability\" style=\"position:relative;\"><a href=\"#4-%EC%98%81%EA%B5%AC%EC%84%B1durability\" aria-label=\"4 영구성durability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(4) 영구성(Durability)</h2>\n<ul>\n<li>한 번 반영(commit)된 트랜잭션의 내용은 영원히 적용된다는 성질이다.</li>\n<li>DBMS가 사용자에게 트랜잭션 commit 응답을 했을 경우, DB가 객체에 대한 변경사항이 디스크에 반영(flush)되기 전 시스템 장애가 발생해도 해당 커밋이 보장되어야 한다.</li>\n<li>이 성질을 제공하기위해 DBMS는 로그(log)를 관리한다.</li>\n<li><strong>로그(log)</strong>: DB 객체의 갱신 작업에 대한 기록 관리</li>\n</ul>\n<p><br/><br/></p>","excerpt":"1. 데이터베이스 트랜잭션(Database transaction)이란? 데이터베이스 트랜잭션(Database Transaction): 데이터베이스의 여러 작업들을 하나로 묶은 단위이다. All-or-Nothing: 한 덩어리의 작업(트랜잭션)은 모두 실행되거나, 실행되지 않는다.  🤔 트랜잭션이 필요한 이유 예를 들어 은행 A에서 은행 B로 돈을 보낸다고 가정한다. 이 때 A에서 출금 후, B로 송금하려할 때 시스템에 장애가 발생해 시스템이 멈추게 된다면 어떻게 될까? A에서 돈은 출금되었지만, B로 송금되지 않고 증발하는 큰 문제가 발생할 수 있다. 트랜잭션은 이런 문제가 발생하지 않도록 해주는 역할을 한다. 대부분은 데이터베이스에서는 송금이 되다가 마는 상황이 발생하지 않도록 여러 방법을 제공하지만, 공통으로 제공하는 가장 기본적인 방법은 트랜잭션을 통해 데이터의 유효성을 보장하는 것이다.  2. ACID란? 데이터베이스 트랜잭션들이 안정적으로 수행되는 것을 보장하기 위한 네 …","frontmatter":{"date":"June 28, 2022","title":"데이터베이스 트랜잭션(Database Transaction)과 ACID란?","categories":"CS","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220628-cs-db-transaction-acid/"}},"next":{"id":"81dd8b59-cba4-59ff-b081-75805fe85c11","html":"<h1 id=\"1-s3simple-storage-service란\" style=\"position:relative;\"><a href=\"#1-s3simple-storage-service%EB%9E%80\" aria-label=\"1 s3simple storage service란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. S3(Simple Storage Service)란?</h1>\n<ul>\n<li>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html\">Amazon S3(Simple Storage Service)</a>란?: 업계 최고의 확장성, 데이터 가용성, 보안 및 성능을 제공하는 객체(object) 스토리지 서비스</p>\n</li>\n<li>\n<p>사용 예시: 데이터 레이크, 웹 사이트, 모바일 애플리케이션, 백업 및 복원, 아카이브, 엔터프라이즈 애플리케이션, IoT 디바이스, 빅 데이터 분석 등 원하는 양의 데이터를 저장하고 보호할 수 있다.</p>\n</li>\n<li>\n<p>S3 오브젝트는 key로 접근하게 된다.</p>\n<ul>\n<li>key: prefix + filename (예: /abc.jpg)</li>\n<li>delimeter(/)로 file system을 흉내낸다. (예: /photos/2022/Jul/abc.jpg)</li>\n<li>Prefix당 요청 제한이 있다(3,500 PUT, COPY, POST, DELETE, 5,500 GET/HEAD).</li>\n</ul>\n</li>\n<li>\n<p>사용 패턴에 따라 다양한 스토리지 클래스를 제공한다.</p>\n<table>\n<thead>\n<tr>\n<th>스토리지 클래스</th>\n<th>목적</th>\n<th>내구성(설계상)</th>\n<th>가용성(설계상)</th>\n<th>가용영역</th>\n<th>최소 스토리지 기간</th>\n<th>최소 요금 객체 크기</th>\n<th>기타</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S3 Standard</td>\n<td>자주 액세스하는 데이터(한 달에 한 번 이상), 밀리초 단위의 액세스</td>\n<td>99.999999999%</td>\n<td>99.99%</td>\n<td>>= 3</td>\n<td>없음</td>\n<td>없음</td>\n<td>없음</td>\n</tr>\n<tr>\n<td>S3 Standard-IA</td>\n<td>밀리초 단위의 액세스로 한 달에 한 번 이따금 액세스하는 수명이 긴 데이터</td>\n<td>99.999999999%</td>\n<td>99.9%</td>\n<td>>= 3</td>\n<td>30일</td>\n<td>128KB</td>\n<td>GB당 검색 요금이 적용.</td>\n</tr>\n<tr>\n<td>S3 Intelligent-Tiering</td>\n<td>알 수 없거나 변경되거나 예측할 수 없는 액세스 패턴이 있는 데이터</td>\n<td>99.999999999%</td>\n<td>99.9%</td>\n<td>>= 3</td>\n<td>없음</td>\n<td>없음</td>\n<td>객체당 모니터링 및 자동화 비용이 적용. 검색 요금 없음.</td>\n</tr>\n<tr>\n<td>S3 One Zone-IA</td>\n<td>재생성 가능하고 자주 액세스하지 않는 데이터(한 달에 한 번), 밀리초 단위의 액세스</td>\n<td>99.999999999%</td>\n<td>99.5%</td>\n<td>1</td>\n<td>30일</td>\n<td>128KB</td>\n<td>GB당 검색 요금이 적용. 가용 영역의 손실에 대한 복원력이 없음.</td>\n</tr>\n<tr>\n<td>S3 Glacier Instant Retrieval</td>\n<td>밀리초 단위의 액세스로 분기에 한 번 액세스하는 수명이 긴 아카이브 데이터</td>\n<td>99.999999999%</td>\n<td>99.9%</td>\n<td>>= 3</td>\n<td>90일</td>\n<td>128KB</td>\n<td>GB당 검색 요금이 적용.</td>\n</tr>\n<tr>\n<td>S3 Glacier Flexible Retrieval</td>\n<td>몇 분에서 몇 시간의 검색 시간으로 1년에 한 번 액세스하는 수명이 긴 아카이브 데이터</td>\n<td>99.999999999%</td>\n<td>99.99%(객체 복원 후)</td>\n<td>>= 3</td>\n<td>90일</td>\n<td>40KB</td>\n<td>GB당 검색 요금이 적용. 이 객체에 액세스하려면 먼저 보관된 객체를 복원해야 함.</td>\n</tr>\n<tr>\n<td>S3 Glacier Deep Archive</td>\n<td>몇 시간의 검색 시간으로 1년에 한 번 미만 액세스하는 수명이 긴 아카이브 데이터</td>\n<td>99.999999999%</td>\n<td>99.99%(객체 복원 후)</td>\n<td>>= 3</td>\n<td>180일</td>\n<td>40KB</td>\n<td>GB당 검색 요금이 적용. 이 객체에 액세스하려면 먼저 보관된 객체를 복원해야 함..</td>\n</tr>\n<tr>\n<td>RRS(권장되지 않음)</td>\n<td>자주 액세스하는 중요하지 않은 데이터, 밀리초 단위의 액세스</td>\n<td>99.99%</td>\n<td>99.99%</td>\n<td>>= 3</td>\n<td>없음</td>\n<td>없음</td>\n<td>없음</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"추가-block-storage-vs-file-storage-vs-object-storage란\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-block-storage-vs-file-storage-vs-object-storage%EB%9E%80\" aria-label=\"추가 block storage vs file storage vs object storage란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가) Block Storage vs File Storage vs Object Storage란?</h2>\n<h3 id=\"1-block-storage\" style=\"position:relative;\"><a href=\"#1-block-storage\" aria-label=\"1 block storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) Block Storage</h3>\n<ul>\n<li>데이터를 일정한 크기의 덩어리(블록)으로 나누어 저장하는 방식</li>\n<li>블록(block) = 파일보다 작은 단위</li>\n<li>각 블록은 고유한 주소를 갖고 있어 이 주소를 통해 블록을 재구성 및 데이터 불러오기</li>\n<li>예시: SAN(Storage Area Network)혹은 가상머신의 디스크로 활용. AWS EBS(Elastic Block Storage)</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-file-storage\" style=\"position:relative;\"><a href=\"#2-file-storage\" aria-label=\"2 file storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) File Storage</h3>\n<ul>\n<li>파일 &#x26; 폴더의 계층구조</li>\n<li>파일: 이름, 위치, 생성일, 수정일, 크기 등의 제한적 메타데이터를 갖고 있다.</li>\n<li>파일이 늘어나면 데이터도 늘어나고 파일을 찾는 것도 힘들어진다.</li>\n<li>예시: DAS(Direct Attached Storage), NAS(Network Attached Storage). AWS EFS(Elastic File Storage)</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"3-object-storage\" style=\"position:relative;\"><a href=\"#3-object-storage\" aria-label=\"3 object storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) Object Storage</h3>\n<ul>\n<li>스토리지에 store, get 하기 위해 key, value store에 접근</li>\n<li>key에 해당하는 storage node로 mapping</li>\n<li>오브젝트(Object)라는 개별 데이터 단위로 저장</li>\n<li>오브젝트: 비디오, 오디오, 텍스트 등 모든 데이터 유형 포괄</li>\n<li>평면 구조로 데이터 저장 (≠ 계층 구조)</li>\n<li>접근이 빠르며 확장성이 높다.</li>\n<li>오브젝트의 메타데이터에는 사용자가 원하는 상세 정보를 추가할 수 있어 데이터 검색이 유용</li>\n<li>폭증하는 대량의 데이터를 저장 / 관리하기 좋은 최신 스토리지</li>\n<li>예시: AWS S3</li>\n</ul>\n<h3 id=\"블록-스토리지-vs-파일-스토리지-vs-오브젝트-스토리지\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-vs-%ED%8C%8C%EC%9D%BC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-vs-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\" aria-label=\"블록 스토리지 vs 파일 스토리지 vs 오브젝트 스토리지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[블록 스토리지 vs 파일 스토리지 vs 오브젝트 스토리지]</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Block Storage</th>\n<th>File Storage</th>\n<th>Object Storage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>장점</td>\n<td>- 데이터를 신속하게 검색</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(계층구조 X, 다양한 경로)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>다른 운영체제에서 액세스 가능</li>\n<li>대규모 DB운영에 적합 | - 전통적 데이터 스토리지 시스템</li>\n<li>사용이 친숙</li>\n<li>표준화가 잘 되어있다 | - 평면 구조로 데이터 접근이 빠름</li>\n<li>확장성</li>\n<li>메타데이터가 오브젝트 자체로 저장되어 접근, 검색이 쉽다 |</li>\n</ul>\n<p>| 단점 | - 비용이 많이 든다.</p>\n<ul>\n<li>관리자 부담 증가\n(메타데이터 처리가 제한적) | - 데이터가 많아지면 성능이 저하\n(파일, 폴더 찾기위한 리소스 사용)</li>\n<li>시스템을 추가해 스케일 아웃해야한다 | - 오브젝트를 수정할 수 없다</li>\n<li>수정 대신 덮어쓰기 사용</li>\n<li>자주 변경되는 데이터에 적합하지 않음(수정이 잘 일어나지 않는 이미지, 영상에 적합) |</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-s3-glacier란\" style=\"position:relative;\"><a href=\"#2-s3-glacier%EB%9E%80\" aria-label=\"2 s3 glacier란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. S3 Glacier란?</h1>\n<ul>\n<li>S3 Glacier(글래이셔)는 archive를 위한 전용 storage class이다.</li>\n<li>HA이며, AES-256 암호화가 적용되어있다.</li>\n<li>Amazon S3 수명주기(Lifecycle)를 이용해 객체를 비용 효율적으로 저장할 수 있다. 다음 두 가지 유형의 작업이 있다.\n<ul>\n<li>전환 작업: 객체가 다른 스토리지 클래스로 전환되는 기간(예: 생성 후 6개월 경과한 객체를 S3에서 S3 Glacier Deep Archive 스토리지에 아카이브)</li>\n<li>만료 작업: 객체가 만료되는 시기를 정의. 만료 객체는 자동 삭제.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-참고자료\" style=\"position:relative;\"><a href=\"#3-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"3 참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 참고자료</h1>\n<ul>\n<li>AWS S3: <a href=\"https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html\">https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html</a></li>\n<li>AWS S3 FAQ: <a href=\"https://aws.amazon.com/ko/s3/faqs/#Amazon_S3_Glacier_Deep_Archive\">https://aws.amazon.com/ko/s3/faqs/#Amazon_S3_Glacier_Deep_Archive</a></li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 27, 2022","title":"AWS S3(Simple Storage Service) 및 S3 Glacier란? (Block Storage, Object Storage, File Storage의 차이점)","categories":"클라우드","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220627-cloud-aws-s3/"}},"prev":{"id":"b665a335-10a1-5a07-b8ed-d1d9fe954d41","html":"<h1 id=\"1-osi-7-layer란\" style=\"position:relative;\"><a href=\"#1-osi-7-layer%EB%9E%80\" aria-label=\"1 osi 7 layer란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. OSI 7 Layer란?</h1>\n<ul>\n<li>Open System Interconnection Reference Model의 약어이다.</li>\n<li>ISO(국제 표준화 기구)에서 개발한 모델로, 컴퓨터 네트워크 프로토콜 디자인과 통신 계층을 나누어 설명한다.</li>\n<li>통신 장치를 구분하고 계층이라는 형태로 독립시킨다.</li>\n<li>각 계층에서의 변경은 다른 계층에 영향을 주지 않는다.</li>\n</ul>\n<br/>\n<h1 id=\"2-osi-7-layer-계층별-설명\" style=\"position:relative;\"><a href=\"#2-osi-7-layer-%EA%B3%84%EC%B8%B5%EB%B3%84-%EC%84%A4%EB%AA%85\" aria-label=\"2 osi 7 layer 계층별 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. OSI 7 Layer 계층별 설명</h1>\n<table>\n<thead>\n<tr>\n<th>계층</th>\n<th>이름</th>\n<th>프로토콜 예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7</td>\n<td>응용 계층(Application Layer)</td>\n<td>HTTP, FTP, DNS, SNMP, Telnet</td>\n</tr>\n<tr>\n<td>6</td>\n<td>표현 계층(Presentation Layer)</td>\n<td>SSL, TLS</td>\n</tr>\n<tr>\n<td>5</td>\n<td>세션 계층(Session Layer)</td>\n<td>NetBIOS, PPTP</td>\n</tr>\n<tr>\n<td>4</td>\n<td>전송 계층(Transport Layer)</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>3</td>\n<td>네트워크 계층(Network Layer)</td>\n<td>IP, ARP, ICMP, IPSec</td>\n</tr>\n<tr>\n<td>2</td>\n<td>데이터 링크 계층(Data Link Layer)</td>\n<td>PPP, ARP, Ethernet</td>\n</tr>\n<tr>\n<td>1</td>\n<td>물리 계층(Physical Layer)</td>\n<td>USB, Bluetooth, IEEE802.11</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h2 id=\"1-물리-계층physical-layer\" style=\"position:relative;\"><a href=\"#1-%EB%AC%BC%EB%A6%AC-%EA%B3%84%EC%B8%B5physical-layer\" aria-label=\"1 물리 계층physical layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 물리 계층(Physical Layer)</h2>\n<ul>\n<li>물리 계층에서는 물리적인 커뮤니케이션/데이터 전송을 담당한다.</li>\n</ul>\n<br/>\n<h2 id=\"2-데이터-링크-계층data-link-layer\" style=\"position:relative;\"><a href=\"#2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%A7%81%ED%81%AC-%EA%B3%84%EC%B8%B5data-link-layer\" aria-label=\"2 데이터 링크 계층data link layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 데이터 링크 계층(Data Link Layer)</h2>\n<ul>\n<li>데이터 링크 계층의 주요 기능은 아래 4가지이다.</li>\n</ul>\n<ol>\n<li><strong>Service to neighbors (Service to neighbor layer)</strong>\n<ul>\n<li>이웃한 계층들에게 잘 정의된 서비스 인터페이스를 제공해 이웃한 물리계층과 네트워크 계층에 서비스를 제공한다.</li>\n</ul>\n</li>\n<li><strong>Framing</strong>\n<ul>\n<li>데이터를 프레임(Frame)으로 그룹화해 전송해 물리계층의 비트스트림 오류를 수정한다.</li>\n<li>물리 계층에 의해 제공된 비트스트림을 분리된 프레임으로 분할한다.</li>\n</ul>\n</li>\n<li><strong>Flow Control</strong>\n<ul>\n<li>데이터를 보내는 측과 받는 측의 속도를 확인해 제어하는 것.</li>\n<li>데이터를 받는 측이 속도가 느릴 때 빠르게 데이터를 전송하는 측에 의해 막히지 않도록 속도를 규제</li>\n</ul>\n</li>\n<li><strong>Error Control</strong>\n<ul>\n<li>모든 프레임이 최종 목적지에 올바른 순서로 전달되었는지 확인하여 전송된 오류를 처리한다.</li>\n<li>비연결형 서비스에서는 문제되지 않지만 연결지향에서는 문제가 되니 오류 검출 및 수정 기능이 필요하다.</li>\n<li>패리티 검사(Parity Check), 체크섬(Checksum), 순환중복검사(Cyclic Redundancy Code)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-네트워크-계층network-layer\" style=\"position:relative;\"><a href=\"#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B3%84%EC%B8%B5network-layer\" aria-label=\"3 네트워크 계층network layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 네트워크 계층(Network Layer)</h2>\n<h2 id=\"4-전송-계층transport-layer\" style=\"position:relative;\"><a href=\"#4-%EC%A0%84%EC%86%A1-%EA%B3%84%EC%B8%B5transport-layer\" aria-label=\"4 전송 계층transport layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(4) 전송 계층(Transport Layer)</h2>\n<ul>\n<li><strong>라우팅(Routing)</strong>: 특정 네트워크 안에서 통신 데이터를 보낼 경로를 선택한다.</li>\n<li><strong>혼잡 제어(Congestion Control)</strong>: 현재 서브넷에 많은 패킷이 들어올 때 수행능력이 감소하지 않도록 한다. 혼잡 제어 알고리즘의 예시로는 Choke Packets, Hop-by-hop chock packets, Load Shedding, Jitter Control</li>\n<li><strong>인터네트워킹(Internetworking)</strong>: 네트워크 간의 통신하는 개념 및 제반 기술. 독립적으로 움직이는 개개의 네트워크간의 접속. 예시로는 여러 독립적 LAN을 WAN을 통해 연결한다.</li>\n</ul>\n<h2 id=\"5-세션-계층session-layer\" style=\"position:relative;\"><a href=\"#5-%EC%84%B8%EC%85%98-%EA%B3%84%EC%B8%B5session-layer\" aria-label=\"5 세션 계층session layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(5) 세션 계층(Session Layer)</h2>\n<ul>\n<li>연결의 확립, 해제, 전송 데이터의 단락 설정 등 데이터 전송의 관리 수행</li>\n</ul>\n<h2 id=\"6-표현-계층presentation-layer\" style=\"position:relative;\"><a href=\"#6-%ED%91%9C%ED%98%84-%EA%B3%84%EC%B8%B5presentation-layer\" aria-label=\"6 표현 계층presentation layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(6) 표현 계층(Presentation Layer)</h2>\n<ul>\n<li>데이터 형식의 변환 수행</li>\n<li>사용자와 컴퓨터를 연결하는 계층</li>\n<li>보내고 싶은 데이터를 통신에 적합한 형태로 만들거나 전달된 데이터를 사용자에게 맞게 변환</li>\n</ul>\n<h2 id=\"7-응용-계층application-layer\" style=\"position:relative;\"><a href=\"#7-%EC%9D%91%EC%9A%A9-%EA%B3%84%EC%B8%B5application-layer\" aria-label=\"7 응용 계층application layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(7) 응용 계층(Application Layer)</h2>\n<ul>\n<li>사용자에게 다양한 응용 프로그램 제공</li>\n</ul>\n<h1 id=\"3-osi-7-layer를-사용하는-장단점\" style=\"position:relative;\"><a href=\"#3-osi-7-layer%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"3 osi 7 layer를 사용하는 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. OSI 7 Layer를 사용하는 장단점</h1>\n<h2 id=\"1-장점\" style=\"position:relative;\"><a href=\"#1-%EC%9E%A5%EC%A0%90\" aria-label=\"1 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 장점</h2>\n<ul>\n<li>단순함\n<ul>\n<li>설계하기 쉽다: 한 번 각 층과 각 층간의 상호작용이 명확히 정의되면, 디자인/구현/테스팅이 간단해진다.</li>\n<li>유지보수가 쉽고 간편하다: 각 계층의 프로토콜은 다른 계층들과 나누어 설계될 수 있다.</li>\n</ul>\n</li>\n<li>유연성\n<ul>\n<li>수정이 쉽다: 각 계층이 독립되어있어 다른 계층에 영향 없이 수정을 할 수 있다.</li>\n<li>개선이 쉽다: 새로운 계층을 더하거나 새로운 기능을 계층에 더할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-단점\" style=\"position:relative;\"><a href=\"#2-%EB%8B%A8%EC%A0%90\" aria-label=\"2 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 단점</h2>\n<ul>\n<li>7개의 계층을 거쳐야 하기 때문에 지연시간이 발생한다.</li>\n<li>각 계층마다 헤더 등의 정보를 추가하거나 없애기 때문에 지연시간이 발생한다.</li>\n</ul>\n<h1 id=\"4-tcpip-프로토콜\" style=\"position:relative;\"><a href=\"#4-tcpip-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"4 tcpip 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. TCP/IP 프로토콜</h1>\n<ul>\n<li>오늘날 인터넷에서 컴퓨터들이 서로 정보를 주고받는 데에 쓰이는 프로토콜(protocol)의 모음이다.</li>\n<li>하드웨어, 운영체제, 접속 매체에 관계없이 동작할 수 있는 개방성을 가진다.</li>\n<li>TCP/IP 프로토콜의 경우 세션과 표현 계층이 없다.</li>\n<li>TCP/IP 프로토콜의 계층\n<ul>\n<li>Application Layer</li>\n<li>Transport Layer</li>\n<li>Internett Layer</li>\n<li>Data Access Layers</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 30, 2022","title":"OSI 7 Layer, TCP/IP란?","categories":"CS","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220630-cs-osi-7-layer/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220628-cs-db-transaction-acid/","nextSlug":"/220627-cloud-aws-s3/","prevSlug":"/220630-cs-osi-7-layer/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}