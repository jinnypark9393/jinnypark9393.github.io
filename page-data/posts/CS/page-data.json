{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/CS","result":{"pageContext":{"currentCategory":"CS","categories":["All","프로그래밍","etc","알고리즘","데브옵스","OSSCA","CS"],"edges":[{"node":{"id":"e6a7be9e-63c2-532d-9ee2-7fcda482a295","excerpt":"1. IP주소란? IP(Internet Protocol)주소: 글로벌 단위에서 장치간의 통신이 가능하도록 도와주는 논리적 주소이다. 때때로 변할 수 있는 값이다. 소프트웨어 설정을 통해 장치에 할당된다. 비신뢰성과 비연결성이 특징으로, 전송 과정에서 패킷이 손상되거나 순서가 섞일 수 있으므로 TCP와 같은 상위 프로토콜을 이용해야한다.  2. MAC 주소란? MAC(Media Access Control) 주소: 기기(Device)마다 할당된 물리적인 주소이다. MAC주소는 이더넷 통신을 하기위해 사용되며, 다른 MAC주소와 겹치지 않는다. 변하지 않는 값이다. ARP(Address Resolution Protocol) 프로토콜을 이용해 IP주소를 MAC주소와 매칭한다. 총 48비트로 구성되며 :로 구분한다.  3. IP주소가 필요한 이유 현재는 세계에 장비가 매우 많기 때문에 MAC 주소로만 통신하기가 어렵다. 예를 들어, 한국의 A컴퓨터에서 미국에 있는 B컴퓨터로 가기 위해서 나…","fields":{"slug":"/220712-cs-ip-address/"},"frontmatter":{"categories":"CS","title":"IP(Internet Protocol)주소란?","date":"July 12, 2022"}},"next":{"fields":{"slug":"/220711-cs-api/"}},"previous":{"fields":{"slug":"/220713-algorithm-book-with-pic/"}}},{"node":{"id":"79aefd53-8275-5427-a223-7d9ee2a36049","excerpt":"기술면접에서 접했던 질문 중 ‘캐시에 대해 설명해달라’는 내용이 있었는데, 너무 짧게 대답한 듯 하여 다시 공부하고자 포스팅을 작성하게 되었다. 참고로 캐시 개념은 쿠키, 세션과 많이 연관지어 설명이 되어있어서 캐시 뿐만 아니라 HTTP의 특성과, 쿠키, 세션도 캐시와 함께 알아보도록 하겠다.  1. HTTP의 특징 HTTP 프로토콜은 Stateless와 Connectionless라는 두 가지 특성을 가졌다. (1) Stateless 클라이언트의 상태 정보를 가지지 않는 처리 방식이다. 클라이언트와 첫번째 통신에서 데이터를 주고 받았다 해도, 두번째 통신에서 이전 데이터를 유지하지 않는다. (2) Connectionless 클라이언트가 서버에 요청(request)을 했을 때, 그 요청에 맞는 응답(Response)를 보낸 후 연결을 끊는 처리 방식이다. 다만, HTTP/1.1 버전에서 연결을 유지하고, 재활용하는 기능이 Default로 추가되었다(keep-alive 값으로 변경 가…","fields":{"slug":"/220711-cs-api/"},"frontmatter":{"categories":"CS","title":"쿠키(Cookie), 세션(Session), 캐시(Cache)란?","date":"July 11, 2022"}},"next":{"fields":{"slug":"/220711-cs-cookie-session-cache/"}},"previous":{"fields":{"slug":"/220712-cs-ip-address/"}}},{"node":{"id":"389d21a3-0a5d-55aa-bd51-f5feb8772d36","excerpt":"기술면접에서 접했던 질문 중 ‘캐시에 대해 설명해달라’는 내용이 있었는데, 너무 짧게 대답한 듯 하여 다시 공부하고자 포스팅을 작성하게 되었다. 참고로 캐시 개념은 쿠키, 세션과 많이 연관지어 설명이 되어있어서 캐시 뿐만 아니라 HTTP의 특성과, 쿠키, 세션도 캐시와 함께 알아보도록 하겠다.  1. HTTP의 특징 HTTP 프로토콜은 Stateless와 Connectionless라는 두 가지 특성을 가졌다. (1) Stateless 클라이언트의 상태 정보를 가지지 않는 처리 방식이다. 클라이언트와 첫번째 통신에서 데이터를 주고 받았다 해도, 두번째 통신에서 이전 데이터를 유지하지 않는다. (2) Connectionless 클라이언트가 서버에 요청(request)을 했을 때, 그 요청에 맞는 응답(Response)를 보낸 후 연결을 끊는 처리 방식이다. 다만, HTTP/1.1 버전에서 연결을 유지하고, 재활용하는 기능이 Default로 추가되었다(keep-alive 값으로 변경 가…","fields":{"slug":"/220711-cs-cookie-session-cache/"},"frontmatter":{"categories":"CS","title":"쿠키(Cookie), 세션(Session), 캐시(Cache)란?","date":"July 11, 2022"}},"next":{"fields":{"slug":"/220710-ossca-kubernetes-docs-localization1/"}},"previous":{"fields":{"slug":"/220711-cs-api/"}}},{"node":{"id":"b8dc8809-1b89-5160-b3a8-239a6349d024","excerpt":"1. 데이터베이스 인덱스(Database Index)란? 데이터베이스 테이블에 대한 검색 성능의 속도를 높여주는 자료구조 책에 있는 목차와 같은 개념으로, 인덱스에서 내가 원하는 데이터를 먼저 찾고 저장되어있는 물리적 주소로 찾아가게 된다. 👍 인덱스를 사용하는 이유 조건검색 Where 절의 효율성 향상 테이블 레코드는 순서 없이 저장되어 Where 절의 조건에 맞는 데이터를 찾을 때 처음부터 끝까지 다 읽게 된다(Full Table Scan) 인덱스 테이블은 데이터가 정렬되어 저장되어있어 Where 조건에 맞는 데이터를 빠르게 찾을 수 있다. 정렬 Order by 절의 효율성 향상 Order by는 부하가 많이 걸리는 작업(1차적으로 메모리에서 정렬 발생 & 메모리보다 작업이 큰 경우 디스크 I/O발생) 인덱스를 사용하면 이미 정렬이 되어있어 Order by에 의한 sort과정을 피할 수 있다. Min / Max의 효율적 처리 레코드의 시작값 & 끝 값 한 건만 가져오면 되기 때…","fields":{"slug":"/220708-cs-database-index/"},"frontmatter":{"categories":"CS","title":"데이터베이스(Database) 인덱스(Index) 자료구조","date":"July 08, 2022"}},"next":{"fields":{"slug":"/220707-cs-api/"}},"previous":{"fields":{"slug":"/220709-ossca-kubernetes-hugo-local-build/"}}},{"node":{"id":"e76ad179-ad05-53ab-a168-29960527c5c1","excerpt":"1. API란? API(Application Programming Interface): 요청과 응답을 사용하여 두 애플리케이션이 서로 통신하는 방법을 정의한 것이다. API 아키텍처는 클라이언트와 서버로 설명된다. 클라이언트: 요청을 보내는 애플리케이션 서버: 요청을 받는 애플리케이션 예를 들어, 기상청의 시스템에는 일일 기상 데이터가 들어있는데, 휴대폰의 날씨 앱은 API를 이용해 이 시스템과 커뮤니케이션하고 휴대폰에 매일 최신 날씨 정보를 표시한다. API 문서에는 개발자가 요청과 응답을 어떻게 구성하는지에 대한 방법이 들어있다. 2. API의 종류 (1) SOAP API 단순 객체 접근 프로토콜을 사용 XML을 사용하여 메시지를 교환 과거에 많이 사용되었던 API 유연성이 떨어진다. (2) RPC API 원격 프로시저 호출 API이다. 클라이언트가 서버에서 함수/프로시저를 완료하면 서버가 출력을 클라이언트로 다시 전송한다. (3) Websocket API JSON 객체를 사용…","fields":{"slug":"/220707-cs-api/"},"frontmatter":{"categories":"CS","title":"API란? (정의, 종류, 장단점)","date":"July 08, 2022"}},"next":{"fields":{"slug":"/220708-devops-microservice/"}},"previous":{"fields":{"slug":"/220708-cs-database-index/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}