{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/데브옵스","result":{"pageContext":{"currentCategory":"데브옵스","categories":["All","프로그래밍","etc","알고리즘","데브옵스","OSSCA","CS","클라우드"],"edges":[{"node":{"id":"a6e51229-04e4-592c-810e-81fca7b7f50f","excerpt":"1. 배경 상황 쿠버네티스 기반 컨테이너 마이그레이션 프로젝트에서 Pod 내의 파일을 local로 다운받아달라는 요청이 들어왔다. 이전 담당 시스템에서도 비슷한 요청(로그 파일을 다운받아달라는 요청)이 있었으나 그 때 당시 알아보았을 때에는 다운로드가 되지 않아 다른 방법을 취했었는데, 이번에 요청을 받고 알아보니 당시와는 환경이 달라 아주 간단하게 파드(Pod)에서 로컬(local)로 파일을 다운로드 받을 수 있었다. 참고로 이전 담당시스템에서 local 복사가 불가했던 이유는 시스템에서 내가 kubectl을 사용할 수 없었기 떄문(kubectl을 사용할 수 있는 권한이 없었기 때문)이었다. 이 때에는 로컬 다운로드 대신 해당 파일을 파드에 마운트해 둔 NAS로 옮겨 운영팀에서 직접 NAS에 접속해 확인 및 다운로드를 하실 수 있도록 처리 했었다. 2. 쿠버네티스 Pod - Local 환경간 파일 복사 쿠버네티스 파드에서 local로 파일을 복사하려면  명령어를 사용해주면 된다(…","fields":{"slug":"/220802-kubernetes-pod-to-local/"},"frontmatter":{"categories":"데브옵스","title":"쿠버네티스(Kubernetes) Pod to Local 파일 복사하는 방법","date":"August 02, 2022"}},"next":{"fields":{"slug":"/220801-git-rebase-drop/"}},"previous":{"fields":{"slug":"/220803-algorithm-book-with-pic/"}}},{"node":{"id":"b455ba9a-d964-553f-96fb-67825394dbf1","excerpt":"1. 배경 상황 오픈소스 컨트리뷰션 아카데미에서 쿠버네티스 한글화 프로젝트를 진행중인데, 커밋들이 섞여 올라가서 중간 커밋을 삭제해야하는 상황이 발생했다. 조금 더 구체적으로 설명하자면, 내가 한글화 작업을 진행할 때에는 task별로 이슈를 생성하고(혹은 이미 생성된 이슈에 코멘트를 달아 task를 할당 받고), 이슈별로 PR을 생성해 올리고 있다. 그리고 이슈별로 로컬 브랜치를 생성해 작업 내역들을 분리해 관리하고 있는데… 작업 도중에 외출하고 다녀와서 다른 브랜치로 전환해 작업하다보니  다른 이슈에 대한 작업 커밋을 같이 섞어 올려버렸다🤦 (PR을 생성하기 전에는 항상 git log와 git status를 생활화 하도록 하자…) 2. 해결 방법 순간 PR을 얼른 삭제하고 git reset으로 커밋내역을 싹 감아올린 다음에 새로 작업해서 올릴까 했지만 아무리 생각해도 너무 비효율적인 방법인 듯 해 구글링을 해보니 중간 커밋 내역만 삭제하는 방법이 있었다. 먼저  로 interac…","fields":{"slug":"/220801-git-rebase-drop/"},"frontmatter":{"categories":"데브옵스","title":"깃헙(github) 중간 커밋 삭제하기(git rebase -i / git drop)","date":"August 01, 2022"}},"next":{"fields":{"slug":"/220731-algorithm-book-with-pic/"}},"previous":{"fields":{"slug":"/220802-kubernetes-pod-to-local/"}}},{"node":{"id":"ff846ecb-d635-520a-ac5a-6ef3c9284767","excerpt":"1. 배경 상황 며칠 전 에 대해 알아보는 포스팅을 올린 적이 있는데, 관련해서 를 적용했음에도 불구하고 커밋 내역에 해당 파일이 계속 남아잇는 문제가 발생해 해결 방법을 적어두려 한다.  2. 해결 방법 에 파일을 추가했음에도 불구하고 파일이 계속해서 커밋 목록에 남아 있는 것은 에 파일을 추가하기 전 stage에 올라갔던 파일들이 캐시가 남아있어 커밋 목록에 뜨게 되는 것이라고 한다. 따라서 해당 파일이 들어 있는 디렉터리로 이동한 후, 아래와 같이 캐시를 삭제해주는 명령어를 입력해주면 된다.  ; 현재 디렉터리를 지정 이렇게 캐시를 지운 뒤, git add와 git commit으로 다시 커밋을 생성해주면 이제 가 제대로 적용되는 것을 확인할 수 있다.","fields":{"slug":"/220723-git-cannot-apply-gitignore/"},"frontmatter":{"categories":"데브옵스","title":"Git에서 .gitignore가 적용이 되지 않는 에러 해결 방법","date":"July 23, 2022"}},"next":{"fields":{"slug":"/220722-python-day71/"}},"previous":{"fields":{"slug":"/220724-programming-python-django-tutorial1/"}}},{"node":{"id":"98168d94-0dc3-52d4-8394-c0fdd6d28044","excerpt":"는 지금까지 업무에서 종종 사용하고 있었는데, 집에서 Django 실습 진행하다가 를 사용할 일이 생겨 다시금 개념과 사용 방법을 정리해두려 한다.  1. .gitignore란? 프로젝트 내에 remote 저장소에 올리고 싶지 않은 파일이 있을 경우 Git에서 제외할 수 있는 설정 파일이다. 일반적으로 IDE tool과 관련된 설정파일(예를 들면 이클립스의  나  파일), 백업파일이나 로그, 컴파일/빌드가 완료된 파일, 시크릿 정보(AWS root 계정 접속 key나 Django secret key 등)을 제외할 때 사용한다.  2. .gitignore 사용법 .gitignore 파일은 항상 최상위 디렉터리에 존재해야 한다고 한다. .gitignore 파일을 생성 후, 제외할 파일명을 지정해주면 되는데, 여러 옵션을 사용할 수 있다. 위와 같이 제외할 파일을 지정한 뒤에는 GitHub과 같은 원격 저장소에 소스코드와 함께  를 push 해주면 적용된다.","fields":{"slug":"/220720-git-gitignor/"},"frontmatter":{"categories":"데브옵스","title":"Git의 .gitignore란? (+사용방법)","date":"July 20, 2022"}},"next":{"fields":{"slug":"/220719-python-day68/"}},"previous":{"fields":{"slug":"/220720-python-day69/"}}},{"node":{"id":"61ac791a-2627-56a4-9b42-0dbdd1aea7b3","excerpt":"1. 모놀리틱 아키텍처 vs 마이크로서비스 아키텍처 (1) 모놀리틱 아키텍처(Monolithic Architecture) 애플리케이션의 모든 구성 요소가 한 프로젝트에 통합되어있다. 기능별로 독립적이지 않다(예: 한 프로젝트 내에 기능을 폴더로 구분) (2) 마이크로서비스 아키텍처(Microservice Architecture) 하나의 큰 애플리케이션을 작은 애플리케이션으로 쪼개 변경과 조합이 가능하도록 만든 것. 기능별로 독립적인 서비스를 구성한다(예: 기능별 도커 컨테이너 생성) 마틴 파울러와 제임스 루이스에 의하면 마이크로 서비스는 아래와 같다. In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with light…","fields":{"slug":"/220708-devops-microservice/"},"frontmatter":{"categories":"데브옵스","title":"마이크로서비스(Microservice)란?","date":"July 08, 2022"}},"next":{"fields":{"slug":"/220708-cs-database-index/"}},"previous":{"fields":{"slug":"/220709-ossca-kubernetes-hugo-local-build/"}}},{"node":{"id":"1cda5d5d-bffc-5d66-aee4-416c569306b6","excerpt":"💡 MacOS 환경에서 VMware로 Ubuntu를 설치하려면 “VMware Fusion”을 설치해야 한다. 이번 포스팅에서는 VMware Fusion에서 Ubuntu 20.04 버전을 설치해보도록 하겠다. 코딩 강의를 수강하거나 스터디 할 때 실습 환경을 맞춰주기 위해서 우분투를 설치했었는데, 이번에는 Jekyll을 설치하기 위해 우분투 환경을 만들어주게 되었다. 만약 나와 같이 MacOS(Catalina 이상 버전)에서 Jekyll 설치에 실패했던 사람은 Ubuntu 20.04 버전에서 설치 해보는 걸 추천한다. (참고로 Ubuntu 18.04 버전에서는 Jekyll 설치는 가능했었으나 테마 적용에서 버전 이슈가 발생했다.) 그럼 VMware Fusion과 Ubuntu가 무엇인지에 대해 간단하게 살펴본 뒤 두 소프트웨어를 설치해보도록 하자. 1. VMware Fusion이란? VMware Fusion은 VMware사에서 제공하는 MacOS 컴퓨터용 가상머신 소프트웨어이다. 무료…","fields":{"slug":"/220417-etc-vmware-ubuntu/"},"frontmatter":{"categories":"데브옵스","title":"VMware Fusion에서 Ubuntu 20.04 설치하기","date":"April 16, 2022"}},"next":null,"previous":{"fields":{"slug":"/220626-cloud-aws-cicd-tools/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}