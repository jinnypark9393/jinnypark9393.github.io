{"componentChunkName":"component---src-templates-blog-template-js","path":"/221009-cs-database-rdbms-comparison/","result":{"data":{"cur":{"id":"77bae7c1-425b-50ad-b415-5f3d74ae524a","html":"<h1 id=\"데이터베이스database-비교---oracle-mysql-postgresql-sqlite\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4database-%EB%B9%84%EA%B5%90---oracle-mysql-postgresql-sqlite\" aria-label=\"데이터베이스database 비교   oracle mysql postgresql sqlite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스(Database) 비교 - Oracle, MySQL, PostgreSQL, SQLite</h1>\n<h2 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h2>\n<p>이전 회사 팀원분들과 토이 프로젝트를 준비하고 있는데, 데이터베이스를 선정하기 전 각 데이터베이스에 어떤 장단점이 있는지 살펴보았다. 데이터베이스는 필요에 따라 데이터를 일정한 형태로 저장해 놓는 것을 뜻하는데, 이 데이터베이스를 관리할 수 있는 시스템을 DBMS라고 한다. DBMS에는 관리형 데이터베이스 시스템(RDBMS: Relational Database System)과, NoSQL로 구분되는데, 이번에는 RDBMS의 대표격인 Oracle, MySQL, PostgreSQL, 그리고 Django 프레임워크에서 기본적인 연동이 제공되는 SQLite를 비교해보도록 하겠다.</p>\n<br/>\n<h2 id=\"2-oracle\" style=\"position:relative;\"><a href=\"#2-oracle\" aria-label=\"2 oracle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Oracle</h2>\n<ul>\n<li>장점\n<ul>\n<li>고성능(빠른 속도)</li>\n<li>여러 가지 기능 제공</li>\n<li>백업 등 안정성</li>\n<li>대기업에서 많이 사용</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>라이선스 비용이 비쌈</li>\n<li>유지보수 비용 비쌈</li>\n<li>무료 버전의 용량 및 기간 제한 존재</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"3-mysqlmariadb\" style=\"position:relative;\"><a href=\"#3-mysqlmariadb\" aria-label=\"3 mysqlmariadb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. MySQL(MariaDB)</h2>\n<ul>\n<li>장점\n<ul>\n<li>오픈소스로 무료 사용 가능 (상업용으로는 유료)</li>\n<li>MySQL과 거의 유사한 MariaDB는 상업용일 경우에도 무료 사용 가능(MariaDB는 MySQL이 오라클에 인수되며 오픈소스 진영에서 MySQL 소스코드를 기반으로 만들어진 DBMS)</li>\n<li>속도, 성능 일반적인 수준 만족</li>\n<li>상위 몇 개 레코드를 가져오는 등 작은 범위 조회에 유리</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>복잡한 쿼리에서 성능 저하</li>\n<li>대량 데이터 조회 시 성능 저하가 발생</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"4-postgresql\" style=\"position:relative;\"><a href=\"#4-postgresql\" aria-label=\"4 postgresql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. PostgreSQL</h2>\n<ul>\n<li>장점\n<ul>\n<li>오픈소스로 상업용으로도 무료 사용 가능</li>\n<li>오라클만큼 기능도 풍부하며 성능 보장</li>\n<li>신뢰성 및 안정성 높음</li>\n<li>데이터 대량 입력 시 성능 좋음</li>\n<li>인스타그램, 스카이프 등 기업에서 사용하여 안정성 및 신뢰성 있는 데이터베이스</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>업데이트 시 Update 대신 Delete 후 Insert를 하게 되어있어 업데이트 속도가 저하됨</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"5-sqlite\" style=\"position:relative;\"><a href=\"#5-sqlite\" aria-label=\"5 sqlite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. SQLite</h2>\n<ul>\n<li>장점\n<ul>\n<li>Django와 기본 연동 되어있어 별도 설정이 필요 없다</li>\n<li>백업이 간편(파일을 통째로 복사)</li>\n<li>경량화되어있으며, 적은 메모리 환경에서도 좋은 성능을 보임</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>서버 없이 로컬 파일에 데이터를 저장하므로 외부 접속 시 복잡한 우회방법 필요</li>\n<li>한 명의 사용자만 동시접근 가능, 멀티 유저 사용 시 프록시 레이어 필요</li>\n<li>편의 기능 부족</li>\n<li>테스트 목적 외 부적합</li>\n</ul>\n</li>\n</ul>\n<br/>","excerpt":"데이터베이스(Database) 비교 - Oracle, MySQL, PostgreSQL, SQLite 1. 배경 상황 이전 회사 팀원분들과 토이 프로젝트를 준비하고 있는데, 데이터베이스를 선정하기 전 각 데이터베이스에 어떤 장단점이 있는지 살펴보았다. 데이터베이스는 필요에 따라 데이터를 일정한 형태로 저장해 놓는 것을 뜻하는데, 이 데이터베이스를 관리할 수 있는 시스템을 DBMS라고 한다. DBMS에는 관리형 데이터베이스 시스템(RDBMS: Relational Database System)과, NoSQL로 구분되는데, 이번에는 RDBMS의 대표격인 Oracle, MySQL, PostgreSQL, 그리고 Django 프레임워크에서 기본적인 연동이 제공되는 SQLite를 비교해보도록 하겠다. 2. Oracle 장점 고성능(빠른 속도) 여러 가지 기능 제공 백업 등 안정성 대기업에서 많이 사용 단점 라이선스 비용이 비쌈 유지보수 비용 비쌈 무료 버전의 용량 및 기간 제한 존재 3. MyS…","frontmatter":{"date":"October 09, 2022","title":"데이터베이스(Database) 비교 - Oracle, MySQL, PostgreSQL, SQLite","categories":"CS","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221009-cs-database-rdbms-comparison/"}},"next":{"id":"256c7aeb-537a-5dc8-b3b6-6f658d82a816","html":"<h1 id=\"python-django-no-changes-detected-해결\" style=\"position:relative;\"><a href=\"#python-django-no-changes-detected-%ED%95%B4%EA%B2%B0\" aria-label=\"python django no changes detected 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Django No changes detected 해결</h1>\n<h2 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h2>\n<p>토이 프로젝트 시작 전 테스트 용으로 Django REST framework 사용 실습을 하고 있었는데, Model을 잘못 정의해서 한 번 날리고(…) 다시 <code class=\"language-text\">makemigrations</code> 명령어를 실행 하려고 하니 아래와 같이 No changes detected라는 메시지가 발생했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  restProject git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage.py makemigrations\nNo changes detected</code></pre></div>\n<br/>\n<h2 id=\"2-해결-방법\" style=\"position:relative;\"><a href=\"#2-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"2 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 해결 방법</h2>\n<p>프로젝트 내에 캐시 파일, migrations 폴더, db.sqlite3 파일을 모두 삭제해도 인식을 못하고 같은 메시지가 발생해서 구글링을 해보니, <code class=\"language-text\">makemigrations</code> 명령어를 실행할 때 아래와 같이 앱 이름을 명시하면 해결이 된다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python3 manage.py makemigrations <span class=\"token operator\">&lt;</span>앱 이름<span class=\"token operator\">></span></code></pre></div>\n<br/>\n<p>아래와 같이 <code class=\"language-text\">rest</code> 라고 앱 이름을 명시해주니 Migration이 잘 생성 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  restProject git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage.py makemigrations rest\nMigrations <span class=\"token keyword\">for</span> <span class=\"token string\">'rest'</span><span class=\"token builtin class-name\">:</span>\n  rest/migrations/0001_initial.py\n    - Create model Rest</code></pre></div>\n<br/>","frontmatter":{"date":"October 08, 2022","title":"Python Django No changes detected 해결","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/221008-programming-python-django-no-changes-detected/"}},"prev":{"id":"baac8926-7d5e-5e70-b7f5-d78b71c5b112","html":"<h1 id=\"python-django장고란\" style=\"position:relative;\"><a href=\"#python-django%EC%9E%A5%EA%B3%A0%EB%9E%80\" aria-label=\"python django장고란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Django(장고)란?</h1>\n<h2 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h2>\n<p>이전 회사 팀분들과 토이프로젝트를 진행하려 하는데, 나는 이번 프로젝트에서 다른 팀원분과 함께 백엔드를 맡게 되었다. 우연찮게도 백엔드를 담당하게 된 두 명 모두 제일 많이 다뤄 본 언어가 Python이라 자연스럽게(?) Django를 선택하게 되었다.</p>\n<br/>\n<h2 id=\"2-django란\" style=\"position:relative;\"><a href=\"#2-django%EB%9E%80\" aria-label=\"2 django란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Django란?</h2>\n<ul>\n<li>Django Official Website: <a href=\"https://www.djangoproject.com/\">https://www.djangoproject.com/</a></li>\n<li>보안이 우수하고 유지보수가 편리한 웹사이트를 신속하게 개발하는 하도록 도움을 주는 파이썬 웹 프레임워크\n<ul>\n<li>개발자의 보안 실수 방지 (SQL Injection, Cross-site scripting, Cross-site request forgery, Clickjaking 등)</li>\n<li>일반적인 웹 개발 작업을 처리하는 데 필요한 추가 기능이 미리 포함 (User Authentication, Content Administration, Site Maps, RSS feeds 등)</li>\n</ul>\n</li>\n<li>무료 오픈소스 프로젝트로 파이썬 기반의 웹 애플리케이션 프레임워크 중 커뮤니티가 활성화 되어있는 편</li>\n<li>다양한 클라이언트측 프레임워크와 호환 가능(예: React 등)</li>\n<li>대부분의 형식(HTML, RSS 피드, JSON, XML 등)의 컨텐츠 전송 가능</li>\n</ul>\n<br/>\n<h2 id=\"3-django의-특징\" style=\"position:relative;\"><a href=\"#3-django%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"3 django의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Django의 특징</h2>\n<ul>\n<li>웹 개발시 필요한 번거로운 요소들을 직접 새로 개발할 필요 없이, 내장된 기능을 활용해 빠르게 개발 할 수 있다.</li>\n<li>MVT 패턴을 따름(Model, View, Template): MVC(Model, View, Controller)소프트웨어 디자인 패턴의 일종</li>\n<li>파이썬 언어를 기반으로 하고 있어 상대적으로 느린 편</li>\n<li>MSA로의 전환이 까다로움(*Need more investigation: 구글링 등으로 확인된 정보 아님)</li>\n<li>Django를 이용해 개발된 사이트\n<ul>\n<li>인스타그램(instagram)</li>\n<li>빗버킷(BitBucket)</li>\n<li>디스커스(Disqus)</li>\n<li>모질라(Mozilla)</li>\n<li>에이블리</li>\n<li>요기요</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"4-django의-구조\" style=\"position:relative;\"><a href=\"#4-django%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"4 django의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Django의 구조</h2>\n<ul>\n<li>\n<p>Django는 Model, View, Template이라는 세 가지 구조로 이루어진 MVT 패턴을 채택하고 있다.</p>\n</li>\n<li>\n<p>MVT패턴은 MVC(Model, View, Controller)소프트웨어 디자인 패턴의 일종</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MVC 패턴</th>\n<th>MVT 패턴</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>앱을 구성하는 데이터 담당 기능</td>\n<td>Model</td>\n<td>Model</td>\n</tr>\n<tr>\n<td>유저에게 데이터 보여주는 방식 담당 기능</td>\n<td>View</td>\n<td>Template</td>\n</tr>\n<tr>\n<td>유저의 입력을 처리하는 로직 담당 기능</td>\n<td>Controller</td>\n<td>View</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>MVT 파일에 대한 정의는 <code class=\"language-text\">settings.py</code> 에서 찾아볼 수 있다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h3>\n<ul>\n<li><strong>데이터</strong>를 다루는 영역(CRUD 처리)\n<ul>\n<li>settings.py의 <code class=\"language-text\">DATABASES</code> 에 데이터베이스 연동정보가 저장되어 있다.</li>\n</ul>\n</li>\n<li>데이터베이스에 적용될 모델(Model)을 설계\n<ul>\n<li>프로젝트의 각 App의 model.py 파일 안에 클래스 형태로 정의</li>\n<li>DB관련 설정은 settings.py의 DATABASES 항목에서 설정(Default: SQLite)</li>\n</ul>\n</li>\n<li>SQL문 대신 **ORM(Object Relation Mapping)**방식을 통해 DB에 접근\n<ul>\n<li>Java의 JPA와 유사</li>\n<li>데이터베이스 테이블을 model.py의 클래스와 매핑</li>\n<li>테이블에 대한 CRUD기능을 class 객체에 대해 수행 → Django에서 내부적으로 DB에 반영하게 됨\n<ul>\n<li>하나의 모델 클래스는 하나의 DB 테이블과 대응</li>\n<li>모델 클래스의 모든 Attribute는 각각 DB 필드가 됨</li>\n<li>모델의 구현 사항 변경 내역을 반영해 DB 스키마를 변경시키는 migration 기능 제공</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h3>\n<ul>\n<li>웹 어플리케이션 상에서 데이터들이 처리되는 <strong>로직</strong> 담당(HTTP 요청을 수신하고 HTTP 응답을 반환하는 요청 처리)</li>\n<li>크게 2개 파트로 구성\n<ol>\n<li>요청의 URL을 보고 대응하는 파이썬 함수로 routing하는 <strong>URL dispatcher(url.py파일)</strong>\n<ul>\n<li>settings.py의 <code class=\"language-text\">ROOT_URLCONF</code> 에 Root URL 정보가 정의되어있다.</li>\n<li>위에서 정의된 파일에서 Django가 <code class=\"language-text\">urlpatterns</code> 라는 변수명을 가진 리스트 탐색</li>\n<li>해당 리스트에 순서대로 정의된 패턴 중, 가장 먼저 매치된 패턴에 따라 매핑된 <code class=\"language-text\">View function</code>으로 라우팅</li>\n</ul>\n</li>\n<li>URL dispatcher를 거쳐 넘어온 요청을 처리하는 파이썬 함수들(<strong>View function</strong>)\n<ul>\n<li>HTTP 요청을 받음 → 모델에 들어있는 데이터를 조회 → 필요 시 가공 → 결과를 HTTP 응답 형태로 유저에게 전달</li>\n<li>View Function 호출 우선 순위\n<ul>\n<li>Django의 <a href=\"https://docs.djangoproject.com/en/4.0/ref/request-response/#django.http.HttpRequest\">HttpRequest</a> 객체</li>\n<li>URLconf에 패턴 정의한 대로 요청 URL로부터 capture된 문자열들 → 함수 내부에서 사용할 인자를 유저가 요청 URL에 포함하도록 할 수 있음</li>\n</ul>\n</li>\n<li>Response → <a href=\"https://docs.djangoproject.com/en/4.0/ref/request-response/#django.http.HttpResponse\">HttpResponse</a> 타입 객체로만 리턴</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<br/>\n<h3 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template</h3>\n<ul>\n<li>웹페이지에서 사용자가 보게 될 페이지의 모습을 구성(파일의 구조 정의)</li>\n<li>HTML, CSS, Javascript 등을 이용한 클라이언트 웹페이지를 작성 (<strong>View</strong>에서 이 <strong>Template</strong>을 사용해 동적으로 웹 페이지(예: HTML 페이지)를 생성하고 <strong>Model</strong>에서 가져온 데이터로 채움)</li>\n<li>동적인 부분(요청 처리 결과에 따라 변경)과 정적인 부분(요청 처리 결과와 상관없이 변경되지 않음)을 구분해 Django template을 미리 작성\n<ul>\n<li>Template: 문서 파일 혹은 파이썬 문자열 형태</li>\n<li>유저에 보여줄 때 동적으로 처리할 부분은 Django template language(<a href=\"https://docs.djangoproject.com/en/4.0/topics/templates/#the-django-template-language\">DTL</a>)를 사용하며, 코드에 명시된 DTL 문법에 따라 요청 처리 결과를 가공해 채워넣게 됨</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"기타-주요-요소들\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A3%BC%EC%9A%94-%EC%9A%94%EC%86%8C%EB%93%A4\" aria-label=\"기타 주요 요소들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 주요 요소들</h3>\n<ul>\n<li><strong>Forms</strong>\n<ul>\n<li>일단 웹 서비스는 <strong>화면을 통해 유저로부터 다양한 형태의 입력</strong>을 받을 필요가 있음(회원가입, 로그인, 검색 등)</li>\n<li>따라서 HTML에는 해당 기능을 위한 <code class=\"language-text\">&lt;form>...&lt;/form></code> 태그가 있음 (<strong>HTML Form</strong>)\n<ul>\n<li>form 태그 아래에서 입력이 어떤 타입의 데이터인지, 어떤 HTTP 메소드를 사용할지, 입력 데이터를 보낼 URL 등을 결정</li>\n<li>form을 통해 <strong>선택 가능한 HTTP 메소드는 시스템의 상태를 바꾸는 POST, 조회 목적의 GET</strong> 두 개</li>\n</ul>\n</li>\n<li>정리하자면 HTML Form은 유저가 GUI(웹 화면)를 통해 특정한 형태의 HTTP 요청을 서버에 쉽게 보낼 수 있도록 도와줌</li>\n<li>쟝고의 Form은…\n<ul>\n<li>입력을 위한 <strong>HTML Form을 자동으로 생성</strong></li>\n<li><strong>입력 값에 대한 유효성 검증</strong> 수행 (Validation)</li>\n</ul>\n</li>\n<li>쟝고의 기본 <a href=\"https://docs.djangoproject.com/en/4.0/ref/forms/api/#django.forms.Form\">Form</a> 클래스를 상속받아 커스텀 클래스를 정의하고 이를 View function 안에서 들어온 HTTP 메소드에 따라 분기해서 사용하는 방식\n<ol>\n<li><strong>GET</strong> 요청으로 URL 접근 시 <strong>HTML Form 생성</strong>해서 그려주고</li>\n<li><strong>POST</strong> 요청으로 <strong>입력 데이터 넘겼을 시 처리해서 결과</strong> 보여주는 방식</li>\n</ol>\n</li>\n<li>유효성 검증 완료된 값은 <code class=\"language-text\">Form</code> 객체 안의 딕셔너리 타입 <code class=\"language-text\">cleaned_data</code> 어트리뷰트를 통해 접근 가능</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><strong>django-admin &#x26; manage.py</strong>\n<ul>\n<li>django-admin: 쟝고의 프로젝트 관리용 CLI 도구</li>\n<li>manage.py\n<ul>\n<li>쟝고 프로젝트 생성 시 아래에 자동으로 생성되는 파이썬 모듈</li>\n<li>django-admin과 같은 역할을 하고 그에 더해 프로젝트 내부에서 사용할 설정 파일을 지정하는 <code class=\"language-text\">DJANGO_SETTINGS_MODULE</code> 환경변수 세팅까지 함</li>\n<li>프로젝트의 설정 파일 지정까지 하기 때문에 하나의 쟝고 프로젝트에서 작업할 땐 manage.py 사용 권장</li>\n</ul>\n</li>\n<li>기본 용법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ django-admin &lt;command> [options]\n    $ manage.py &lt;command> [options]\n    $ python -m django &lt;command> [options]</code></pre></div>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 주요 작업\n    - 모델 migration\n        1. 모델 코드 수정\n        2. migration 파일 생성`django-admin makemigrations &lt;app_name>`\n        3. DB에 migrate`django-admin migrate &lt;app_name> &lt;migration_name>`\n    - 서버 실행`django-admin runserver [addrport]`ex) `django-admin runserver localhost:8000`\n    - 쟝고 쉘 실행`django-admin shell --interface {ipython,bpython,python}`현재 쟝고 프로젝트 내부에서 작업할 수 있는 대화형 파이썬 쉘을 여는 명령\n    - 쟝고 프로젝트 생성`django-admin startproject name [directory]`디렉토리 아래에 manage.py 모듈과 프로젝트 패키지(기본 설정 파일인 settings.py 포함)가 생성됨\n    - 쟝고 앱 생성`django-admin startapp name [directory]`반복되는 기능을 모아 정의할 수 있는 최소 단위의 **쟝고 앱** 패키지를 생성하는 명령디렉토리 아래에 빈 models.py를 포함해 쟝고 앱을 제작할 수 있는 기본 얼개가 만들어짐\n    - superuser 생성`django-admin createsuperuseris_staff` 속성이 `True`인 admin 사이트에 접근할 수 있는 관리자 계정을 만드는 명령</code></pre></div>\n<br/>\n<ul>\n<li><strong>Settings</strong>\n<ul>\n<li>쟝고에서는 프로젝트와 관련된 다양한 설정 사항을 파이썬 모듈에 기록해 관리</li>\n<li>터미널의 <code class=\"language-text\">DJANGO_SETTINGS_MODULE</code> 환경변수로 어떤 파이썬 모듈을 설정 파일로 사용할지 지정\n<ul>\n<li><code class=\"language-text\">django-admin runserver</code> 명령 시 <code class=\"language-text\">-settings</code> 옵션을 통해서도 파이썬 모듈 경로 전달 가능</li>\n</ul>\n</li>\n<li>주요 설정 변수\n<ul>\n<li><code class=\"language-text\">INSTALLED_APPS</code>\n<ul>\n<li>해당 쟝고 프로젝트에서 사용하는 쟝고 앱을 모두 나열한 리스트</li>\n<li>서드파티 앱을 설치하거나 앱을 직접 구현했을 때 추가해줘야 함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ALLOWED_HOSTS</code>\n<ul>\n<li>해당 쟝고 프로젝트가 요청을 받고 응답을 보낼 수 있는 호스트/도메인 whitelist</li>\n<li>요청을 보내는 프론트엔드가 따로 있고 별도의 호스트/도메인으로 서빙 중일 경우 여기에 명시해줘야 함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">AUTH_USER_MODEL</code>\n<ul>\n<li>프로젝트 내부에서 사용자 인증에 사용할 User 모델 클래스를 명시</li>\n<li>기본값은 <code class=\"language-text\">[auth.User](https://docs.djangoproject.com/en/4.0/ref/contrib/auth/#user-model)</code></li>\n<li>프로젝트 생성과 함께 <code class=\"language-text\">django.contrib.auth.models.AbstractUser</code> 를 상속받아 커스텀 User 모델을 만들고, 가장 처음 migration에서 해당 User 모델을 반영하는 것을 권장 → 이후 필요에 따라 모델 수정</li>\n</ul>\n</li>\n<li><code class=\"language-text\">DEBUG</code>\n<ul>\n<li>디버그 모드 사용 여부를 나타내는 boolean 변수</li>\n<li>배포 시에는 <code class=\"language-text\">False</code>로 꺼서 나가야 함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">MEDIA_ROOT</code>\n<ul>\n<li>모델 클래스의 <code class=\"language-text\">FileField</code>/<code class=\"language-text\">ImageField</code>를 통해 저장한 모든 파일은 Media 파일로 취급</li>\n<li>Media 파일의 경우 DB 필드에는 저장경로(문자열)를 저장하고 파일 원본은 파일 스토리지에 저장</li>\n<li>파일 스토리지의 저장 위치는 설정 파일에 정의한 <code class=\"language-text\">MEDIA_ROOT</code> 변수 값</li>\n</ul>\n</li>\n<li><code class=\"language-text\">MEDIA_URL</code>\n<ul>\n<li><code class=\"language-text\">MEDIA_ROOT</code>에 있는 Media 파일에 접근할 때 사용할 수 있는 URL</li>\n<li>Django Template에서 <code class=\"language-text\">{{ MEDIA_URL }}</code>과 같이 사용 가능</li>\n</ul>\n</li>\n<li><code class=\"language-text\">STATIC_ROOT</code>\n<ul>\n<li>배포 시 프로젝트 내부 Static 파일을 <code class=\"language-text\">django-admin collectstatic</code> 명령으로 모을 때 사용할 경로</li>\n</ul>\n</li>\n<li><code class=\"language-text\">STATIC_URL</code>\n<ul>\n<li><code class=\"language-text\">STATIC_ROOT</code>에 있는 Static 파일에 접근할 때 사용할 수 있는 URL</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><strong>Admin 사이트</strong>\n<ul>\n<li>쟝고의 Model 중심 자동 어드민 인터페이스</li>\n<li>별도의 화면 설계 없이 쟝고에서 제공하는 admin 사이트를 통해 내부 Model 관리를 할 수 있음</li>\n<li>기본 설정된 <code class=\"language-text\">/admin/</code> URL로 admin 사이트 접근 가능</li>\n<li>기본 용법별도 admin.py 모듈에 admin 사이트를 통해 관리하고 싶은 모델에 대해 아래와 같이 선언</li>\n</ul>\n</li>\n</ul>\n<br/>","frontmatter":{"date":"October 10, 2022","title":"Python Django(장고)란?","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/221010-progrmming-what-is-python-django/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/221009-cs-database-rdbms-comparison/","nextSlug":"/221008-programming-python-django-no-changes-detected/","prevSlug":"/221010-progrmming-what-is-python-django/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}