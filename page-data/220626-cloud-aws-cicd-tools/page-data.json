{"componentChunkName":"component---src-templates-blog-template-js","path":"/220626-cloud-aws-cicd-tools/","result":{"data":{"cur":{"id":"62c4e749-abaa-55ac-a38b-481545d7c3e9","html":"<h1 id=\"1-aws-codecommit\" style=\"position:relative;\"><a href=\"#1-aws-codecommit\" aria-label=\"1 aws codecommit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS CodeCommit</h1>\n<ul>\n<li>GIt 기반의 repository를 클라우드 기반으로  제공하는 서비스</li>\n<li>애플리케이션을 개발하면서 관리할 소스코드를 안전하게 저장, 제어할 수 있는 기능을 제공</li>\n<li>완전 관리형 서비스로 사용자가 자체 소스코드 제어 시스템을 운영하거나 인프라 규모 조정을 걱정할 필요 없이 코드부터 바이너리까지 모든 사항을 저장</li>\n<li>비용은 최초 5명의 활성 사용자의 경우 프리티어, 이상일 경우 사용자당 과금\n<ul>\n<li>최초 5명의 활성사용자\n<ul>\n<li>비용: 0.00 USD</li>\n<li>계정당 리포지토리 1,000개, 요청 시 최대 25,000개</li>\n<li>매달 50GB의 스토리지</li>\n<li>매달 10,000건의 Git 요청</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>최초 5명 이후 추가되는 활성 사\n<ul>\n<li>계정당 리포지토리 1,000개, 요청 시 최대 25,000개</li>\n<li>활성 사용자당 50GB의 스토리지</li>\n<li>활성 사용자당 10,000건의 Git 요청</li>\n<li>CodeCommit에 해당하는 외부 툴로는 Github, Gitlab 등이 존재</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-aws-codebuild\" style=\"position:relative;\"><a href=\"#2-aws-codebuild\" aria-label=\"2 aws codebuild permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. AWS CodeBuild</h1>\n<ul>\n<li>애플리케이션 개발에 필요한 소스코드를 컴파일 및 테스트 후 배포하기 전 단계까지 제공하는 서비스</li>\n<li>자체 빌드서버가 필요하지 않기 때문에 서버를 직접 설정, 패치 및 업데이트를 적용하고 관리할 필요가 없다(완전 관리형 서비스)\n<ul>\n<li>Jenkins의 경우 별도 서버세팅이 필요</li>\n</ul>\n</li>\n<li>비용은 분 단위로 계산되며, 빌드 제출 시간부터 빌드 종료시까지가 비용 계산에 포함. 끝자리는 반올림 처리.\n<ul>\n<li>컴퓨팅 인스턴스(arm1.small, general1.small, general1.medium) 및 지역에 따라 비용 상이.</li>\n<li>프리티어: 매월 100분(빌드 시간 기준) build.general1.small 티어.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-aws-codedeploy\" style=\"position:relative;\"><a href=\"#3-aws-codedeploy\" aria-label=\"3 aws codedeploy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. AWS CodeDeploy</h1>\n<ul>\n<li>AWS EC2, ECS 등 컴퓨팅 시스템에 대한 애플리케이션 배포를 자동화하는 완전 관리형 서비스.</li>\n<li>지속적인 배포를 지원하는 대표적 CD(Continuous Deployment/Continuous Delivery)도구</li>\n<li>기존 운영 중인 애플리케이션의 영향을 최소화하며 신속하게 배포할 수 있는 기능을 제공</li>\n<li>비용은 EC2 인스턴스에 코드를 배포하는 경우 무료, 온프레미스에 배포하는 경우에만 1개 서버 당 0.02USD 발생</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"4-aws-codepipeline\" style=\"position:relative;\"><a href=\"#4-aws-codepipeline\" aria-label=\"4 aws codepipeline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. AWS CodePipeline</h1>\n<ul>\n<li>애플리케이션의 변경 내용을 지속적으로 릴리스 하는 데에 필요한 단계를 자동화\n<ul>\n<li>고객으로부터 새로운 개발에 대한 요청이나 버그 수정 요청을 받는다.</li>\n<li>개발자는 요청사항을 반영해 소스 리포지토리에 변경사항 업데이트 ⇒ CodePipeline이 자동으로 변경내용 감지</li>\n<li>변경 내용을 빌드. 테스트를 구성한 경우에는 테스트 실행</li>\n<li>빌드된 코드를 스테이징 서버로 배포. CodePipeline은 스테이징 서버에서 통합 또는 부하 테스트 등의 추가 테스트 진행</li>\n<li>파이프라인에 추가한 수동 승인 작업 승인 후 CodePipeline이 테스트 및 승인 된 코드를 운영(production) 인스턴스에 배포</li>\n</ul>\n</li>\n<li>비용은 활성 파이프라인 당 월별 1 USD 청구(매월 1개의 활성파이프라인 프리티어 제공)\n<ul>\n<li><strong>활성 파이프라인?</strong> 해당 월에 한 번 이상 코드 변경이 수행된 파이프라인</li>\n<li>타 서비스에서 작업을 트리거 하는 경우 추가 요금이 발생할 수 있음.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"4-참고-자료\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"4 참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참고 자료</h1>\n<ul>\n<li>AWS에서 CI/CD 파이프라인 설정 - <a href=\"http://aws.amazon.com/ko/getting-started/hands-on/set-up-ci-cd-pipeline\">aws.amazon.com/ko/getting-started/hands-on/set-up-ci-cd-pipeline</a></li>\n</ul>\n<p><br/><br/></p>","excerpt":"1. AWS CodeCommit GIt 기반의 repository를 클라우드 기반으로  제공하는 서비스 애플리케이션을 개발하면서 관리할 소스코드를 안전하게 저장, 제어할 수 있는 기능을 제공 완전 관리형 서비스로 사용자가 자체 소스코드 제어 시스템을 운영하거나 인프라 규모 조정을 걱정할 필요 없이 코드부터 바이너리까지 모든 사항을 저장 비용은 최초 5명의 활성 사용자의 경우 프리티어, 이상일 경우 사용자당 과금 최초 5명의 활성사용자 비용: 0.00 USD 계정당 리포지토리 1,000개, 요청 시 최대 25,000개 매달 50GB의 스토리지 매달 10,000건의 Git 요청 최초 5명 이후 추가되는 활성 사 계정당 리포지토리 1,000개, 요청 시 최대 25,000개 활성 사용자당 50GB의 스토리지 활성 사용자당 10,000건의 Git 요청 CodeCommit에 해당하는 외부 툴로는 Github, Gitlab 등이 존재  2. AWS CodeBuild 애플리케이션 개발에 필요한 …","frontmatter":{"date":"June 26, 2022","title":"AWS의 CI/CD 툴: AWS CodeCommit, CodeBuild, CodeDeploy, CodePipeline","categories":"클라우드","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220626-cloud-aws-cicd-tools/"}},"next":{"id":"45e4fc96-9b0c-5512-b2e6-43ac19cb257f","html":"<h1 id=\"algorithm그림으로-배우는-알고리즘-제-3장-자료구조-4\" style=\"position:relative;\"><a href=\"#algorithm%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%9C-3%EC%9E%A5-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-4\" aria-label=\"algorithm그림으로 배우는 알고리즘 제 3장 자료구조 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Algorithm]그림으로 배우는 알고리즘 제 3장: 자료구조 (4)</h1>\n<h1 id=\"그림으로-배우는-알고리즘-제-3장-자료구조-4\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%A0%9C-3%EC%9E%A5-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-4\" aria-label=\"그림으로 배우는 알고리즘 제 3장 자료구조 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그림으로 배우는 알고리즘 제 3장: 자료구조 (4)</h1>\n<h2 id=\"29-n번째-요소의-참조가-빠른-것은-배열-느린-것은-리스트-구조\" style=\"position:relative;\"><a href=\"#29-n%EB%B2%88%EC%A7%B8-%EC%9A%94%EC%86%8C%EC%9D%98-%EC%B0%B8%EC%A1%B0%EA%B0%80-%EB%B9%A0%EB%A5%B8-%EA%B2%83%EC%9D%80-%EB%B0%B0%EC%97%B4-%EB%8A%90%EB%A6%B0-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"29 n번째 요소의 참조가 빠른 것은 배열 느린 것은 리스트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>29. N번째 요소의 참조가 빠른 것은 배열, 느린 것은 리스트 구조</h2>\n<ul>\n<li>N번째 요소 조회</li>\n<li>예: 나열된 데이터에서 5번째 요소를 조회\n<ul>\n<li>배열\n<ul>\n<li>요소 번호를 사용해 바로 찾아낼 수 있다. ARRAY[5]</li>\n<li>어떠한 요소를 조회하더라도 모든 시간적 비용은 동일하다.</li>\n</ul>\n</li>\n<li>리스트: 1번째 데이터부터 차례대로 끄능ㄹ 따라가야한다.\n<ul>\n<li>1번째 요소를 조회한다.</li>\n<li>1번째 요소의 끈을 따라 2번째 요소를 조회한다.</li>\n<li>2번째 요소의 끈을 따라 3번째 요소를 조회한다.</li>\n<li>3번째 요소의 끈을 따라 4번째 요소를 조회한다.</li>\n<li>4번째 요소의 끈을 따라 5번째 요소를 조회한다.</li>\n</ul>\n⇒ 요소의 수가 많을 수록 느려진다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"30-데이터의-삽입삭제가-빠른-것은-리스트-느린-것은-배열\" style=\"position:relative;\"><a href=\"#30-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%82%BD%EC%9E%85%EC%82%AD%EC%A0%9C%EA%B0%80-%EB%B9%A0%EB%A5%B8-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%8A%90%EB%A6%B0-%EA%B2%83%EC%9D%80-%EB%B0%B0%EC%97%B4\" aria-label=\"30 데이터의 삽입삭제가 빠른 것은 리스트 느린 것은 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>30. 데이터의 삽입/삭제가 빠른 것은 리스트, 느린 것은 배열</h2>\n<ol>\n<li>데이터 삽입\n<ul>\n<li>새로운 데이터를 순서대로 나열된 데이터 열의 특정 위치에 삽입\n<ul>\n<li>배열: 삽입 위치 다음에 존재하는 모든 데이터를 뒤로 이동시켜야 한다(예: 삽입 데이터 뒤에 1,000개 데이터 존재 시 데이터 이동 작업 1,000번 반복).</li>\n<li>리스트: 삽입 데이터의 앞뒤 데이터를 연결하고 있는 끈을 잘라 새로운 데이터에 연결하기만 하면 된다(1번 작업)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>데이터 삭제\n<ul>\n<li>배열: 삭제 데이터 뒤에 있는 모든 데이터를 앞으로 옮겨야한다.</li>\n<li>리스트: 제거하고자 하는 데이터의 끈을 자른 후 앞 뒤 데이터를 이어 붙이기만 하면 된다.</li>\n</ul>\n</li>\n</ol>\n<p><br/><br/></p>","frontmatter":{"date":"June 25, 2022","title":"그림으로 배우는 알고리즘 제3장 - 자료구조(4)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220625-algorithm-book-with-pic/"}},"prev":{"id":"81dd8b59-cba4-59ff-b081-75805fe85c11","html":"<h1 id=\"1-s3simple-storage-service란\" style=\"position:relative;\"><a href=\"#1-s3simple-storage-service%EB%9E%80\" aria-label=\"1 s3simple storage service란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. S3(Simple Storage Service)란?</h1>\n<ul>\n<li>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html\">Amazon S3(Simple Storage Service)</a>란?: 업계 최고의 확장성, 데이터 가용성, 보안 및 성능을 제공하는 객체(object) 스토리지 서비스</p>\n</li>\n<li>\n<p>사용 예시: 데이터 레이크, 웹 사이트, 모바일 애플리케이션, 백업 및 복원, 아카이브, 엔터프라이즈 애플리케이션, IoT 디바이스, 빅 데이터 분석 등 원하는 양의 데이터를 저장하고 보호할 수 있다.</p>\n</li>\n<li>\n<p>S3 오브젝트는 key로 접근하게 된다.</p>\n<ul>\n<li>key: prefix + filename (예: /abc.jpg)</li>\n<li>delimeter(/)로 file system을 흉내낸다. (예: /photos/2022/Jul/abc.jpg)</li>\n<li>Prefix당 요청 제한이 있다(3,500 PUT, COPY, POST, DELETE, 5,500 GET/HEAD).</li>\n</ul>\n</li>\n<li>\n<p>사용 패턴에 따라 다양한 스토리지 클래스를 제공한다.</p>\n<table>\n<thead>\n<tr>\n<th>스토리지 클래스</th>\n<th>목적</th>\n<th>내구성(설계상)</th>\n<th>가용성(설계상)</th>\n<th>가용영역</th>\n<th>최소 스토리지 기간</th>\n<th>최소 요금 객체 크기</th>\n<th>기타</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>S3 Standard</td>\n<td>자주 액세스하는 데이터(한 달에 한 번 이상), 밀리초 단위의 액세스</td>\n<td>99.999999999%</td>\n<td>99.99%</td>\n<td>>= 3</td>\n<td>없음</td>\n<td>없음</td>\n<td>없음</td>\n</tr>\n<tr>\n<td>S3 Standard-IA</td>\n<td>밀리초 단위의 액세스로 한 달에 한 번 이따금 액세스하는 수명이 긴 데이터</td>\n<td>99.999999999%</td>\n<td>99.9%</td>\n<td>>= 3</td>\n<td>30일</td>\n<td>128KB</td>\n<td>GB당 검색 요금이 적용.</td>\n</tr>\n<tr>\n<td>S3 Intelligent-Tiering</td>\n<td>알 수 없거나 변경되거나 예측할 수 없는 액세스 패턴이 있는 데이터</td>\n<td>99.999999999%</td>\n<td>99.9%</td>\n<td>>= 3</td>\n<td>없음</td>\n<td>없음</td>\n<td>객체당 모니터링 및 자동화 비용이 적용. 검색 요금 없음.</td>\n</tr>\n<tr>\n<td>S3 One Zone-IA</td>\n<td>재생성 가능하고 자주 액세스하지 않는 데이터(한 달에 한 번), 밀리초 단위의 액세스</td>\n<td>99.999999999%</td>\n<td>99.5%</td>\n<td>1</td>\n<td>30일</td>\n<td>128KB</td>\n<td>GB당 검색 요금이 적용. 가용 영역의 손실에 대한 복원력이 없음.</td>\n</tr>\n<tr>\n<td>S3 Glacier Instant Retrieval</td>\n<td>밀리초 단위의 액세스로 분기에 한 번 액세스하는 수명이 긴 아카이브 데이터</td>\n<td>99.999999999%</td>\n<td>99.9%</td>\n<td>>= 3</td>\n<td>90일</td>\n<td>128KB</td>\n<td>GB당 검색 요금이 적용.</td>\n</tr>\n<tr>\n<td>S3 Glacier Flexible Retrieval</td>\n<td>몇 분에서 몇 시간의 검색 시간으로 1년에 한 번 액세스하는 수명이 긴 아카이브 데이터</td>\n<td>99.999999999%</td>\n<td>99.99%(객체 복원 후)</td>\n<td>>= 3</td>\n<td>90일</td>\n<td>40KB</td>\n<td>GB당 검색 요금이 적용. 이 객체에 액세스하려면 먼저 보관된 객체를 복원해야 함.</td>\n</tr>\n<tr>\n<td>S3 Glacier Deep Archive</td>\n<td>몇 시간의 검색 시간으로 1년에 한 번 미만 액세스하는 수명이 긴 아카이브 데이터</td>\n<td>99.999999999%</td>\n<td>99.99%(객체 복원 후)</td>\n<td>>= 3</td>\n<td>180일</td>\n<td>40KB</td>\n<td>GB당 검색 요금이 적용. 이 객체에 액세스하려면 먼저 보관된 객체를 복원해야 함..</td>\n</tr>\n<tr>\n<td>RRS(권장되지 않음)</td>\n<td>자주 액세스하는 중요하지 않은 데이터, 밀리초 단위의 액세스</td>\n<td>99.99%</td>\n<td>99.99%</td>\n<td>>= 3</td>\n<td>없음</td>\n<td>없음</td>\n<td>없음</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"추가-block-storage-vs-file-storage-vs-object-storage란\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-block-storage-vs-file-storage-vs-object-storage%EB%9E%80\" aria-label=\"추가 block storage vs file storage vs object storage란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가) Block Storage vs File Storage vs Object Storage란?</h2>\n<h3 id=\"1-block-storage\" style=\"position:relative;\"><a href=\"#1-block-storage\" aria-label=\"1 block storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) Block Storage</h3>\n<ul>\n<li>데이터를 일정한 크기의 덩어리(블록)으로 나누어 저장하는 방식</li>\n<li>블록(block) = 파일보다 작은 단위</li>\n<li>각 블록은 고유한 주소를 갖고 있어 이 주소를 통해 블록을 재구성 및 데이터 불러오기</li>\n<li>예시: SAN(Storage Area Network)혹은 가상머신의 디스크로 활용. AWS EBS(Elastic Block Storage)</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-file-storage\" style=\"position:relative;\"><a href=\"#2-file-storage\" aria-label=\"2 file storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) File Storage</h3>\n<ul>\n<li>파일 &#x26; 폴더의 계층구조</li>\n<li>파일: 이름, 위치, 생성일, 수정일, 크기 등의 제한적 메타데이터를 갖고 있다.</li>\n<li>파일이 늘어나면 데이터도 늘어나고 파일을 찾는 것도 힘들어진다.</li>\n<li>예시: DAS(Direct Attached Storage), NAS(Network Attached Storage). AWS EFS(Elastic File Storage)</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"3-object-storage\" style=\"position:relative;\"><a href=\"#3-object-storage\" aria-label=\"3 object storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) Object Storage</h3>\n<ul>\n<li>스토리지에 store, get 하기 위해 key, value store에 접근</li>\n<li>key에 해당하는 storage node로 mapping</li>\n<li>오브젝트(Object)라는 개별 데이터 단위로 저장</li>\n<li>오브젝트: 비디오, 오디오, 텍스트 등 모든 데이터 유형 포괄</li>\n<li>평면 구조로 데이터 저장 (≠ 계층 구조)</li>\n<li>접근이 빠르며 확장성이 높다.</li>\n<li>오브젝트의 메타데이터에는 사용자가 원하는 상세 정보를 추가할 수 있어 데이터 검색이 유용</li>\n<li>폭증하는 대량의 데이터를 저장 / 관리하기 좋은 최신 스토리지</li>\n<li>예시: AWS S3</li>\n</ul>\n<h3 id=\"블록-스토리지-vs-파일-스토리지-vs-오브젝트-스토리지\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-vs-%ED%8C%8C%EC%9D%BC-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-vs-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80\" aria-label=\"블록 스토리지 vs 파일 스토리지 vs 오브젝트 스토리지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[블록 스토리지 vs 파일 스토리지 vs 오브젝트 스토리지]</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Block Storage</th>\n<th>File Storage</th>\n<th>Object Storage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>장점</td>\n<td>- 데이터를 신속하게 검색</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(계층구조 X, 다양한 경로)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>다른 운영체제에서 액세스 가능</li>\n<li>대규모 DB운영에 적합 | - 전통적 데이터 스토리지 시스템</li>\n<li>사용이 친숙</li>\n<li>표준화가 잘 되어있다 | - 평면 구조로 데이터 접근이 빠름</li>\n<li>확장성</li>\n<li>메타데이터가 오브젝트 자체로 저장되어 접근, 검색이 쉽다 |</li>\n</ul>\n<p>| 단점 | - 비용이 많이 든다.</p>\n<ul>\n<li>관리자 부담 증가\n(메타데이터 처리가 제한적) | - 데이터가 많아지면 성능이 저하\n(파일, 폴더 찾기위한 리소스 사용)</li>\n<li>시스템을 추가해 스케일 아웃해야한다 | - 오브젝트를 수정할 수 없다</li>\n<li>수정 대신 덮어쓰기 사용</li>\n<li>자주 변경되는 데이터에 적합하지 않음(수정이 잘 일어나지 않는 이미지, 영상에 적합) |</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-s3-glacier란\" style=\"position:relative;\"><a href=\"#2-s3-glacier%EB%9E%80\" aria-label=\"2 s3 glacier란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. S3 Glacier란?</h1>\n<ul>\n<li>S3 Glacier(글래이셔)는 archive를 위한 전용 storage class이다.</li>\n<li>HA이며, AES-256 암호화가 적용되어있다.</li>\n<li>Amazon S3 수명주기(Lifecycle)를 이용해 객체를 비용 효율적으로 저장할 수 있다. 다음 두 가지 유형의 작업이 있다.\n<ul>\n<li>전환 작업: 객체가 다른 스토리지 클래스로 전환되는 기간(예: 생성 후 6개월 경과한 객체를 S3에서 S3 Glacier Deep Archive 스토리지에 아카이브)</li>\n<li>만료 작업: 객체가 만료되는 시기를 정의. 만료 객체는 자동 삭제.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-참고자료\" style=\"position:relative;\"><a href=\"#3-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"3 참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 참고자료</h1>\n<ul>\n<li>AWS S3: <a href=\"https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html\">https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/Welcome.html</a></li>\n<li>AWS S3 FAQ: <a href=\"https://aws.amazon.com/ko/s3/faqs/#Amazon_S3_Glacier_Deep_Archive\">https://aws.amazon.com/ko/s3/faqs/#Amazon_S3_Glacier_Deep_Archive</a></li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 27, 2022","title":"AWS S3(Simple Storage Service) 및 S3 Glacier란? (Block Storage, Object Storage, File Storage의 차이점)","categories":"클라우드","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220627-cloud-aws-s3/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220626-cloud-aws-cicd-tools/","nextSlug":"/220625-algorithm-book-with-pic/","prevSlug":"/220627-cloud-aws-s3/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}