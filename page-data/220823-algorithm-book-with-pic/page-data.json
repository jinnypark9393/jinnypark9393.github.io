{"componentChunkName":"component---src-templates-blog-template-js","path":"/220823-algorithm-book-with-pic/","result":{"data":{"cur":{"id":"83cf68da-0574-5664-b0b5-13d837517d71","html":"<h1 id=\"제-5장-정렬과-검색8\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-5%EC%9E%A5-%EC%A0%95%EB%A0%AC%EA%B3%BC-%EA%B2%80%EC%83%898\" aria-label=\"제 5장 정렬과 검색8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 5장: 정렬과 검색(8)</h1>\n<h2 id=\"62-정렬된-데이터-안에서-고속-검색하는-이진-검색바이너리-서치\" style=\"position:relative;\"><a href=\"#62-%EC%A0%95%EB%A0%AC%EB%90%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%88%EC%97%90%EC%84%9C-%EA%B3%A0%EC%86%8D-%EA%B2%80%EC%83%89%ED%95%98%EB%8A%94-%EC%9D%B4%EC%A7%84-%EA%B2%80%EC%83%89%EB%B0%94%EC%9D%B4%EB%84%88%EB%A6%AC-%EC%84%9C%EC%B9%98\" aria-label=\"62 정렬된 데이터 안에서 고속 검색하는 이진 검색바이너리 서치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>62. 정렬된 데이터 안에서 고속 검색하는 이진 검색(바이너리 서치)</h2>\n<ul>\n<li>바이너리 서치: 검색할 데이터 열이 오름차/내림차 순으로 이미 정렬되었다면 빠르게 검색할 수 있음</li>\n<li>검색할 데이터 열의 중앙값 M1을 기준점으로 만든다.</li>\n<li>M1의 값이 찾고자하는 Mt와 일치할 때까지 검색 범위를 좁혀간다.</li>\n<li>중앙 값 M2, 그 중앙의 중앙의 중앙 값 M3 등을 T와 비교해 일치할때까지 검색 범위를 좁혀간다.</li>\n<li>예시: 배열 DATA에 오름차순으로 저장된 N개의 데이터 중 원하는 데이터 T를 찾아내기\n<ul>\n<li>1단계: 중앙위치 M ⇒ N/2로 만듬</li>\n<li>2단계: 검색범위 안 데이터 개수가 1개 이상일 경우 3~4단계 반복</li>\n<li>3단계\n<ul>\n<li>T = DATA[M]일 때 → 데이터를 찾아냈으므로 반복 중단.</li>\n<li>T &#x3C; DATA[M]일 때 → DATA[M] 및 DATA[M]의 오른쪽(큰 값)에 데이터 T는 절대 없으므로, 검색 범위를 M보다 왼쪽(작은값)으로 한다.</li>\n<li>T > DATA[M]일 때 → DATA[M] 및 DATA[M]의 왼쪽(작은 값)에 데이터 T는 절대 없으므로, 검색 범위를 M보다 오른쪽(큰 값)으로 한다.</li>\n</ul>\n</li>\n<li>4단계\n<ul>\n<li>T = DATA[M]일 때 → 요소 번호 M의 위치에서 원하는 데이터 발견.</li>\n<li>T ≠ DATA[M]일 때 → 원하는 데이터가 발견되지 않음.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"63-주어진-문자열-안에서-원하는-문자열의-위치를-찾아내는-문자열-검색\" style=\"position:relative;\"><a href=\"#63-%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%88%EC%97%90%EC%84%9C-%EC%9B%90%ED%95%98%EB%8A%94-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%98-%EC%9C%84%EC%B9%98%EB%A5%BC-%EC%B0%BE%EC%95%84%EB%82%B4%EB%8A%94-%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B2%80%EC%83%89\" aria-label=\"63 주어진 문자열 안에서 원하는 문자열의 위치를 찾아내는 문자열 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>63. 주어진 문자열 안에서 원하는 문자열의 위치를 찾아내는 ‘문자열 검색’</h2>\n<ul>\n<li>문자열 안의 문자열을 검색하는 알고리즘에는 여러개의 문자로 이루어진 문자열을 대상으로 검색한다는 특징이 있다.</li>\n<li>문자열 STR안에 부분 문자열 SUB가 존재하는 위치를 구하는 알고리즘(I에 부분문자열이 발견된 위치가 저장)</li>\n<li>1단계: 문자열 비교 시작 위치를 저장하는 변수 I를 0으로 초기화.</li>\n<li>2단계: ‘(I+SUB의 문자 길이) &#x3C; STR의 문자열 길이’라면, 3~6단계를 반복한다.</li>\n<li>3단계: 부분 문자열의 위치를 저장하는 변수 J를 0으로 초기화</li>\n<li>4단계: J보다 SUB 문자열 길이가 길다면 4단계 반복</li>\n<li>5단계\n<ul>\n<li>STR[I] ≠ SUB[J]일 경우 → 반복처리 종료</li>\n<li>STR[I] = SUB[J]일 경우 → I와 J에 각각 1씩 더함</li>\n</ul>\n</li>\n<li>6단계\n<ul>\n<li>J와 SUB의 문자열 길이 동일 → I에 (I-J)를 저장하고 종료(I에 부분문자열 SUB가 발견된 위치가 저장)</li>\n<li>J보다 SUB의 문자열 길이가 길다면 → I에 (I-J+1)를 저장</li>\n</ul>\n</li>\n<li>7단계: I에 -1(발견되지 않음)을 저장</li>\n</ul>\n<br/>","excerpt":"제 5장: 정렬과 검색(8) 62. 정렬된 데이터 안에서 고속 검색하는 이진 검색(바이너리 서치) 바이너리 서치: 검색할 데이터 열이 오름차/내림차 순으로 이미 정렬되었다면 빠르게 검색할 수 있음 검색할 데이터 열의 중앙값 M1을 기준점으로 만든다. M1의 값이 찾고자하는 Mt와 일치할 때까지 검색 범위를 좁혀간다. 중앙 값 M2, 그 중앙의 중앙의 중앙 값 M3 등을 T와 비교해 일치할때까지 검색 범위를 좁혀간다. 예시: 배열 DATA에 오름차순으로 저장된 N개의 데이터 중 원하는 데이터 T를 찾아내기 1단계: 중앙위치 M ⇒ N/2로 만듬 2단계: 검색범위 안 데이터 개수가 1개 이상일 경우 3~4단계 반복 3단계 T = DATA[M]일 때 → 데이터를 찾아냈으므로 반복 중단. T < DATA[M]일 때 → DATA[M] 및 DATA[M]의 오른쪽(큰 값)에 데이터 T는 절대 없으므로, 검색 범위를 M보다 왼쪽(작은값)으로 한다. T > DATA[M]일 때 → DATA[M] 및…","frontmatter":{"date":"August 23, 2022","title":"그림으로 배우는 알고리즘 제 5장 - 정렬과 검색 (8)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220823-algorithm-book-with-pic/"}},"next":{"id":"d69a865b-c114-55df-8df9-252039a35618","html":"<h1 id=\"제-5장-정렬과-검색7\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-5%EC%9E%A5-%EC%A0%95%EB%A0%AC%EA%B3%BC-%EA%B2%80%EC%83%897\" aria-label=\"제 5장 정렬과 검색7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 5장: 정렬과 검색(7)</h1>\n<h2 id=\"60-검색이란-여러-개의-데이터-안에서-원하는-데이터를-찾아내는-것\" style=\"position:relative;\"><a href=\"#60-%EA%B2%80%EC%83%89%EC%9D%B4%EB%9E%80-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%88%EC%97%90%EC%84%9C-%EC%9B%90%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B0%BE%EC%95%84%EB%82%B4%EB%8A%94-%EA%B2%83\" aria-label=\"60 검색이란 여러 개의 데이터 안에서 원하는 데이터를 찾아내는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>60. 검색이란 여러 개의 데이터 안에서 원하는 데이터를 찾아내는 것</h2>\n<ul>\n<li>검색: 여러 개의 데이터 안에서 원하는 데이터를 찾아내는 알고리즘.\n<ul>\n<li>정렬만큼 빈번히 사용되는 중요 요소</li>\n<li>예시\n<ul>\n<li>카드번호로 사용자 정보를 검색해 사용자가 쇼핑을 할 수 있는 지 여부를 판별</li>\n<li>진찰권의 환자 ID로 전자 의료 기록을 찾아냄</li>\n<li>키워드가 적힌 사이트들을 전세계 웹사이트 중에서 찾아내 목록을 표시</li>\n</ul>\n</li>\n<li>검색 알고리즘의 종류\n<ul>\n<li>순차 검색(리니어 서치)</li>\n<li>이진 검색(바이너리 서치)</li>\n<li>간단한 문자열 검색</li>\n<li>KMP 알고리즘을 사용한 문자열 검색</li>\n<li>BM 알고리즘을 사용한 문자열 검색</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"61-처음부터-끝까지-샅샅이-데이터를-비교하는-순차-검색리니어-서치\" style=\"position:relative;\"><a href=\"#61-%EC%B2%98%EC%9D%8C%EB%B6%80%ED%84%B0-%EB%81%9D%EA%B9%8C%EC%A7%80-%EC%83%85%EC%83%85%EC%9D%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%98%EB%8A%94-%EC%88%9C%EC%B0%A8-%EA%B2%80%EC%83%89%EB%A6%AC%EB%8B%88%EC%96%B4-%EC%84%9C%EC%B9%98\" aria-label=\"61 처음부터 끝까지 샅샅이 데이터를 비교하는 순차 검색리니어 서치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>61. 처음부터 끝까지 샅샅이 데이터를 비교하는 순차 검색(리니어 서치)</h2>\n<ul>\n<li>순차 검색(리니어 서치: Linear search): 랜덤으로 나열된 데이터 열 안에서 원하는 데이터를 찾기 위해 원하는 데이터와 일치하는지 여부를 1번째 데이터부터 조사하는 방법</li>\n<li>N개의 데이터 중 원하는 데이터를 찾기까지 평균적으로 N/2 번 비교해야하기 때문에 많은 양의 데이터를 찾아내는 작업에 적합하지 않은 알고리즘</li>\n<li>예시: 배열 DATA에 저장된 N개의 데이터에서 원하는 데이터 T를 찾아내는 순서\n<ul>\n<li>1단계: 배열 DATA의 요소들을 가리키기 위한 첨자 I를 0으로 초기화</li>\n<li>2단계: I &#x3C; N일 동안, 다음의 3단계 반복</li>\n<li>3단계: DATA[I] = T 일때 반복처리 종료 / DATA[I] ≠ T 일때 I를 1 증가</li>\n<li>4단계: I &#x3C; N일 때 요소번호 I위치에서 원하는 데이터를 발견 / I = N일 경우 원하는 데이터가 발견되지 않음</li>\n</ul>\n</li>\n</ul>\n<br/>","frontmatter":{"date":"August 22, 2022","title":"그림으로 배우는 알고리즘 제 5장 - 정렬과 검색 (7)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220822-algorithm-book-with-pic/"}},"prev":{"id":"7f730227-cd69-54d5-83d6-e8d9671517fd","html":"<h1 id=\"제-5장-정렬과-검색9\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-5%EC%9E%A5-%EC%A0%95%EB%A0%AC%EA%B3%BC-%EA%B2%80%EC%83%899\" aria-label=\"제 5장 정렬과 검색9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 5장: 정렬과 검색(9)</h1>\n<h2 id=\"64--비교할-필요가-없는-문자열은-건너-뛰고-고속으로-검색하는-kmp-알고리즘\" style=\"position:relative;\"><a href=\"#64--%EB%B9%84%EA%B5%90%ED%95%A0-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8A%94-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EA%B1%B4%EB%84%88-%EB%9B%B0%EA%B3%A0-%EA%B3%A0%EC%86%8D%EC%9C%BC%EB%A1%9C-%EA%B2%80%EC%83%89%ED%95%98%EB%8A%94-kmp-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"64  비교할 필요가 없는 문자열은 건너 뛰고 고속으로 검색하는 kmp 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>64.  비교할 필요가 없는 문자열은 건너 뛰고 고속으로 검색하는 ‘KMP 알고리즘’</h2>\n<ul>\n<li>KMP(Knuth, Morris, Pratt) 알고리즘: 문자열 안에서 부분 문자열을 검색할 때, 부분 문자열로 검색에 실패한 위치를 바탕으로 다음번 검색 위치를 효율적으로 결정하는 알고리즘</li>\n<li>실패함수에 다음과 같은 정보를 넘겨 각 조건에 따라 다음 번에 문자 비교를 시작해야 할 가장 효율적 위치를 구한다.\n<ul>\n<li>부분 문자열이 불일치된 문자의 위치</li>\n<li>나열된 부분 문자열의 문자 데이터</li>\n</ul>\n</li>\n<li>예시: 문자열 STR “ABCABCDA’안에서 문자열 SUB “ABCD”를 찾을 경우\n<ul>\n<li>STR[0]~[2] 3문자와 SUB의 1문자부터 문자 3개가 일치하나 STR[3]의 ‘A’와 SUB 4번째 문자(’D’)가 불일치</li>\n<li>여기서 문자열 SUB의 문자가 모두 다르므로, STR[1]~[2]의 (’BC’)와 SUB[2]의 ‘C’는 부분 문자열의 1번째 문자와 일치할 수 없다.</li>\n<li>다음에는 STR[3]~과 SUB[0]을 비교하는 것이 좋음</li>\n</ul>\n</li>\n<li>예시2: 문자열 STR “ABABABCD’안에서 문자열 SUB “ABABC”를 찾을 경으\n<ul>\n<li>STR[0]~[3] 4번째 문자와 SUB의 1문자부터 문자 4가 일치하고, STR[4]의 ‘A’와 SUB 5번째 문자(’C’)가 불일치</li>\n<li>여기서 문자열 SUB에서 AB라는 문자열이 반복되므로, STR[2]~[3]의 (’AB’)와 SUB의 처음부터 2번째 문자(’AB’)와 일치할 수 없다.</li>\n<li>다음에는 STR[4]~와 SUB[2]를 비교하는 것이 좋음</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"65-문자열을-끝에서부터-검색하는-bm알고리즘\" style=\"position:relative;\"><a href=\"#65-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%EB%81%9D%EC%97%90%EC%84%9C%EB%B6%80%ED%84%B0-%EA%B2%80%EC%83%89%ED%95%98%EB%8A%94-bm%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"65 문자열을 끝에서부터 검색하는 bm알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>65. 문자열을 끝에서부터 검색하는 BM알고리즘</h2>\n<ul>\n<li>BM알고리즘: 문자열을 끝에서부터 비교하다 일치하지 않는 문자를 만났을 때 그 위치에 맞춰 검색 위치의 이동 범위를 효과적으로 결정(Boyer, Moore 고안자 2명의 이름을 따 지어진 이름)</li>\n<li>특징: 검색할 문자열의 끝에서부터 비교하며, 문자 불일치 감지 시 불일치한 문자를 기준으로 검색위치를 효율적으로 변경</li>\n<li>예시: 문자열 STR “ABCFABCDF”에서 문자열 SUB “ABCD”를 찾아내는 경우\n<ul>\n<li>SUB의 마지막 문자 SUB<a href=\"%E2%80%99D%E2%80%99\">3</a> &#x26; STR<a href=\"%E2%80%99F%E2%80%99\">3</a>를 비교해 불일치 판정</li>\n<li>이 시점에서 STR의 불일치 문자가 중요. ‘F’는 검색 문자열에 포함되어있지 않음. 즉 이 문자 ‘F’를 포함한 문자 4개 위치에서는 검색할 문자열이 절대 존재하지 않음</li>\n<li>문자를 비교할 다음 위치는 STR[4]~[7]까지임</li>\n</ul>\n</li>\n<li>예시2: 문자열 STR “ABCBCABD” 안에서 문자열 SUB “CBCAB”를 찾는 경우\n<ul>\n<li>SUB의 마지막 문자 SUB<a href=\"%E2%80%99B%E2%80%99\">4</a> &#x26; STR<a href=\"%E2%80%99C%E2%80%99\">4</a>를 비교해 불일치 판정</li>\n<li>‘C’는 검색 문자열에 2곳 포함. 이 문자열 끝부분에 보다 가까운 문자가 위치하는 ‘C’가 위치하는 SUB[2]를 방금 불일치로 판정한 STR[4]와 동일한 위치로 단숨에 이동</li>\n</ul>\n</li>\n</ul>\n<br/>","frontmatter":{"date":"August 24, 2022","title":"그림으로 배우는 알고리즘 제 5장 - 정렬과 검색 (9)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220824-algorithm-book-with-pic/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220823-algorithm-book-with-pic/","nextSlug":"/220822-algorithm-book-with-pic/","prevSlug":"/220824-algorithm-book-with-pic/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}