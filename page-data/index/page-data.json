{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6514388b-e82f-5341-ba99-d06b880055f1","excerpt":"1. 배경상황 현재 프로젝트가 Java로 구성되어있어 자바 메모리 구조에 대해서는 이전에 개인적으로 공부한 적이 있다. 하지만 최근 새로 착수한 프로젝트가 static의 과도한 사용으로 메모리 이슈가 발생하고 있는 프로젝트라 static의 개념을 새로 학습하고, Java 메모리 구조에 대해 다시 정리해보려 한다. 2. Static(정적)이란? 영문을 그대로 직역하면 고정된이라는 뜻을 가지고 있는데, 실제로 static은 프로그램 시작 시 메모리에 고정적으로 할당되어, 프로그램이 종료될 때 해제된다.  이라는 키워드를 사용해 정적 변수(static variable) 과 정적 메서드(static method) 를 생성할 수 있다. 이 둘을 합쳐 정적 멤버(static member), 혹은 클래스 멤버(class member) 라고 부른다. 이렇게 생성된 정적 변수, 정적 메서드의 경우 클래스가 메모리에 올라갈 때 자동으로 생성된다. 즉, 인스턴스(객체) 생성 없이 바로 사용이 가능하다…","frontmatter":{"categories":"프로그래밍","title":"Java의 static(정적)이란?","date":"August 08, 2022"},"fields":{"slug":"/220808-programming-java-static/"}}},{"node":{"id":"0c820bc9-e72c-5739-855f-28252493dcdf","excerpt":"gatsby(정적 웹사이트 생성기)에서 맘에 드는 테마를 발견해 gatsby로 이관하였다.\n기존 포스팅은 아직 이관중.","frontmatter":{"categories":"etc","title":"블로그 리뉴얼(jekyll 에서 gatsby로)","date":"August 08, 2022"},"fields":{"slug":"/220808-etc-renew-blog/"}}},{"node":{"id":"c035e5dd-0be8-5792-9959-264edf4db075","excerpt":"제 4장: 기본적인 알고리즘(4) 42. 배열 데이터의 최소 값을 구하려면 최소 값을 저장할 변수를 준비한다 최소값을 구하는 알고리즘은 최대값을 구하는 알고리즘과 유사하나 두 가지가 다르다 최소 값을 저장하는 변수의 초기 값 배열 요소의 비교 논리 최소 값을 구하는 순서 1단계: 최소 값을 저장하는 변수 MIN을 대상 데이터들의 최대 값보다 큰 값으로 초기화한다. 2단계: 첨자를 저장하는 변수 I를 0으로 초기화한다. 3단계: I가 N 미만이라면 4~5단계를 반복한다. 4단계: JUM[I] < MIN이라면, MIN에 JUM[I]를 대입한다. 5단계: I를 1 증가시킨다.  43. 배열 데이터에 등수를 매기려면 순위를 저장할 또 다른 배열을 준비한다. 등수를 구하는 방법 1단계: 배열 RANK의 모든 요소를 1로 초기화한다. 2단계: 첨자를 저장하는 변수 I에 0을 저장한다. 3단계: I이 N미만이라면 4~8단계를 반복한다. 4단계: 첨자를 저장하는 변수 J를 0으로 초기화한다. 5…","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(4)","date":"August 07, 2022"},"fields":{"slug":"/220807-algorithm-book-with-pic/"}}},{"node":{"id":"5276f620-5efe-5994-aebf-6248590f81ae","excerpt":"제 4장: 기본적인 알고리즘(3) 40. 배열 데이터의 평균 값은 반복 처리를 통해 합계와 개수를 구한 후 계산한다 배열의 끝에 저장된 보초 값으로 배열 데이터 개수를 관리하는 배열의 평균값 계산 배열의 합계와 배열의 개수를 구한 뒤 평균 계산 예시: 어떤 학급의 기말점수 (0~100)가 저장된 배열 JUM(배열 끝 보초값 —1)의 평균값은? 평균 = 총점 / 학급 인원 수 학급 인원 수 = COUNT (유효한 요소의 개수를 세는 변수) 총점 = SUM (배열 요소의 합계 값을 저장하는 변수) 1단계: 변수 COUNT와 합계를 저장하는 변수 SUM을 0으로 초기화한다. 2단계: 배열 JUM의 첨자를 저장하는 변수 I를 0으로 초기화한다. 3단계: JUM[I]이 보초 값(-1)을 가리키지 않는 동안, 다음의 4~5 단계를 반복한다. 4단계: Count에 1을 더하고 SUM에 SUM + JUM[I]를 저장한다. 5단계: I에 1을 더한다. 6단계: 평균 값을 저장하는 변수 AVE에 S…","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(3)","date":"August 06, 2022"},"fields":{"slug":"/220806-algorithm-book-with-pic/"}}},{"node":{"id":"777e46e5-3691-567a-a539-5aa0788ae072","excerpt":"제 4장: 기본적인 알고리즘(2) 38. 배열 데이터의 합을 계산하려면 더한 값을 저장할 변수를 준비한다 여러 데이터의 합을 구하는 처리 ⇒ 배열 합계 알고리즘 예시 시험점수의 총 합 계산 일일 입장객의 수를 통해 해당 월 전체 입장객 수 구하기 각 지점의 매출액을 합해 전 지점 매출액 구하기 데이터 N개의 합을 구하는 계산식 DATA[0] + DATA[1] + … + DATA[N-1] 다음과 같은 반복처리를 통해 구할 수 있다. 1단계: 합계를 저장하는 변수 SUM 을 0으로 초기화 2단계: 합계에 더하는 배열 요소를 가리키는 첨자를 저장하는 변수 I를 0으로 초기화 3단계: I가 N 미만이라면 다음 4~5단계를 반복한다 4단계: SUM + DATA[I]를 계산하여 그 값을 SUM에 대입한다 5단계: I의 값에 1을 더한다  39. 배열 안 요소의 개수를 구하려면 카운터를 준비한다 배열 데이터의 요소 개수 미리 고정 값으로 정함 다른 변수로 관리 배열 마지막 요소의 끝에 보초 값…","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(2)","date":"August 05, 2022"},"fields":{"slug":"/220805-algorithm-book-with-pic/"}}},{"node":{"id":"124907a4-11c5-5781-a21a-ae0725b8d13f","excerpt":"36. 1~N의 합을 구하려면 반복 처리한다. 1~N의 합은 다음 계산식으로 구할 수 있다. 1 + 2 + 3 + … + (N-1) + N 다음과 같이 반복처리를 통해 구할 수 있다. 1단계: 합계를 저장하는 변수 SUM을 0으로 초기화한다. 2단계: 합계에 더할 값을 저장하는 변수 VALUE에 1을 저장한다. 3단계: VALUE에 N 이하인 동안에 다음 4~5단계를 반복한다. 4단계: SUM + VALUE를 계산해 그 값을 SUM에 대입한다. 5단계: VALUE값을 1 증가시킨다. 37. 수열의 값을 유지하려면 배열을 사용한다 다양한 수열의 값을 유지하려면 배열을 사용하는 것이 가장 간단하다. 예: 피보나치 수열을 배열에 저장하고 유지하자 피보나치 수열: n번째(n ≥ 0)의 값을 Fn이라고 했을 때, 아래 조건을 만족하는 수열. F0=0 F1=1 Fn+2 = Fn + Fn+1 (n≥0) 1번째 요소부터 N개(n ≥ 2)의 피보나치 수열을 배열 F에 저장하는 알고리즘은 아래와 같…","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 4장 - 기본적인 알고리즘(1)","date":"August 04, 2022"},"fields":{"slug":"/220804-algorithm-book-with-pic/"}}},{"node":{"id":"461b000e-6650-5607-9853-4eb382e99399","excerpt":"1. 그림으로 배우는 알고리즘 제 3장: 자료구조 (7) 35. 정점과 간선으로 항목들의 관계를 그림으로 표현한 것이 그래프 그래프: 2개 이상의 항목이 어떤 관계를 맺고 있는지 주목하고 그 관계를 그림으로 표현한 것. 정점(노드): 표현하는 항목 간선(Edge): 각 항목들의 관계를 표현하는 선 그래프의 간선에는 방향성이라는 특성을 부여할 수 있다 ⇒ 방향있는 그래프 (ex. 일방통행) 방향성이 없는 간선 ⇒ 방향없는 그래프 간선에 가중치(비용)이 있는 그래프. ⇒ 가중 그래프 칼럼. BASE를 0으로? BASE를 1로? 1번째 요소 번호를 1로 정한 프로그래밍 언어 컴퓨터 개발 초창기의 프로그래밍에 자주 사용되던 언어들: Fortran, Pascal, Basic(초기형) 1번째 요소를 0으로 정한 프로그래밍 언어 현재 주류 언어들 C, C++, Java, C#, VisualBasic(BASIC)","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 4장 - 자료구조 (7)","date":"August 03, 2022"},"fields":{"slug":"/220803-algorithm-book-with-pic/"}}},{"node":{"id":"a6e51229-04e4-592c-810e-81fca7b7f50f","excerpt":"1. 배경 상황 쿠버네티스 기반 컨테이너 마이그레이션 프로젝트에서 Pod 내의 파일을 local로 다운받아달라는 요청이 들어왔다. 이전 담당 시스템에서도 비슷한 요청(로그 파일을 다운받아달라는 요청)이 있었으나 그 때 당시 알아보았을 때에는 다운로드가 되지 않아 다른 방법을 취했었는데, 이번에 요청을 받고 알아보니 당시와는 환경이 달라 아주 간단하게 파드(Pod)에서 로컬(local)로 파일을 다운로드 받을 수 있었다. 참고로 이전 담당시스템에서 local 복사가 불가했던 이유는 시스템에서 내가 kubectl을 사용할 수 없었기 떄문(kubectl을 사용할 수 있는 권한이 없었기 때문)이었다. 이 때에는 로컬 다운로드 대신 해당 파일을 파드에 마운트해 둔 NAS로 옮겨 운영팀에서 직접 NAS에 접속해 확인 및 다운로드를 하실 수 있도록 처리 했었다. 2. 쿠버네티스 Pod - Local 환경간 파일 복사 쿠버네티스 파드에서 local로 파일을 복사하려면  명령어를 사용해주면 된다(…","frontmatter":{"categories":"데브옵스","title":"쿠버네티스(Kubernetes) Pod to Local 파일 복사하는 방법","date":"August 02, 2022"},"fields":{"slug":"/220802-kubernetes-pod-to-local/"}}},{"node":{"id":"b455ba9a-d964-553f-96fb-67825394dbf1","excerpt":"1. 배경 상황 오픈소스 컨트리뷰션 아카데미에서 쿠버네티스 한글화 프로젝트를 진행중인데, 커밋들이 섞여 올라가서 중간 커밋을 삭제해야하는 상황이 발생했다. 조금 더 구체적으로 설명하자면, 내가 한글화 작업을 진행할 때에는 task별로 이슈를 생성하고(혹은 이미 생성된 이슈에 코멘트를 달아 task를 할당 받고), 이슈별로 PR을 생성해 올리고 있다. 그리고 이슈별로 로컬 브랜치를 생성해 작업 내역들을 분리해 관리하고 있는데… 작업 도중에 외출하고 다녀와서 다른 브랜치로 전환해 작업하다보니  다른 이슈에 대한 작업 커밋을 같이 섞어 올려버렸다🤦 (PR을 생성하기 전에는 항상 git log와 git status를 생활화 하도록 하자…) 2. 해결 방법 순간 PR을 얼른 삭제하고 git reset으로 커밋내역을 싹 감아올린 다음에 새로 작업해서 올릴까 했지만 아무리 생각해도 너무 비효율적인 방법인 듯 해 구글링을 해보니 중간 커밋 내역만 삭제하는 방법이 있었다. 먼저  로 interac…","frontmatter":{"categories":"데브옵스","title":"깃헙(github) 중간 커밋 삭제하기(git rebase -i / git drop)","date":"August 01, 2022"},"fields":{"slug":"/220801-git-rebase-drop/"}}},{"node":{"id":"5a8cf3c6-c4db-5778-b797-162bf07fd1bf","excerpt":"1. 그림으로 배우는 알고리즘 제 3장: 자료구조 (6) 33. 부모 노드의 값이 자식 노드의 값보다 항상 적은 이진 트리는 힙(Heap) 힙(Heap): 각 노드의 값이 다음 조건을 충족하도록 관리되는 이진트리 부모 노드의 값은 항상 하위 노드 값보다 작다(또는 부모 노드의 값은 항상 하위 노드 값보다 크다) 첫번째 경우 자식 노드의 값은 둘 중 어느쪽이 크더라도 상관 없음. 위 조건에 따라 관리되는 힙은 뿌리 부분에 모든 값 중 가장 작은 값(또는 가장 큰 값)이 배치됨. 최소 값(또는 최대 값)을 효율적으로 구하는 용도에 적합. 힙을 구현할 때 일반적으로 배열을 사용. 배열 요소 번호 1번 = 힙의 뿌리요소. 깊이가 작은 쪽 → 큰 쪽 노드의 왼쪽 → 오른쪽  34. 해시 테이블은 배열과 리스트를 조합한 자료 구조 해시 테이블(Hash Table): 아래 2개 자료구조가 조합된 것 N개의 요소를 가진 루트 배열이라는 이름의  배열 루트 배열의 각 요소가 가리키는 리스트 먼저 …","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 3장 - 자료구조 (6)","date":"July 31, 2022"},"fields":{"slug":"/220731-algorithm-book-with-pic/"}}},{"node":{"id":"f5933495-b7f4-58dc-aad3-5c99c4f104b8","excerpt":"1. 그림으로 배우는 알고리즘 제 3장: 자료구조 (5) 31. 마지막 요소까지 이동하면 1번째 요소로 되돌아오는 링 버퍼 1차원 배열의 요소들ㅇ르 처음부터 마지막까지 순서대로 조회하려면 배열 요소를 조회할 때 첨자를 1씩 더해나가면 된다. 링 버퍼: 1차원 배열의 1번째 요소와 마지막 요소를 합쳐 배열 마지막 요소의 다음에도 요소가 존재한다고 만드는 자료구조 예 요소가 10개인 BUFFER라는 1차원 배열 ⇒ BUFFER[9]의 다음 요소를 BUFFER[0]으로 설정  32. 부모 하나에 자식 둘이 딸린 구조는 이진트리 이진트리: 다음 요소를 가리키는 포인터를 2개 가진 단방향 리스트 노드: 이진트리의 구성요소 부모 노드: 자식 노드를 2개 이상 가질 수 없다. 자식 노드: 하위에 자식노드가 있을 경우 부모노드가 된다. 뿌리/루트 노드: 부모노드가 없는 노드 잎/리프 노드: 자식 노드가 없는 노드 깊이: 뿌리에서 특정 노드로 도달하기까지 경로의 길이(루트 노드 = 0 기준)","frontmatter":{"categories":"알고리즘","title":"그림으로 배우는 알고리즘 제 3장 - 자료구조 (5)","date":"July 30, 2022"},"fields":{"slug":"/220730-algorithm-book-with-pic/"}}},{"node":{"id":"bc0ae98b-2553-53c3-bea8-98a893445eb3","excerpt":"오픈소스 컨트리뷰션 아카데미 쿠버네티스 한글화 프로젝트 3주차 Action Item 중 하나인 diff_l10n_branches.py 스크립트 실행해보기를 진행하고 기록으로 남겨보려 한다. diff_l10n_branches.py 스크립트는 쿠버네티스 한글화 프로젝트에서 마일스톤(약 3주 주기로 한글화 전용 개발 브랜치에서 k8s 메인 브랜치로 병합하는 주기)별로 기존에 번역된 문서 중 업데이트가 필요한 문서를 리포트형식으로 뽑아주는 스크립트이다. 따라서 마일스톤이 바뀔때마다 이 스크립트를 사용해 리포트를 뽑은 뒤, 이슈를 생성하여 컨트리뷰터들이 자율적으로 일감을 맡아 업데이트를 진행하게 된다.  1. 사전 준비  저장소를 개인 저장소로 fork한 뒤, fork한 저장소를 로컬에 clone해 놓는다(참고 링크). python3를 설치(macOS의 경우 brew로 다운로드)한다. 스크립트 실행에 필요한 모듈을 다운로드한다(참고 링크). website > scripts 하위에 위치한  …","frontmatter":{"categories":"OSSCA","title":"오픈소스 컨트리뷰션 아카데미(쿠버네티스 한글화) - diff_l10n_branches.py 스크립트 실행해보기","date":"July 29, 2022"},"fields":{"slug":"/220729-ossca-kubernetes-git-diff/"}}},{"node":{"id":"0ea92a84-5ede-530b-af72-57c6d8bf8188","excerpt":"참고: 이 포스팅은 유투브에 올라온 Kubernetes 오픈소스 컨트리뷰션 방법 소개 (한글화 기여를 통해 쿠버네티스에 참여하기, CNCG2020 발표) 및 [Youtube]초간단 쿠버네티스 문서 한글화 시작 가이드 영상, Kubernetes Contributor Cheatsheat, 쿠버네티스 문서 한글화 가이드 문서를 참조하여 직접PR을 올린 경험을 토대로 작성 된 자료입니다. 혹시 잘못된 부분이 있을 경우에는 메일(jinnypark9393@gmail.com)로 알려주시면 반영하도록 하겠습니다 😊  쿠버네티스 공식문서 한글화에 기여하는 방법 시리즈 쿠버네티스 공식문서 한글화에 기여하는 방법(1)사전준비 & 이슈 생성하기 쿠버네티스 공식문서 한글화에 기여하는 방법(2)소스코드 복사 & 번역하기 쿠버네티스 공식문서 한글화에 기여하는 방법(3)PR(Pull Request)생성 & CLA 서명 (작성중) 쿠버네티스 공식문서 한글화에 기여하는 방법(4)리뷰 내용 반영 & 승인 완료 (작…","frontmatter":{"categories":"OSSCA","title":"오픈소스 컨트리뷰션 아카데미(쿠버네티스 한글화) - 쿠버네티스 공식문서 한글화에 기여하는 방법(2)소스코드 복사 & 번역하기","date":"July 17, 2022"},"fields":{"slug":"/220717-ossca-kubernetes-docs-localization2/"}}},{"node":{"id":"6dbc8f98-ed8b-5199-a518-7ab8afbbd33f","excerpt":"참고: 이 포스팅은 유투브에 올라온 Kubernetes 오픈소스 컨트리뷰션 방법 소개 (한글화 기여를 통해 쿠버네티스에 참여하기, CNCG2020 발표) 및 [Youtube]초간단 쿠버네티스 문서 한글화 시작 가이드 영상, Kubernetes Contributor Cheatsheat, 쿠버네티스 문서 한글화 가이드 문서를 참조하여 직접PR을 올린 경험을 토대로 작성 된 자료입니다. 혹시 잘못된 부분이 있을 경우에는 메일(jinnypark9393@gmail.com)로 알려주시면 반영하도록 하겠습니다 😊 참고로 쿠버네티스 공식 문서에 공헌하는 방법은 한글화가 되지 않은 영문 페이지를 한국어로 번역 한국어 페이지에서 오타 또는 틀린 내용의 수정 영문 페이지에서 오타 또는 틀린 내용의 수정 등 여러 방법이 있지만, 나는 첫 번째 방법인 한글화가 되지 않은 영문 페이지를 한국어로 번역하는 방법에 대해 설명하도록 하겠다.  쿠버네티스 공식문서 한글화에 기여하는 방법 시리즈 쿠버네티스 공식문서…","frontmatter":{"categories":"OSSCA","title":"오픈소스 컨트리뷰션 아카데미(쿠버네티스 한글화) - 쿠버네티스 공식문서 한글화에 기여하는 방법(1)사전준비 & 이슈 생성하기","date":"July 10, 2022"},"fields":{"slug":"/220710-ossca-kubernetes-docs-localization1/"}}},{"node":{"id":"06b1f5b5-2196-5fe8-8423-67607858be6b","excerpt":"올해 7월 9일(토)부터 2022년도 오픈소스 컨트리뷰션 아카데미 중 “Kubernetes 한글화 컨트리뷰션 및 커뮤니티 참여” 프로젝트에 참가하게 되었다. 그 중 첫번째 과제는 kubernetes.slack.com 가입한 뒤 쿠버네티스 한글화 프로젝트와 관련된  ,  ,  세 채널에 참여하는 것, 그리고 두 번째 과제가 README를 읽고 를 빌드해보는 것이다. 위의 Readme 문서를 살펴보면 로컬/컨테이너 환경에서 빌드하는 방법에 대해 설명되어있는데, 나는 로컬 빌드로 진행해보았다.  1. Hugo란? 쿠버네티스의 공식문서는 Hugo(확장 버전)라는 정적 사이트 생성기(Static Site Generator)를 이용해 만들어졌다. Hugo는 Jekyll, Hexo등과 마찬가지로 정적 웹사이트를 쉽게 만들 수 있게 해주는 생성기로, Go로 쓰여졌다(깃허브 블로그에 가장 많이 사용되는 Jekyll은 Ruby로 쓰여). 찾아보니 Hugo는 다른 정적 사이트 생성기에 비해 반응속도가…","frontmatter":{"categories":"OSSCA","title":"오픈소스 컨트리뷰션 아카데미(쿠버네티스 한글화) - Hugo를 사용하여 로컬에서 웹사이트 실행하기(MacOS)","date":"July 09, 2022"},"fields":{"slug":"/220709-ossca-kubernetes-hugo-local-build/"}}},{"node":{"id":"1cda5d5d-bffc-5d66-aee4-416c569306b6","excerpt":"💡 MacOS 환경에서 VMware로 Ubuntu를 설치하려면 “VMware Fusion”을 설치해야 한다. 이번 포스팅에서는 VMware Fusion에서 Ubuntu 20.04 버전을 설치해보도록 하겠다. 코딩 강의를 수강하거나 스터디 할 때 실습 환경을 맞춰주기 위해서 우분투를 설치했었는데, 이번에는 Jekyll을 설치하기 위해 우분투 환경을 만들어주게 되었다. 만약 나와 같이 MacOS(Catalina 이상 버전)에서 Jekyll 설치에 실패했던 사람은 Ubuntu 20.04 버전에서 설치 해보는 걸 추천한다. (참고로 Ubuntu 18.04 버전에서는 Jekyll 설치는 가능했었으나 테마 적용에서 버전 이슈가 발생했다.) 그럼 VMware Fusion과 Ubuntu가 무엇인지에 대해 간단하게 살펴본 뒤 두 소프트웨어를 설치해보도록 하자. 1. VMware Fusion이란? VMware Fusion은 VMware사에서 제공하는 MacOS 컴퓨터용 가상머신 소프트웨어이다. 무료…","frontmatter":{"categories":"데브옵스","title":"VMware Fusion에서 Ubuntu 20.04 설치하기","date":"April 16, 2022"},"fields":{"slug":"/220417-etc-vmware-ubuntu/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"박진이","bio":{"role":"데브옵스 엔지니어","description":["사람에 가치를 두는","능동적으로 일하는","이로운 것을 만드는"],"thumbnail":"memoji.gif"},"social":{"github":"https://github.com/jinnypark9393","linkedIn":"https://www.linkedin.com/in/%EC%A7%84%EC%9D%B4-%EB%B0%95-07569118b/","email":"jinnypark9393@gmail.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}