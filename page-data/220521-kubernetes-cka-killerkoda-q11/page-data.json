{"componentChunkName":"component---src-templates-blog-template-js","path":"/220521-kubernetes-cka-killerkoda-q11/","result":{"data":{"cur":{"id":"0ca17556-f057-55d6-b8df-9574437f89a6","html":"<h1 id=\"q11-스케줄링-우선순위priority\" style=\"position:relative;\"><a href=\"#q11-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84priority\" aria-label=\"q11 스케줄링 우선순위priority permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q11. 스케줄링 우선순위(Priority)</h1>\n<p><code class=\"language-text\">management</code> 네임스페이스에서 가장 높은 우선순위를 가진 파드를 찾아 지우자.</p>\n<p><br/><br/></p>\n<h2 id=\"팁\" style=\"position:relative;\"><a href=\"#%ED%8C%81\" aria-label=\"팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팁</h2>\n<p>우선순위(Priority)는 파드 정의에 있는 속성(attribute)이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">k -n management get pod -o yaml</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">controlplane $ k get -n management pod -o yaml <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -i priority -B <span class=\"token number\">20</span>\n    creationTimestamp: <span class=\"token string\">\"2022-05-21T03:45:11Z\"</span>\n    name: runner\n    namespace: management\n    resourceVersion: <span class=\"token string\">\"1386\"</span>\n    uid: 4d8b2e63-83fa-4e56-b14c-8f8f0e12c3cb\n  spec:\n    containers:\n    - image: nginx:1.21.6-alpine\n      imagePullPolicy: IfNotPresent\n      name: pod\n      resources: <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      terminationMessagePath: /dev/termination-log\n      terminationMessagePolicy: File\n      volumeMounts:\n      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n        name: kube-api-access-tn459\n        readOnly: <span class=\"token boolean\">true</span>\n    dnsPolicy: ClusterFirst\n    enableServiceLinks: <span class=\"token boolean\">true</span>\n    nodeName: controlplane\n    preemptionPolicy: PreemptLowerPriority\n    priority: <span class=\"token number\">200000000</span>\n    priorityClassName: level2\n--\n    creationTimestamp: <span class=\"token string\">\"2022-05-21T03:45:11Z\"</span>\n    name: sprinter\n    namespace: management\n    resourceVersion: <span class=\"token string\">\"1385\"</span>\n    uid: 6031417a-18ea-4d07-b3c9-09ded57d7da0\n  spec:\n    containers:\n    - image: nginx:1.21.6-alpine\n      imagePullPolicy: IfNotPresent\n      name: pod\n      resources: <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      terminationMessagePath: /dev/termination-log\n      terminationMessagePolicy: File\n      volumeMounts:\n      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n        name: kube-api-access-khsth\n        readOnly: <span class=\"token boolean\">true</span>\n    dnsPolicy: ClusterFirst\n    enableServiceLinks: <span class=\"token boolean\">true</span>\n    nodeName: controlplane\n    preemptionPolicy: PreemptLowerPriority\n    priority: <span class=\"token number\">300000000</span>\n    priorityClassName: level3\n\ncontrolplane $ k -n management delete pod sprinter\npod <span class=\"token string\">\"sprinter\"</span> deleted</code></pre></div>\n<br/>","excerpt":"Q11. 스케줄링 우선순위(Priority)  네임스페이스에서 가장 높은 우선순위를 가진 파드를 찾아 지우자.  팁 우선순위(Priority)는 파드 정의에 있는 속성(attribute)이다.  해결 방법","frontmatter":{"date":"May 21, 2022","title":"쿠버네티스(Kubernetes) CKA - KillerKoda Q11. Scheduling Priority","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220521-kubernetes-cka-killerkoda-q11/"}},"next":{"id":"8bf27ee8-f904-5433-b3fb-7872ee535830","html":"<h1 id=\"q8-네트워크-폴리시의-네임스페이스-선택\" style=\"position:relative;\"><a href=\"#q8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%8F%B4%EB%A6%AC%EC%8B%9C%EC%9D%98-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A0%ED%83%9D\" aria-label=\"q8 네트워크 폴리시의 네임스페이스 선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q8. 네트워크 폴리시의 네임스페이스 선택</h1>\n<p>네임스페이스 <code class=\"language-text\">space1</code> &#x26; <code class=\"language-text\">space2</code>에 기존 파드들이 존재한다.</p>\n<br/>\n<p>네임스페이스 <code class=\"language-text\">space1</code> 에 있는 모드 파드들이 네임스페이스 <code class=\"language-text\">space2</code> 의 파드들로만 외부로 향하는 트래픽을 보낼 수 있도록 제한하는  <code class=\"language-text\">np</code>라는 이름의 네트워크 폴리시가 필요하다.</p>\n<br/>\n<p>또한 <code class=\"language-text\">np</code> 라는 이름으로 네임스페이스 <code class=\"language-text\">space2</code> 의 파드들이 <code class=\"language-text\">space1</code> 의 파드로부터 들어오는 트래픽만 받도록 설정해야한다.</p>\n<br/>\n<p>네트워크 폴리시는 53포트의 DNS 트래픽과 TCP, UDP 트래픽을 허용해야 한다.</p>\n<p><br/><br/></p>\n<h2 id=\"팁\" style=\"position:relative;\"><a href=\"#%ED%8C%81\" aria-label=\"팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팁</h2>\n<p>학습을 위해 <a href=\"http://editor.cilium.io\">네트워크 폴리시 에디터</a>를 확인해보자.</p>\n<br/>\n<p>네트워크 폴리시의 <code class=\"language-text\">namespaceSelector</code>는 네임스페이스 레이블로 작동한다. 따라서 네임스페이스들의 기존 레이블을 확인하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">k get ns --show-labels</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"해결-방법-파트-1\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-%ED%8C%8C%ED%8A%B8-1\" aria-label=\"해결 방법 파트 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법 파트 1</h2>\n<p>첫번째 네트워크 폴리시를 생성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">apiVersion</span><span class=\"token operator\">:</span> networking<span class=\"token punctuation\">.</span>k8s<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>v1\n<span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> NetworkPolicy\n<span class=\"token literal-property property\">metadata</span><span class=\"token operator\">:</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> np\n  <span class=\"token literal-property property\">namespace</span><span class=\"token operator\">:</span> space1\n<span class=\"token literal-property property\">spec</span><span class=\"token operator\">:</span>\n  <span class=\"token literal-property property\">podSelector</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token literal-property property\">policyTypes</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> Egress\n  <span class=\"token literal-property property\">egress</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> to<span class=\"token operator\">:</span>\n    <span class=\"token operator\">-</span> namespaceSelector<span class=\"token operator\">:</span>\n        <span class=\"token literal-property property\">matchLabels</span><span class=\"token operator\">:</span>\n          kubernetes<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>metadata<span class=\"token punctuation\">.</span>name<span class=\"token operator\">:</span> space2\n  <span class=\"token operator\">-</span> ports<span class=\"token operator\">:</span>\n    <span class=\"token operator\">-</span> port<span class=\"token operator\">:</span> <span class=\"token number\">53</span>\n      <span class=\"token literal-property property\">protocol</span><span class=\"token operator\">:</span> <span class=\"token constant\">TCP</span>\n    <span class=\"token operator\">-</span> port<span class=\"token operator\">:</span> <span class=\"token number\">53</span>\n      <span class=\"token literal-property property\">protocol</span><span class=\"token operator\">:</span> <span class=\"token constant\">UDP</span></code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"해결-방법-파트-2\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-%ED%8C%8C%ED%8A%B8-2\" aria-label=\"해결 방법 파트 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법 파트 2</h2>\n<p>두번째 NP를 생성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token literal-property property\">apiVersion</span><span class=\"token operator\">:</span> networking<span class=\"token punctuation\">.</span>k8s<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>v1\n<span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> NetworkPolicy\n<span class=\"token literal-property property\">metadata</span><span class=\"token operator\">:</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> np\n  <span class=\"token literal-property property\">namespace</span><span class=\"token operator\">:</span> space2\n<span class=\"token literal-property property\">spec</span><span class=\"token operator\">:</span>\n  <span class=\"token literal-property property\">podSelector</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token literal-property property\">policyTypes</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> Ingress\n  <span class=\"token literal-property property\">ingress</span><span class=\"token operator\">:</span>\n  <span class=\"token operator\">-</span> from<span class=\"token operator\">:</span>\n    <span class=\"token operator\">-</span> namespaceSelector<span class=\"token operator\">:</span>\n        <span class=\"token literal-property property\">matchLabels</span><span class=\"token operator\">:</span>\n          kubernetes<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>metadata<span class=\"token punctuation\">.</span>name<span class=\"token operator\">:</span> space1</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"검증\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%A6%9D\" aria-label=\"검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검증</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># 아래가 작동해야 한다\nk <span class=\"token operator\">-</span>n space1 exec app1<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> microservice1<span class=\"token punctuation\">.</span>space2<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\nk <span class=\"token operator\">-</span>n space1 exec app1<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> microservice2<span class=\"token punctuation\">.</span>space2<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\nk <span class=\"token operator\">-</span>n space1 exec app1<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">--</span> nslookup tester<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\nk <span class=\"token operator\">-</span>n kube<span class=\"token operator\">-</span>system exec <span class=\"token operator\">-</span>it validate<span class=\"token operator\">-</span>checker<span class=\"token operator\">-</span>pod <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> app<span class=\"token punctuation\">.</span>space1<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\n\n# 아래는 작동하지 않아야 한다\nk <span class=\"token operator\">-</span>n space1 exec app1<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> tester<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\nk <span class=\"token operator\">-</span>n kube<span class=\"token operator\">-</span>system exec <span class=\"token operator\">-</span>it validate<span class=\"token operator\">-</span>checker<span class=\"token operator\">-</span>pod <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> microservice1<span class=\"token punctuation\">.</span>space2<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\nk <span class=\"token operator\">-</span>n kube<span class=\"token operator\">-</span>system exec <span class=\"token operator\">-</span>it validate<span class=\"token operator\">-</span>checker<span class=\"token operator\">-</span>pod <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> microservice2<span class=\"token punctuation\">.</span>space2<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\nk <span class=\"token operator\">-</span>n run nginx <span class=\"token operator\">--</span>image<span class=\"token operator\">=</span>nginx<span class=\"token operator\">:</span><span class=\"token number\">1.21</span><span class=\"token number\">.5</span><span class=\"token operator\">-</span>alpine <span class=\"token operator\">--</span>restart<span class=\"token operator\">=</span>Never <span class=\"token operator\">-</span>i <span class=\"token operator\">--</span>rm <span class=\"token operator\">--</span> curl <span class=\"token operator\">-</span>m <span class=\"token number\">1</span> microservice1<span class=\"token punctuation\">.</span>space2<span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local\n</code></pre></div>\n<br/>","frontmatter":{"date":"May 21, 2022","title":"쿠버네티스(Kubernetes) CKA - KillerKoda Q8. NetworkPolicy","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220521-kubernetes-cka-killerkoda-q08/"}},"prev":{"id":"1d5c3f0f-6e96-5e9b-b821-77a2493ef69e","html":"<p>오늘도 어제에 이어서 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 12-2. 블로그 프로젝트 - 게시물 클래스 구현을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-05-22-Python-Photo/2022-05-22-Python-Photo1.jpg\" alt=\"2022-05-22-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-05-22-Python-Photo/2022-05-22-Python-Photo2.jpg\" alt=\"2022-05-22-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"01-클래스-구현\" style=\"position:relative;\"><a href=\"#01-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84\" aria-label=\"01 클래스 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 클래스 구현</h1>\n<h2 id=\"1-프로젝트-설계하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0\" aria-label=\"1 프로젝트 설계하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로젝트 설계하기</h2>\n<ul>\n<li>\n<p>클래스 설계하기: 어떤 것을 클래스로 만들 지 생각해보자.</p>\n<ul>\n<li>프로그램 기능\n<ul>\n<li>게시글 로딩</li>\n<li>메뉴 출력</li>\n<li>게시글 쓰기</li>\n<li>게시글 목록 확인:</li>\n<li>게시글 상세 확인: 글번호, 제목, 본문 내용, 조회수 등의 데이터가 필요</li>\n<li>게시글 수정</li>\n<li>게시글 삭제</li>\n<li>게시글 저장</li>\n</ul>\n⇒ 공통적으로 <strong>게시글</strong>을 가지고 있다.</li>\n</ul>\n  <br/>\n<ul>\n<li>게시글의 요소\n<ul>\n<li>글 번호</li>\n<li>제목</li>\n<li>본문 내용</li>\n<li>조회수</li>\n</ul>\n⇒ 게시글 내에 여러 데이터들이 포함되어있다: <strong>클래스</strong>로 만들면 편리</li>\n</ul>\n  <br/>\n<h3 id=\"클래스-설계\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A4%EA%B3%84\" aria-label=\"클래스 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[클래스 설계]</h3>\n<ul>\n<li>게시글을 어떻게 클래스로 만들까?</li>\n<li>게시물 클래스: “Post”라고 이름 붙이자.\n<ul>\n<li>속성\n<ul>\n<li>글번호</li>\n<li>제목</li>\n<li>본문</li>\n<li>조회수</li>\n</ul>\n</li>\n<li>메서드\n<ul>\n<li>게시물 수정하기</li>\n<li>조회수 증가하기</li>\n<li>속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"2-실습클래스-구현\" style=\"position:relative;\"><a href=\"#2-%EC%8B%A4%EC%8A%B5%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84\" aria-label=\"2 실습클래스 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 실습(클래스 구현)</h2>\n<ul>\n<li>위에서 설계한 대로 클래스를 구현해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\"\"\"</code> (docstring): 클래스 혹은 메서드(함수)에 대한 설명을 기재한 주석이다.</li>\n</ul>\n<br/>\n<ul>\n<li>인스턴스를 생성해서 위에서 정의한 클래스와 메서드가 잘 동작하는지 확인하자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span>\n    post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트\"</span>, <span class=\"token string\">\"테스트입니다\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{post.get_id()} {post.get_title()} {post.get_content()} {post.get_view_count()}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents/python_basic/my\nvenv/bin/python /Users/usr/Documents/python_basic/myvenv/Chap\nter12/post.py\n<span class=\"token number\">1</span> 테스트 테스트입니다 <span class=\"token number\">0</span></code></pre></div>\n<br/>\n<ul>\n<li>나중에 게시글 수정에 쓰일 메서드인 set_post를 테스트해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span>\n    post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트\"</span>, <span class=\"token string\">\"테스트입니다\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    post.set_post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트2\"</span>, <span class=\"token string\">\"테스트입니다2\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{post.get_id()} {post.get_title()} {post.get_content()} {post.get_view_count()}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/jinipark/Documents/python_basic/my\nvenv/bin/python /Users/jinipark/Documents/python_basic/myvenv/Chap\nter12/post.py\n<span class=\"token number\">1</span> 테스트2 테스트입니다2 <span class=\"token number\">0</span></code></pre></div>\n<br/>\n<ul>\n<li>add_view_count 함수를 호출해서 조회수가 늘어나는지 테스트해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span>\n    post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트\"</span>, <span class=\"token string\">\"테스트입니다\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># post.set_post(1, \"테스트2\", \"테스트입니다2\", 0)</span>\n    post.add_view_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{post.get_id()} {post.get_title()} {post.get_content()} {post.get_view_count()}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents/python_basic/my\nvenv/bin/python /Users/usr/Documents/python_basic/myvenv/Chap\nter12/post.py\n<span class=\"token number\">1</span> 테스트 테스트입니다 <span class=\"token number\">1</span></code></pre></div>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 블로그의 게시물 클래스를 구현해보았다. 다음 포스팅에서는 게시물 로딩 동작을 구현하도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","frontmatter":{"date":"May 22, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 35일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220522-python-day35/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220521-kubernetes-cka-killerkoda-q11/","nextSlug":"/220521-kubernetes-cka-killerkoda-q08/","prevSlug":"/220522-python-day35/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}