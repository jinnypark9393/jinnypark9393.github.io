{"componentChunkName":"component---src-templates-blog-template-js","path":"/221212-etc-chrome-screenshot/","result":{"data":{"cur":{"id":"a724a556-6b02-5c8b-ba85-4543b0520906","html":"<p>MacOS에서는 기본적으로 ⌘ + ⇧ + 4 등의 단축키를 이용해 캡처를 할 수 있지만, 스크롤이 있는 페이지의 경우에는 전체 스크롤을 캡처하기가 어렵다.</p>\n<br/>\n<p>하지만 캡처 대상이 Chrome 브라우저일 경우에는 Chrome 브라우저에서 제공하는 스크린 샷 기능을 활용해 웹사이트의 전체 스크롤 혹은 특정 컴포넌트를 캡처할 수 있다.</p>\n<ol>\n<li>해당하는 웹페이지로 이동 후 F12키를 누르거나,  해당 웹페이지 빈 곳 우클릭 후 검사(Inspect) 클릭( ⌥+⌘+I)</li>\n<li>개발자 도구가 열리면 Console 탭으로 이동한 뒤, ⌘ + ⇧ + P 단축키를 눌러 명령 메뉴를 연다. 명령 메뉴에 screenshot을 검색해서 <code class=\"language-text\">Capture full size screenshot</code>을 클릭하면 PNG파일로 저장된다.</li>\n</ol>\n<br/>\n<p>웹페이지의 특정 컴포넌트만 캡처하고 싶은 경우,</p>\n<ol>\n<li>해당하는 웹페이지로 이동 후 F12키를 누르거나,  해당 웹페이지 빈 곳 우클릭 후 검사(Inspect) 클릭( ⌥+⌘+I)</li>\n<li>Element 탭에서 캡처를 원하는 태그를 우클릭 후 <code class=\"language-text\">Capture node screenshot</code> 을 클릭하면 PNG파일로 저장된다.</li>\n</ol>\n<br/>","excerpt":"MacOS에서는 기본적으로 ⌘ + ⇧ + 4 등의 단축키를 이용해 캡처를 할 수 있지만, 스크롤이 있는 페이지의 경우에는 전체 스크롤을 캡처하기가 어렵다. 하지만 캡처 대상이 Chrome 브라우저일 경우에는 Chrome 브라우저에서 제공하는 스크린 샷 기능을 활용해 웹사이트의 전체 스크롤 혹은 특정 컴포넌트를 캡처할 수 있다. 해당하는 웹페이지로 이동 후 F12키를 누르거나,  해당 웹페이지 빈 곳 우클릭 후 검사(Inspect) 클릭( ⌥+⌘+I) 개발자 도구가 열리면 Console 탭으로 이동한 뒤, ⌘ + ⇧ + P 단축키를 눌러 명령 메뉴를 연다. 명령 메뉴에 screenshot을 검색해서 을 클릭하면 PNG파일로 저장된다. 웹페이지의 특정 컴포넌트만 캡처하고 싶은 경우, 해당하는 웹페이지로 이동 후 F12키를 누르거나,  해당 웹페이지 빈 곳 우클릭 후 검사(Inspect) 클릭( ⌥+⌘+I) Element 탭에서 캡처를 원하는 태그를 우클릭 후  을 클릭하면 PNG파일로…","frontmatter":{"date":"December 12, 2022","title":"Chrome 브라우저 창 전체 스크롤/특정 컴포넌트만 스크린샷하기(크롬 개발자도구 활용)","categories":"etc","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221212-etc-chrome-screenshot/"}},"next":{"id":"d6563d21-0205-5baf-a3b2-4c1369450301","html":"<h1 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h1>\n<p>회사 과제 진행하느라 급히(?) Node.js + express를 배워서 웹 앱을 작성하는 중인데, Node.js를 처음 다루다보니 빌드 &#x26; 배포 방법을 처음으로 알게되어 기록용으로 남겨둔다.</p>\n<br/>\n<h1 id=\"2-pkg-모듈-다운로드--packagejson-설정\" style=\"position:relative;\"><a href=\"#2-pkg-%EB%AA%A8%EB%93%88-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C--packagejson-%EC%84%A4%EC%A0%95\" aria-label=\"2 pkg 모듈 다운로드  packagejson 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. pkg 모듈 다운로드 &#x26; package.json 설정</h1>\n<p>이전 회사에서 진행했던 Java 프로젝트의 경우에는 빌드 도구로 Ant와 Maven으로 빌드를 했었는데(그런데 요즘에는 Gradle &#x26; Maven을 많이 쓰고 Ant는 거의 쓰지 않는다고 한다. 어쩐지 처음 프로젝트 시작할 때 Ant 빌드 방법을 아무리 구글링 해도 옛날 자료밖에 안나오더라….눈물), node프로젝트는 pkg 모듈로 빌드 &#x26; 실행파일 생성을 진행할 수 있다고 한다.</p>\n<br/>\n<p>먼저 pkg 모듈을 사용하기 위해 npm으로 pkg 모듈을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev pkg</code></pre></div>\n<p>pkg는 빌드용 모듈이기 때문에 <code class=\"language-text\">--save-dev</code> 옵션을 주어 <code class=\"language-text\">devDependencies</code> 로 추가한다.</p>\n<br/>\n<p>설치가 완료되면 package.json 파일에 아래와 같이 pkg모듈이 <code class=\"language-text\">devDependencies</code> 에 추가된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  <span class=\"token string\">\"devDependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"pkg\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^5.8.0\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>다음으로는 어떤 파일을 실행파일에 추가할지, 타겟 플랫폼은 무엇인지 package.json에 설정 해주어야 한다.</p>\n<br/>\n<p>package.json 파일의 scripts에 build 명령어를 정의해준다. scripts에 명령어를 정의해주면 <code class=\"language-text\">npm run [정의한 명령어]</code> 로 명령어를 실행할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"init\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"rm ./bin/*\"</span>,\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodemon ./bin/www\"</span>,\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>,\n    <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"npm run init &amp;&amp; pkg . --out-path bin\"</span>\n  <span class=\"token punctuation\">}</span>,</code></pre></div>\n<p>빌드를 진행하려면 기본적으로 <code class=\"language-text\">pkg .</code> 명령어만 입력하면 빌드가 진행된다. 하지만 나는 <code class=\"language-text\">--out-path</code> 로 빌드 결과물이 저장될 디렉토리를 지정하고, <code class=\"language-text\">\"init\"</code> 명령어를 추가해 <code class=\"language-text\">pkg .</code> 명령어를 통해 빌드 수행을 하기 전 이전 빌드로 생성된 결과물을 삭제(<code class=\"language-text\">rm ./bin/*</code>)해서 빌드 폴더를 초기화해주는 작업을 추가로 지정하였다.</p>\n<br/>\n<p>다음은 package.json 파일에 pkg를 추가해 pkg 명령어를 실행할 때 전달할 옵션값들을 정의해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"pkg\"</span>:<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"./server.js\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"assets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"views/**/*\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"targets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node18-linux-x64\"</span>,\n      <span class=\"token string\">\"node18-macos-x64\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>,</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\"scripts\"</code> (위에서 정의했던 scripts와는 다름): 바이너리로 컴파일할 js파일들의 경로를 지정해준다. 내가 만든 프로젝트는 매우 간단하게 작성한 express 프로젝트였기 때문에 root경로에 있는 server.js 파일만 지정해주었다.</li>\n<li><code class=\"language-text\">\"assets\"</code> : ejs 등 컴파일은 불필요하지만 실행파일에 포함되어야하는 파일들을 정의해준다. 나는 ejs 파일들이 저장되어있는 views 디렉터리를 지정해주었다.</li>\n<li><code class=\"language-text\">\"targets\"</code> : 타겟 플랫폼을 지정하는 옵션이다. 아무것도 지정하지 않으면 windows, linux, macos 세 개의 실행파일이 저장된다. 나는 AWS 서버 위에 올릴 linux 외에 로컬에서 실행 테스트를 하기 위해 macos로도 실행파일을 생성하도록 지정하였다. 참고로 <code class=\"language-text\">node</code> 뒤에 있는 숫자는 사용할 노드 버전이며, 현재 사용하고 있는 노드 버전을 <code class=\"language-text\">node -v</code> 로 확인하여 지정해주면 된다.</li>\n</ul>\n<br/>\n<p>설정이 완료되면 아래 명령어를 실행해 실행 파일을 만들고, 만들어진 파일을 열어서 실행에 문제가 없는지 확인해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p>이렇게 빌드를 완료하게 되면 Linux에서 다른 의존성 없이도 node.js 프로젝트를 실행할 수 있다.</p>\n<br/>\n<p>이렇게 작성한 전체 package.json 파일은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"anyshopping\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"This is e-commerse website for Anycompany\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"server.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"init\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"rm ./bin/*\"</span>,\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodemon ./server.js\"</span>,\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>,\n    <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"npm run init &amp;&amp; pkg . --out-path bin\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>,\n  <span class=\"token string\">\"bin\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"./server.js\"</span>,\n  <span class=\"token string\">\"pkg\"</span>:<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"./server.js\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"assets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"views/**/*\"</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"targets\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node18-linux-x64\"</span>,\n      <span class=\"token string\">\"node18-macos-x64\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"dotenv\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^16.0.3\"</span>,\n    <span class=\"token string\">\"ejs\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^3.1.8\"</span>,\n    <span class=\"token string\">\"express\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^4.18.2\"</span>,\n    <span class=\"token string\">\"mysql\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^2.18.1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"devDependencies\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"pkg\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"^5.8.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>","frontmatter":{"date":"December 11, 2022","title":"Node.js 프로젝트 pkg 모듈로 빌드하기","categories":"프로그래밍","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221211-progrmming-javascript-nodejs-\bpkg-build/"}},"prev":{"id":"b92fbf26-e7a1-56cb-ac11-adcab732c949","html":"<h1 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h1>\n<p>Node.js 프로젝트를 진행하다가 package.json에 npm 명령어를 정의해주고 있었는데, 초기에 빌드 아웃풋 폴더 내의 파일을 삭제한 뒤에 빌드를 실행하도록 명령어를 아래와 같이 지정해주었었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"init\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"rm ./bin/*\"</span>,\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodemon ./server.js\"</span>,\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>,\n    <span class=\"token string\">\"build\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"npm run init; &amp;&amp; pkg . --out-path bin\"</span>\n  <span class=\"token punctuation\">}</span>,</code></pre></div>\n<br/>\n<p>하지만 bin에 아무 파일이 없는 상태에서 실행하니 아래와 같은 에러가 발생해서 다중 명령어를 <code class=\"language-text\">&amp;&amp;</code> 에서 <code class=\"language-text\">;</code> 로 고쳐주었다(뭔가 init쪽 명령어를 고쳐주는 게 좋을 것 같은데 나중에 더 찾아보기로).</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">rm: ./bin/*: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<br/>\n<h1 id=\"2-리눅스linux-다중-명령어-차이\" style=\"position:relative;\"><a href=\"#2-%EB%A6%AC%EB%88%85%EC%8A%A4linux-%EB%8B%A4%EC%A4%91-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%B0%A8%EC%9D%B4\" aria-label=\"2 리눅스linux 다중 명령어 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 리눅스(Linux) 다중 명령어 차이</h1>\n<p>리눅스 쉘에서 다중 명령어를 사용하면 하나의 라인에서 여러 명령어를 실행할 수 가 있는데, 다중 명령어를 실행하는 <code class=\"language-text\">;</code> , <code class=\"language-text\">&amp;&amp;</code> , <code class=\"language-text\">||</code> 세 명령어 사이에 차이가 있어 정리해두려 한다.</p>\n<ol>\n<li>\n<p>세미콜론(<code class=\"language-text\">;</code>)</p>\n<p>선행 명령어의 성공, 실패 여부와 관계 없이 모든 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ 명령1<span class=\"token punctuation\">;</span> 명령2<span class=\"token punctuation\">;</span> 명령3<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<ul>\n<li>명령 2이 실패하더라도 명령 3이후의 명령어가 실행된다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p>엠퍼센트(<code class=\"language-text\">&amp;&amp;</code>)</p>\n<p>앞에서부터 순차적으로 실행 되고, 선행 명령어가 <strong>실패</strong>할 경우, 뒤의 명령어를 실행하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ 명령1 <span class=\"token operator\">&amp;&amp;</span> 명령2 <span class=\"token operator\">&amp;&amp;</span> 명령3 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<ul>\n<li>명령 2가 실패할 경우 명령 3 이후는 실행되지 않는다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>\n<p>더블 버티컬바(<code class=\"language-text\">||</code>)</p>\n<p>앞에서부터 명령어가 순차적으로 실행되고, 선행 명령어가 <strong>성공</strong>할 경우, 뒤의 명령어를 실행하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ 명령1 <span class=\"token operator\">||</span> 명령2 <span class=\"token operator\">||</span> 명령3 <span class=\"token operator\">||</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<ul>\n<li>명령 2가 성공할 경우 명령 3 이후는 실행되지 않는다.</li>\n</ul>\n</li>\n</ol>\n<br/>","frontmatter":{"date":"December 13, 2022","title":"리눅스(Linux) 다중 명령어(;, &&, ||)","categories":"devops","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221213-devops-linux-\bchaining-operator/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/221212-etc-chrome-screenshot/","nextSlug":"/221211-progrmming-javascript-nodejs-\bpkg-build/","prevSlug":"/221213-devops-linux-\bchaining-operator/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}