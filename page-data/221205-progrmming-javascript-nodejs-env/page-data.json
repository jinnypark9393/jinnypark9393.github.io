{"componentChunkName":"component---src-templates-blog-template-js","path":"/221205-progrmming-javascript-nodejs-env/","result":{"data":{"cur":{"id":"3209300a-206d-55f9-acb9-a3d29bb67798","html":"<h1 id=\"1-배경상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD%EC%83%81%ED%99%A9\" aria-label=\"1 배경상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경상황</h1>\n<p>급하게 FE+BE가 간단하게 구성된 데모 사이트를 만들어야 할 일이 생겨서 Node.js + Express 프레임워크로 웹사이트를 작성하던 도중 환경 변수 파일 분리가 필요해서 기록용으로 남겨본다.</p>\n<br/>\n<p>이전에 <a href=\"https://jinnypark9393.github.io/220725-programming-python-django-tutorial2%20copy/\">Django 의 SECRET_KEY를 별도 파일로 분리 저장하는 포스팅</a>을 올린 적이 있는데, 이번에는 해당 포스팅의 Node.js 버전이라고 보면 될 듯.</p>\n<br/>\n<h1 id=\"2-nodejs-프로젝트에서-환경변수-관리하기파일로-분리\" style=\"position:relative;\"><a href=\"#2-nodejs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC\" aria-label=\"2 nodejs 프로젝트에서 환경변수 관리하기파일로 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Node.js 프로젝트에서 환경변수 관리하기(파일로 분리)</h1>\n<ul>\n<li>server.js 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> db<span class=\"token punctuation\">;</span>\nMongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb+srv://blablabla'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> client</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on 8080'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>\n<p>여기서 포트번호, DB접속 문자열은 환경에 따라 가변적인 변수, 즉 <strong>환경변수(environment variable)</strong></p>\n<p>⇒ 다른 개발 환경에서는 수정이 필요할 수 있음 = <strong>한 곳에 모아서 관리하자!</strong></p>\n<ul>\n<li>다른 컴퓨터에서 다른 포트 사용</li>\n<li>DB 이사가서 DB 접속 문자열 면경</li>\n<li>내가 만든 코드를 팀원과 공유할 때 유출 위험</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>환경 변수 사용을 위한 라이브러리 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">➜  todoapp git:(master) ✗ npm install dotenv                                 \n\nadded 1 package, and audited 179 packages in 636ms\n\n14 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>server.js 파일 상단에 아래 코드 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 환경변수 설정용 라이브러리 설정</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>server.js와 같은 경로에 .env파일 추가 &#x26; 환경변수들을 적고 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PORT=8081\nDB_URL=\"mongodb+srv://blablabla\"</code></pre></div>\n<ul>\n<li>변수 이름은 일반적으로 대문자료 표기한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>환경변수를 server.js에 불러오기\n<ul>\n<li>\n<p>process.env.변수명 형식으로 불러오면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> db<span class=\"token punctuation\">;</span>\nMongoClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>procss<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_URL</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> client</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  db <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>procss<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on 8080'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br/>","excerpt":"1. 배경상황 급하게 FE+BE가 간단하게 구성된 데모 사이트를 만들어야 할 일이 생겨서 Node.js + Express 프레임워크로 웹사이트를 작성하던 도중 환경 변수 파일 분리가 필요해서 기록용으로 남겨본다. 이전에 Django 의 SECRET_KEY를 별도 파일로 분리 저장하는 포스팅을 올린 적이 있는데, 이번에는 해당 포스팅의 Node.js 버전이라고 보면 될 듯. 2. Node.js 프로젝트에서 환경변수 관리하기(파일로 분리) server.js 코드 여기서 포트번호, DB접속 문자열은 환경에 따라 가변적인 변수, 즉 환경변수(environment variable) ⇒ 다른 개발 환경에서는 수정이 필요할 수 있음 = 한 곳에 모아서 관리하자! 다른 컴퓨터에서 다른 포트 사용 DB 이사가서 DB 접속 문자열 면경 내가 만든 코드를 팀원과 공유할 때 유출 위험 환경 변수 사용을 위한 라이브러리 설치 server.js 파일 상단에 아래 코드 추가 server.js와 같은 경로에 …","frontmatter":{"date":"December 05, 2022","title":"Node.js 프로젝트에서 환경변수 관리하기(파일로 분리)","categories":"프로그래밍","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/221205-progrmming-javascript-nodejs-env/"}},"next":{"id":"baac8926-7d5e-5e70-b7f5-d78b71c5b112","html":"<h1 id=\"python-django장고란\" style=\"position:relative;\"><a href=\"#python-django%EC%9E%A5%EA%B3%A0%EB%9E%80\" aria-label=\"python django장고란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Django(장고)란?</h1>\n<h2 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h2>\n<p>이전 회사 팀분들과 토이프로젝트를 진행하려 하는데, 나는 이번 프로젝트에서 다른 팀원분과 함께 백엔드를 맡게 되었다. 우연찮게도 백엔드를 담당하게 된 두 명 모두 제일 많이 다뤄 본 언어가 Python이라 자연스럽게(?) Django를 선택하게 되었다.</p>\n<br/>\n<h2 id=\"2-django란\" style=\"position:relative;\"><a href=\"#2-django%EB%9E%80\" aria-label=\"2 django란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Django란?</h2>\n<ul>\n<li>Django Official Website: <a href=\"https://www.djangoproject.com/\">https://www.djangoproject.com/</a></li>\n<li>보안이 우수하고 유지보수가 편리한 웹사이트를 신속하게 개발하는 하도록 도움을 주는 파이썬 웹 프레임워크\n<ul>\n<li>개발자의 보안 실수 방지 (SQL Injection, Cross-site scripting, Cross-site request forgery, Clickjaking 등)</li>\n<li>일반적인 웹 개발 작업을 처리하는 데 필요한 추가 기능이 미리 포함 (User Authentication, Content Administration, Site Maps, RSS feeds 등)</li>\n</ul>\n</li>\n<li>무료 오픈소스 프로젝트로 파이썬 기반의 웹 애플리케이션 프레임워크 중 커뮤니티가 활성화 되어있는 편</li>\n<li>다양한 클라이언트측 프레임워크와 호환 가능(예: React 등)</li>\n<li>대부분의 형식(HTML, RSS 피드, JSON, XML 등)의 컨텐츠 전송 가능</li>\n</ul>\n<br/>\n<h2 id=\"3-django의-특징\" style=\"position:relative;\"><a href=\"#3-django%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"3 django의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Django의 특징</h2>\n<ul>\n<li>웹 개발시 필요한 번거로운 요소들을 직접 새로 개발할 필요 없이, 내장된 기능을 활용해 빠르게 개발 할 수 있다.</li>\n<li>MVT 패턴을 따름(Model, View, Template): MVC(Model, View, Controller)소프트웨어 디자인 패턴의 일종</li>\n<li>파이썬 언어를 기반으로 하고 있어 상대적으로 느린 편</li>\n<li>MSA로의 전환이 까다로움(*Need more investigation: 구글링 등으로 확인된 정보 아님)</li>\n<li>Django를 이용해 개발된 사이트\n<ul>\n<li>인스타그램(instagram)</li>\n<li>빗버킷(BitBucket)</li>\n<li>디스커스(Disqus)</li>\n<li>모질라(Mozilla)</li>\n<li>에이블리</li>\n<li>요기요</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"4-django의-구조\" style=\"position:relative;\"><a href=\"#4-django%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"4 django의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Django의 구조</h2>\n<ul>\n<li>\n<p>Django는 Model, View, Template이라는 세 가지 구조로 이루어진 MVT 패턴을 채택하고 있다.</p>\n</li>\n<li>\n<p>MVT패턴은 MVC(Model, View, Controller)소프트웨어 디자인 패턴의 일종</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MVC 패턴</th>\n<th>MVT 패턴</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>앱을 구성하는 데이터 담당 기능</td>\n<td>Model</td>\n<td>Model</td>\n</tr>\n<tr>\n<td>유저에게 데이터 보여주는 방식 담당 기능</td>\n<td>View</td>\n<td>Template</td>\n</tr>\n<tr>\n<td>유저의 입력을 처리하는 로직 담당 기능</td>\n<td>Controller</td>\n<td>View</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>MVT 파일에 대한 정의는 <code class=\"language-text\">settings.py</code> 에서 찾아볼 수 있다.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h3>\n<ul>\n<li><strong>데이터</strong>를 다루는 영역(CRUD 처리)\n<ul>\n<li>settings.py의 <code class=\"language-text\">DATABASES</code> 에 데이터베이스 연동정보가 저장되어 있다.</li>\n</ul>\n</li>\n<li>데이터베이스에 적용될 모델(Model)을 설계\n<ul>\n<li>프로젝트의 각 App의 model.py 파일 안에 클래스 형태로 정의</li>\n<li>DB관련 설정은 settings.py의 DATABASES 항목에서 설정(Default: SQLite)</li>\n</ul>\n</li>\n<li>SQL문 대신 **ORM(Object Relation Mapping)**방식을 통해 DB에 접근\n<ul>\n<li>Java의 JPA와 유사</li>\n<li>데이터베이스 테이블을 model.py의 클래스와 매핑</li>\n<li>테이블에 대한 CRUD기능을 class 객체에 대해 수행 → Django에서 내부적으로 DB에 반영하게 됨\n<ul>\n<li>하나의 모델 클래스는 하나의 DB 테이블과 대응</li>\n<li>모델 클래스의 모든 Attribute는 각각 DB 필드가 됨</li>\n<li>모델의 구현 사항 변경 내역을 반영해 DB 스키마를 변경시키는 migration 기능 제공</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h3>\n<ul>\n<li>웹 어플리케이션 상에서 데이터들이 처리되는 <strong>로직</strong> 담당(HTTP 요청을 수신하고 HTTP 응답을 반환하는 요청 처리)</li>\n<li>크게 2개 파트로 구성\n<ol>\n<li>요청의 URL을 보고 대응하는 파이썬 함수로 routing하는 <strong>URL dispatcher(url.py파일)</strong>\n<ul>\n<li>settings.py의 <code class=\"language-text\">ROOT_URLCONF</code> 에 Root URL 정보가 정의되어있다.</li>\n<li>위에서 정의된 파일에서 Django가 <code class=\"language-text\">urlpatterns</code> 라는 변수명을 가진 리스트 탐색</li>\n<li>해당 리스트에 순서대로 정의된 패턴 중, 가장 먼저 매치된 패턴에 따라 매핑된 <code class=\"language-text\">View function</code>으로 라우팅</li>\n</ul>\n</li>\n<li>URL dispatcher를 거쳐 넘어온 요청을 처리하는 파이썬 함수들(<strong>View function</strong>)\n<ul>\n<li>HTTP 요청을 받음 → 모델에 들어있는 데이터를 조회 → 필요 시 가공 → 결과를 HTTP 응답 형태로 유저에게 전달</li>\n<li>View Function 호출 우선 순위\n<ul>\n<li>Django의 <a href=\"https://docs.djangoproject.com/en/4.0/ref/request-response/#django.http.HttpRequest\">HttpRequest</a> 객체</li>\n<li>URLconf에 패턴 정의한 대로 요청 URL로부터 capture된 문자열들 → 함수 내부에서 사용할 인자를 유저가 요청 URL에 포함하도록 할 수 있음</li>\n</ul>\n</li>\n<li>Response → <a href=\"https://docs.djangoproject.com/en/4.0/ref/request-response/#django.http.HttpResponse\">HttpResponse</a> 타입 객체로만 리턴</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<br/>\n<h3 id=\"template\" style=\"position:relative;\"><a href=\"#template\" aria-label=\"template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template</h3>\n<ul>\n<li>웹페이지에서 사용자가 보게 될 페이지의 모습을 구성(파일의 구조 정의)</li>\n<li>HTML, CSS, Javascript 등을 이용한 클라이언트 웹페이지를 작성 (<strong>View</strong>에서 이 <strong>Template</strong>을 사용해 동적으로 웹 페이지(예: HTML 페이지)를 생성하고 <strong>Model</strong>에서 가져온 데이터로 채움)</li>\n<li>동적인 부분(요청 처리 결과에 따라 변경)과 정적인 부분(요청 처리 결과와 상관없이 변경되지 않음)을 구분해 Django template을 미리 작성\n<ul>\n<li>Template: 문서 파일 혹은 파이썬 문자열 형태</li>\n<li>유저에 보여줄 때 동적으로 처리할 부분은 Django template language(<a href=\"https://docs.djangoproject.com/en/4.0/topics/templates/#the-django-template-language\">DTL</a>)를 사용하며, 코드에 명시된 DTL 문법에 따라 요청 처리 결과를 가공해 채워넣게 됨</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"기타-주요-요소들\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A3%BC%EC%9A%94-%EC%9A%94%EC%86%8C%EB%93%A4\" aria-label=\"기타 주요 요소들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 주요 요소들</h3>\n<ul>\n<li><strong>Forms</strong>\n<ul>\n<li>일단 웹 서비스는 <strong>화면을 통해 유저로부터 다양한 형태의 입력</strong>을 받을 필요가 있음(회원가입, 로그인, 검색 등)</li>\n<li>따라서 HTML에는 해당 기능을 위한 <code class=\"language-text\">&lt;form>...&lt;/form></code> 태그가 있음 (<strong>HTML Form</strong>)\n<ul>\n<li>form 태그 아래에서 입력이 어떤 타입의 데이터인지, 어떤 HTTP 메소드를 사용할지, 입력 데이터를 보낼 URL 등을 결정</li>\n<li>form을 통해 <strong>선택 가능한 HTTP 메소드는 시스템의 상태를 바꾸는 POST, 조회 목적의 GET</strong> 두 개</li>\n</ul>\n</li>\n<li>정리하자면 HTML Form은 유저가 GUI(웹 화면)를 통해 특정한 형태의 HTTP 요청을 서버에 쉽게 보낼 수 있도록 도와줌</li>\n<li>쟝고의 Form은…\n<ul>\n<li>입력을 위한 <strong>HTML Form을 자동으로 생성</strong></li>\n<li><strong>입력 값에 대한 유효성 검증</strong> 수행 (Validation)</li>\n</ul>\n</li>\n<li>쟝고의 기본 <a href=\"https://docs.djangoproject.com/en/4.0/ref/forms/api/#django.forms.Form\">Form</a> 클래스를 상속받아 커스텀 클래스를 정의하고 이를 View function 안에서 들어온 HTTP 메소드에 따라 분기해서 사용하는 방식\n<ol>\n<li><strong>GET</strong> 요청으로 URL 접근 시 <strong>HTML Form 생성</strong>해서 그려주고</li>\n<li><strong>POST</strong> 요청으로 <strong>입력 데이터 넘겼을 시 처리해서 결과</strong> 보여주는 방식</li>\n</ol>\n</li>\n<li>유효성 검증 완료된 값은 <code class=\"language-text\">Form</code> 객체 안의 딕셔너리 타입 <code class=\"language-text\">cleaned_data</code> 어트리뷰트를 통해 접근 가능</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><strong>django-admin &#x26; manage.py</strong>\n<ul>\n<li>django-admin: 쟝고의 프로젝트 관리용 CLI 도구</li>\n<li>manage.py\n<ul>\n<li>쟝고 프로젝트 생성 시 아래에 자동으로 생성되는 파이썬 모듈</li>\n<li>django-admin과 같은 역할을 하고 그에 더해 프로젝트 내부에서 사용할 설정 파일을 지정하는 <code class=\"language-text\">DJANGO_SETTINGS_MODULE</code> 환경변수 세팅까지 함</li>\n<li>프로젝트의 설정 파일 지정까지 하기 때문에 하나의 쟝고 프로젝트에서 작업할 땐 manage.py 사용 권장</li>\n</ul>\n</li>\n<li>기본 용법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ django-admin &lt;command> [options]\n    $ manage.py &lt;command> [options]\n    $ python -m django &lt;command> [options]</code></pre></div>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 주요 작업\n    - 모델 migration\n        1. 모델 코드 수정\n        2. migration 파일 생성`django-admin makemigrations &lt;app_name>`\n        3. DB에 migrate`django-admin migrate &lt;app_name> &lt;migration_name>`\n    - 서버 실행`django-admin runserver [addrport]`ex) `django-admin runserver localhost:8000`\n    - 쟝고 쉘 실행`django-admin shell --interface {ipython,bpython,python}`현재 쟝고 프로젝트 내부에서 작업할 수 있는 대화형 파이썬 쉘을 여는 명령\n    - 쟝고 프로젝트 생성`django-admin startproject name [directory]`디렉토리 아래에 manage.py 모듈과 프로젝트 패키지(기본 설정 파일인 settings.py 포함)가 생성됨\n    - 쟝고 앱 생성`django-admin startapp name [directory]`반복되는 기능을 모아 정의할 수 있는 최소 단위의 **쟝고 앱** 패키지를 생성하는 명령디렉토리 아래에 빈 models.py를 포함해 쟝고 앱을 제작할 수 있는 기본 얼개가 만들어짐\n    - superuser 생성`django-admin createsuperuseris_staff` 속성이 `True`인 admin 사이트에 접근할 수 있는 관리자 계정을 만드는 명령</code></pre></div>\n<br/>\n<ul>\n<li><strong>Settings</strong>\n<ul>\n<li>쟝고에서는 프로젝트와 관련된 다양한 설정 사항을 파이썬 모듈에 기록해 관리</li>\n<li>터미널의 <code class=\"language-text\">DJANGO_SETTINGS_MODULE</code> 환경변수로 어떤 파이썬 모듈을 설정 파일로 사용할지 지정\n<ul>\n<li><code class=\"language-text\">django-admin runserver</code> 명령 시 <code class=\"language-text\">-settings</code> 옵션을 통해서도 파이썬 모듈 경로 전달 가능</li>\n</ul>\n</li>\n<li>주요 설정 변수\n<ul>\n<li><code class=\"language-text\">INSTALLED_APPS</code>\n<ul>\n<li>해당 쟝고 프로젝트에서 사용하는 쟝고 앱을 모두 나열한 리스트</li>\n<li>서드파티 앱을 설치하거나 앱을 직접 구현했을 때 추가해줘야 함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ALLOWED_HOSTS</code>\n<ul>\n<li>해당 쟝고 프로젝트가 요청을 받고 응답을 보낼 수 있는 호스트/도메인 whitelist</li>\n<li>요청을 보내는 프론트엔드가 따로 있고 별도의 호스트/도메인으로 서빙 중일 경우 여기에 명시해줘야 함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">AUTH_USER_MODEL</code>\n<ul>\n<li>프로젝트 내부에서 사용자 인증에 사용할 User 모델 클래스를 명시</li>\n<li>기본값은 <code class=\"language-text\">[auth.User](https://docs.djangoproject.com/en/4.0/ref/contrib/auth/#user-model)</code></li>\n<li>프로젝트 생성과 함께 <code class=\"language-text\">django.contrib.auth.models.AbstractUser</code> 를 상속받아 커스텀 User 모델을 만들고, 가장 처음 migration에서 해당 User 모델을 반영하는 것을 권장 → 이후 필요에 따라 모델 수정</li>\n</ul>\n</li>\n<li><code class=\"language-text\">DEBUG</code>\n<ul>\n<li>디버그 모드 사용 여부를 나타내는 boolean 변수</li>\n<li>배포 시에는 <code class=\"language-text\">False</code>로 꺼서 나가야 함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">MEDIA_ROOT</code>\n<ul>\n<li>모델 클래스의 <code class=\"language-text\">FileField</code>/<code class=\"language-text\">ImageField</code>를 통해 저장한 모든 파일은 Media 파일로 취급</li>\n<li>Media 파일의 경우 DB 필드에는 저장경로(문자열)를 저장하고 파일 원본은 파일 스토리지에 저장</li>\n<li>파일 스토리지의 저장 위치는 설정 파일에 정의한 <code class=\"language-text\">MEDIA_ROOT</code> 변수 값</li>\n</ul>\n</li>\n<li><code class=\"language-text\">MEDIA_URL</code>\n<ul>\n<li><code class=\"language-text\">MEDIA_ROOT</code>에 있는 Media 파일에 접근할 때 사용할 수 있는 URL</li>\n<li>Django Template에서 <code class=\"language-text\">{{ MEDIA_URL }}</code>과 같이 사용 가능</li>\n</ul>\n</li>\n<li><code class=\"language-text\">STATIC_ROOT</code>\n<ul>\n<li>배포 시 프로젝트 내부 Static 파일을 <code class=\"language-text\">django-admin collectstatic</code> 명령으로 모을 때 사용할 경로</li>\n</ul>\n</li>\n<li><code class=\"language-text\">STATIC_URL</code>\n<ul>\n<li><code class=\"language-text\">STATIC_ROOT</code>에 있는 Static 파일에 접근할 때 사용할 수 있는 URL</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><strong>Admin 사이트</strong>\n<ul>\n<li>쟝고의 Model 중심 자동 어드민 인터페이스</li>\n<li>별도의 화면 설계 없이 쟝고에서 제공하는 admin 사이트를 통해 내부 Model 관리를 할 수 있음</li>\n<li>기본 설정된 <code class=\"language-text\">/admin/</code> URL로 admin 사이트 접근 가능</li>\n<li>기본 용법별도 admin.py 모듈에 admin 사이트를 통해 관리하고 싶은 모델에 대해 아래와 같이 선언</li>\n</ul>\n</li>\n</ul>\n<br/>","frontmatter":{"date":"October 10, 2022","title":"Python Django(장고)란?","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/221010-progrmming-what-is-python-django/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/221205-progrmming-javascript-nodejs-env/","nextSlug":"/221010-progrmming-what-is-python-django/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}