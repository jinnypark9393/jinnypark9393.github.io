{"componentChunkName":"component---src-templates-blog-template-js","path":"/220522-python-day35/","result":{"data":{"cur":{"id":"1d5c3f0f-6e96-5e9b-b821-77a2493ef69e","html":"<p>오늘도 어제에 이어서 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 12-2. 블로그 프로젝트 - 게시물 클래스 구현을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-05-22-Python-Photo/2022-05-22-Python-Photo1.jpg\" alt=\"2022-05-22-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-05-22-Python-Photo/2022-05-22-Python-Photo2.jpg\" alt=\"2022-05-22-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"01-클래스-구현\" style=\"position:relative;\"><a href=\"#01-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84\" aria-label=\"01 클래스 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 클래스 구현</h1>\n<h2 id=\"1-프로젝트-설계하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0\" aria-label=\"1 프로젝트 설계하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로젝트 설계하기</h2>\n<ul>\n<li>\n<p>클래스 설계하기: 어떤 것을 클래스로 만들 지 생각해보자.</p>\n<ul>\n<li>프로그램 기능\n<ul>\n<li>게시글 로딩</li>\n<li>메뉴 출력</li>\n<li>게시글 쓰기</li>\n<li>게시글 목록 확인:</li>\n<li>게시글 상세 확인: 글번호, 제목, 본문 내용, 조회수 등의 데이터가 필요</li>\n<li>게시글 수정</li>\n<li>게시글 삭제</li>\n<li>게시글 저장</li>\n</ul>\n⇒ 공통적으로 <strong>게시글</strong>을 가지고 있다.</li>\n</ul>\n  <br/>\n<ul>\n<li>게시글의 요소\n<ul>\n<li>글 번호</li>\n<li>제목</li>\n<li>본문 내용</li>\n<li>조회수</li>\n</ul>\n⇒ 게시글 내에 여러 데이터들이 포함되어있다: <strong>클래스</strong>로 만들면 편리</li>\n</ul>\n  <br/>\n<h3 id=\"클래스-설계\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A4%EA%B3%84\" aria-label=\"클래스 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[클래스 설계]</h3>\n<ul>\n<li>게시글을 어떻게 클래스로 만들까?</li>\n<li>게시물 클래스: “Post”라고 이름 붙이자.\n<ul>\n<li>속성\n<ul>\n<li>글번호</li>\n<li>제목</li>\n<li>본문</li>\n<li>조회수</li>\n</ul>\n</li>\n<li>메서드\n<ul>\n<li>게시물 수정하기</li>\n<li>조회수 증가하기</li>\n<li>속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"2-실습클래스-구현\" style=\"position:relative;\"><a href=\"#2-%EC%8B%A4%EC%8A%B5%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%ED%98%84\" aria-label=\"2 실습클래스 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 실습(클래스 구현)</h2>\n<ul>\n<li>위에서 설계한 대로 클래스를 구현해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\"\"\"</code> (docstring): 클래스 혹은 메서드(함수)에 대한 설명을 기재한 주석이다.</li>\n</ul>\n<br/>\n<ul>\n<li>인스턴스를 생성해서 위에서 정의한 클래스와 메서드가 잘 동작하는지 확인하자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span>\n    post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트\"</span>, <span class=\"token string\">\"테스트입니다\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{post.get_id()} {post.get_title()} {post.get_content()} {post.get_view_count()}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents/python_basic/my\nvenv/bin/python /Users/usr/Documents/python_basic/myvenv/Chap\nter12/post.py\n<span class=\"token number\">1</span> 테스트 테스트입니다 <span class=\"token number\">0</span></code></pre></div>\n<br/>\n<ul>\n<li>나중에 게시글 수정에 쓰일 메서드인 set_post를 테스트해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span>\n    post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트\"</span>, <span class=\"token string\">\"테스트입니다\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    post.set_post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트2\"</span>, <span class=\"token string\">\"테스트입니다2\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{post.get_id()} {post.get_title()} {post.get_content()} {post.get_view_count()}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/jinipark/Documents/python_basic/my\nvenv/bin/python /Users/jinipark/Documents/python_basic/myvenv/Chap\nter12/post.py\n<span class=\"token number\">1</span> 테스트2 테스트입니다2 <span class=\"token number\">0</span></code></pre></div>\n<br/>\n<ul>\n<li>add_view_count 함수를 호출해서 조회수가 늘어나는지 테스트해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># - 게시물 클래스: Post</span>\n<span class=\"token comment\">#     - 속성</span>\n<span class=\"token comment\">#         - 글번호</span>\n<span class=\"token comment\">#         - 제목</span>\n<span class=\"token comment\">#         - 본문</span>\n<span class=\"token comment\">#         - 조회수</span>\n<span class=\"token comment\">#     - 메서드</span>\n<span class=\"token comment\">#         - 게시물 수정하기</span>\n<span class=\"token comment\">#         - 조회수 증가하기</span>\n<span class=\"token comment\">#         - 속성 가져오기: 게시물 목록 조회 등의 기능을 이용할 때 사용</span>\n\nclass Post:\n    <span class=\"token string\">\"\"</span>\"\n        게시물 클래스\n        param id: 글번호\n        param title: 글제목\n        param content: 글내용\n        param view_count: 조회수\n    <span class=\"token string\">\"\"</span>\"\n\n    def __init__<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n    \n    def set_post<span class=\"token punctuation\">(</span>self, id, title, content, view_count<span class=\"token punctuation\">)</span>:\n        self.id <span class=\"token operator\">=</span> <span class=\"token function\">id</span>\n        self.title <span class=\"token operator\">=</span> title\n        self.content <span class=\"token operator\">=</span> content\n        self.view_count <span class=\"token operator\">=</span> view_count\n\n    def add_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        self.view_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    def get_id<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.id\n\n    def get_title<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.title\n\n    def get_content<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.content\n\n    def get_view_count<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token builtin class-name\">return</span> self.view_count\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token builtin class-name\">:</span>\n    post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"테스트\"</span>, <span class=\"token string\">\"테스트입니다\"</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># post.set_post(1, \"테스트2\", \"테스트입니다2\", 0)</span>\n    post.add_view_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    print<span class=\"token punctuation\">(</span>f<span class=\"token string\">\"{post.get_id()} {post.get_title()} {post.get_content()} {post.get_view_count()}\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents/python_basic/my\nvenv/bin/python /Users/usr/Documents/python_basic/myvenv/Chap\nter12/post.py\n<span class=\"token number\">1</span> 테스트 테스트입니다 <span class=\"token number\">1</span></code></pre></div>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 블로그의 게시물 클래스를 구현해보았다. 다음 포스팅에서는 게시물 로딩 동작을 구현하도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","excerpt":"오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 12-2. 블로그 프로젝트 - 게시물 클래스 구현을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.  아래는 공부 인증 사진. 2022-05-22-Python-Photo1 2022-05-22-Python-Photo2  01. 클래스 구현 1. 프로젝트 설계하기 클래스 설계하기: 어떤 것을 클래스로 만들 지 생각해보자. 프로그램 기능 게시글 로딩 메뉴 출력 게시글 쓰기 게시글 목록 확인: 게시글 상세 확인: 글번호, 제목, 본문 내용, 조회수 등의 데이터가 필요 게시글 수정 게시글 삭제 게시글 저장 ⇒ 공통적으로 게시글을 가지고 있다. 게시글의 요소 글 번호 제목 본문 내용 조회수 ⇒ 게시글 내에 여러 데이터들이 포함되어있다: 클래스로 만들면 편리 [클래스 설계] 게시글을 어떻게 클래스로 만들까? 게시물 클래스: “Po…","frontmatter":{"date":"May 22, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 35일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220522-python-day35/"}},"next":{"id":"6267661a-52c6-54a9-a420-ee96da3391bf","html":"<h1 id=\"q9-서비스-어카운트-권한service-account-permission\" style=\"position:relative;\"><a href=\"#q9-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%96%B4%EC%B9%B4%EC%9A%B4%ED%8A%B8-%EA%B6%8C%ED%95%9Cservice-account-permission\" aria-label=\"q9 서비스 어카운트 권한service account permission permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q9. 서비스 어카운트 권한(Service Account Permission)</h1>\n<p>기존 네임스페이스 <code class=\"language-text\">ns1</code>, <code class=\"language-text\">ns2</code> 가 존재하는데, <code class=\"language-text\">pipeline</code>이라는 서비스 어카운트를 두 네임스페이스에 생성하자.</p>\n<br/>\n<p>이 서비스 어카운트는 전체 클러스터의 거의 모든 것을 볼 수 있도록 허용해야하며, 기본 Clusterrole인 <code class=\"language-text\">view</code> 를 이용할 수 있다.</p>\n<br/>\n<p>이 서비스 어카운트는 <code class=\"language-text\">ns1</code> , <code class=\"language-text\">ns2</code> 네임스페이스에서 디플로이먼트를 생성하고 삭제할 수 있어야 한다.</p>\n<br/>\n<p><code class=\"language-text\">kubectl auth can-i</code> 를 사용해 검증하자.</p>\n<p><br/><br/></p>\n<h2 id=\"rbac-정보\" style=\"position:relative;\"><a href=\"#rbac-%EC%A0%95%EB%B3%B4\" aria-label=\"rbac 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RBAC 정보</h2>\n<p>RBAC 리소스에 대해 얘기해보자.</p>\n<br/>\n<p>Clusterrole/Role은 전체클러스터 혹은 단일 네임스페이스에서의 사용 가능한 권한들의 집합이다.</p>\n<br/>\n<p>ClusterRoleBinding/RoleBinding 은 전체 클러스터 혹은 단일 네임스페이스에서의 권한 범위를계정과 연결한다.</p>\n<br/>\n<p>따라서 4가지의 RBAC 조합이 있으며, 이 중 3개만 유효하다.</p>\n<br/>\n<ol>\n<li>Role + RoleBinding (단일 네임스페이스에서 사용가능하며, 단일 네임스페이스에 적용)</li>\n<li>Clusterrole + ClusterRoleBinding (전체 클러스터 범위에서 사용가능하며, 전체 클러스터 범위에 적용)</li>\n<li>Clusterrole + RoleBinding (전체 클러스터에서 사용가능하며, 단일 네임스페이스에 적용)</li>\n<li>Role + ClusterRoleBinding (<strong>불가능</strong>: 단일 네임스페이스에서 사용 가능하며 전체클러스터 범위에 적용)</li>\n</ol>\n<p><br/><br/></p>\n<h2 id=\"팁\" style=\"position:relative;\"><a href=\"#%ED%8C%81\" aria-label=\"팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팁</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">k create clusterrole view # 기본 클러스터롤이 존재한다\n\nk create clusterrole <span class=\"token operator\">-</span>h # 예시 확인\n\nk create rolebinding <span class=\"token operator\">-</span>h # 예시 확인\n\nk auth can<span class=\"token operator\">-</span>i <span class=\"token keyword\">delete</span> deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns1</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># ClusterRole view 를 사용한다<span class=\"token punctuation\">.</span>\nk <span class=\"token keyword\">get</span> clusterrole view # 기본 클러스터롤이 존재합니다<span class=\"token punctuation\">.</span>\nk create clusterrolebinding pipeline<span class=\"token operator\">-</span>view <span class=\"token operator\">--</span>clusterrole view <span class=\"token operator\">--</span>serviceaccount ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">--</span>serviceaccount ns2<span class=\"token operator\">:</span>pipeline\n\n# 두 네임스페이스 모두에서의 디플로이먼트를 관리하자\nk create clusterrole <span class=\"token operator\">-</span>h # 예시 확인\nk create clusterrole pipeline<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span>verb create<span class=\"token punctuation\">,</span><span class=\"token keyword\">delete</span> <span class=\"token operator\">--</span>resource deployments\n# 클러스터 롤 하나 대신 두 네임스페이스에 롤을 생성해도 된다\n\nk <span class=\"token operator\">-</span>n ns1 create rolebinding pipeline<span class=\"token operator\">-</span>deploymenet<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span>clusterrole pipeline<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span>serviceaccount ns1<span class=\"token operator\">:</span>pipeline\nk <span class=\"token operator\">-</span>n ns2 create rolebinding pipeline<span class=\"token operator\">-</span>deploymenet<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span>clusterrole pipeline<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span>serviceaccount ns2<span class=\"token operator\">:</span>pipeline</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"검증\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%A6%9D\" aria-label=\"검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검증</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># 네임스페이스 ns1 deployment manager\nk auth can<span class=\"token operator\">-</span>i <span class=\"token keyword\">delete</span> deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns1 # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i create deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns1 # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i update deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns1 # <span class=\"token constant\">NO</span>\nk auth can<span class=\"token operator\">-</span>i update deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n <span class=\"token keyword\">default</span> # <span class=\"token constant\">NO</span>\n\n# 네임스페이스 ns2 deployment manager\nk auth can<span class=\"token operator\">-</span>i <span class=\"token keyword\">delete</span> deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns2<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns2 # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i create deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns2<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns2 # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i update deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns2<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns2 # <span class=\"token constant\">NO</span>\nk auth can<span class=\"token operator\">-</span>i update deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns2<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n <span class=\"token keyword\">default</span> # <span class=\"token constant\">NO</span>\n\n# 전체 클러스터 view role\nk auth can<span class=\"token operator\">-</span>i list deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span>n ns1 # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i list deployments <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span><span class=\"token constant\">A</span> # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i list pods <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns1<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span><span class=\"token constant\">A</span> # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i list pods <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns2<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span><span class=\"token constant\">A</span> # <span class=\"token constant\">YES</span>\nk auth can<span class=\"token operator\">-</span>i list secrets <span class=\"token operator\">--</span><span class=\"token keyword\">as</span> <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span>serviceaccount<span class=\"token operator\">:</span>ns2<span class=\"token operator\">:</span>pipeline <span class=\"token operator\">-</span><span class=\"token constant\">A</span> # <span class=\"token constant\">NO</span> <span class=\"token punctuation\">(</span>기본 view<span class=\"token operator\">-</span>role이 허용하지 않음<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>","frontmatter":{"date":"May 21, 2022","title":"쿠버네티스(Kubernetes) CKA - KillerKoda Q9. RBAC Service Account Permission","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220521-kubernetes-cka-killerkoda-q09/"}},"prev":{"id":"905dcb20-0f11-5415-8ed0-96e1cb839da4","html":"<h1 id=\"제-2장-변수와-배열\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-2%EC%9E%A5-%EB%B3%80%EC%88%98%EC%99%80-%EB%B0%B0%EC%97%B4\" aria-label=\"제 2장 변수와 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 2장 변수와 배열</h1>\n<h2 id=\"19-2차원-배열의-각-요소는-2개의-첨자로-구별한다\" style=\"position:relative;\"><a href=\"#19-2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B0%81-%EC%9A%94%EC%86%8C%EB%8A%94-2%EA%B0%9C%EC%9D%98-%EC%B2%A8%EC%9E%90%EB%A1%9C-%EA%B5%AC%EB%B3%84%ED%95%9C%EB%8B%A4\" aria-label=\"19 2차원 배열의 각 요소는 2개의 첨자로 구별한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. 2차원 배열의 각 요소는 2개의 첨자로 구별한다</h2>\n<ul>\n<li>2차원 배열에서는 행과 열에 대해 각각 ‘0’(또는 ‘1’)로 시작하는 요소번호를 붙여 교차점에 있는 배열요소를 가리킨다.</li>\n<li>예시\n<ul>\n<li>배열명[행 요소번호][열 요소번호] ⇒ ARRAY[2][6]</li>\n<li>배열명(행 요소번호)(열 요소번호) ⇒ ARRAY(2)(6)</li>\n<li>배열명[행 요소번호, 열 요소번호] ⇒ ARRAY[2, 6]</li>\n<li>배열명(행 요소번호, 열 요소번호) ⇒ ARRAY(2, 6)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"20-문자열은-문자-데이터의-배열이다\" style=\"position:relative;\"><a href=\"#20-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EB%AC%B8%EC%9E%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%B4%EB%8B%A4\" aria-label=\"20 문자열은 문자 데이터의 배열이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20. 문자열은 문자 데이터의 배열이다</h2>\n<ul>\n<li>문자열은 각 요소에 문자가 저장된 문자 타입 배열이다.</li>\n<li>예: 문자열 ‘ABC’: 문자타입 데이터를 저장할 수 있는 배열의 1번째 요소에 문자 ‘A’, 2번째 요소에 문자 ‘B’, 3번째 요소에 문자 ‘C’가 저장된 것이다.</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"May 23, 2022","title":"그림으로 배우는 알고리즘 제 2장 - 변수와 배열(7)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220523-algorithm-book-with-pic/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220522-python-day35/","nextSlug":"/220521-kubernetes-cka-killerkoda-q09/","prevSlug":"/220523-algorithm-book-with-pic/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}