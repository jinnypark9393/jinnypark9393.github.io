{"componentChunkName":"component---src-templates-blog-template-js","path":"/220708-devops-microservice/","result":{"data":{"cur":{"id":"61ac791a-2627-56a4-9b42-0dbdd1aea7b3","html":"<h1 id=\"1-모놀리틱-아키텍처-vs-마이크로서비스-아키텍처\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-vs-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98\" aria-label=\"1 모놀리틱 아키텍처 vs 마이크로서비스 아키텍처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 모놀리틱 아키텍처 vs 마이크로서비스 아키텍처</h1>\n<h2 id=\"1-모놀리틱-아키텍처monolithic-architecture\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98monolithic-architecture\" aria-label=\"1 모놀리틱 아키텍처monolithic architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 모놀리틱 아키텍처(Monolithic Architecture)</h2>\n<ul>\n<li>애플리케이션의 모든 구성 요소가 한 프로젝트에 통합되어있다.</li>\n<li>기능별로 독립적이지 않다(예: 한 프로젝트 내에 기능을 폴더로 구분)</li>\n</ul>\n<h2 id=\"2-마이크로서비스-아키텍처microservice-architecture\" style=\"position:relative;\"><a href=\"#2-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98microservice-architecture\" aria-label=\"2 마이크로서비스 아키텍처microservice architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 마이크로서비스 아키텍처(Microservice Architecture)</h2>\n<ul>\n<li>\n<p>하나의 큰 애플리케이션을 작은 애플리케이션으로 쪼개 변경과 조합이 가능하도록 만든 것.</p>\n</li>\n<li>\n<p>기능별로 독립적인 서비스를 구성한다(예: 기능별 도커 컨테이너 생성)</p>\n</li>\n<li>\n<p>마틴 파울러와 제임스 루이스에 의하면 마이크로 서비스는 아래와 같다.</p>\n<blockquote>\n<p>In short, the microservice architectural style is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully automated deployment machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be written in different programming languages and use different data storage technologies.</p>\n</blockquote>\n<ul>\n<li>suite of small services, each running in its own process(개별 프로세스로 구동되는 작은 서비스)</li>\n<li>Independently deployable(독립적 배포 가능)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-모놀리틱-아키텍처와-마이크로서비스-아키텍처의-장단점\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EC%99%80-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"2 모놀리틱 아키텍처와 마이크로서비스 아키텍처의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 모놀리틱 아키텍처와 마이크로서비스 아키텍처의 장단점</h1>\n<h2 id=\"1-모놀리틱-아키텍처monolithic-architecture-1\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98monolithic-architecture-1\" aria-label=\"1 모놀리틱 아키텍처monolithic architecture 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 모놀리틱 아키텍처(Monolithic Architecture)</h2>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[장점]</h3>\n<ul>\n<li>End-to-End 테스트가 용이하다.\n<ul>\n<li>한 개 프로젝트에서 모든 기능이 있기 때문</li>\n</ul>\n</li>\n<li>단순한 아키텍처 구조로 개발 초기에 빠르게 간단한 서비스를 만들 수 있다.</li>\n<li>배포가 간단하다.</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[단점]</h3>\n<ul>\n<li>작은 수정사항이 있을 경우에도 전체를 다시 빌드 및 배포해야한다.</li>\n<li>많은 양의 코드가 몰려있어 개발자가 모든 코드를 이해하기 힘들며, 유지보수가 힘들다.</li>\n<li>덩치가 커져서 구동시간이 늘어나고, 빌드 및 배포 시간도 늘어난다.</li>\n<li>일부분의 오류가 전체에 영향을 미친다()장애전파.\n<ul>\n<li>작은 프로젝트에서 시작해 기능을 추가하면서 확장하다보면 수정하지 않은 부분에서 에러가 발생하는 경우가 있다.</li>\n</ul>\n</li>\n<li>각 기능에 따라 다른 언어를 사용할 수 없다.</li>\n</ul>\n<h2 id=\"2-마이크로서비스-아키텍처microservice-architecture-1\" style=\"position:relative;\"><a href=\"#2-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98microservice-architecture-1\" aria-label=\"2 마이크로서비스 아키텍처microservice architecture 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 마이크로서비스 아키텍처(Microservice Architecture)</h2>\n<h3 id=\"장점-1\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[장점]</h3>\n<ul>\n<li>배포\n<ul>\n<li>서비스별 개별 배포가 가능하다.</li>\n<li>거대한 서비스도 빠르게 수정해 요구사항을 신속하게 반영할 수 있다.</li>\n</ul>\n</li>\n<li>확장\n<ul>\n<li>특정 서비스에 대한 확장성이 용이하다.</li>\n<li>클라우드 사용에 적합하다.</li>\n</ul>\n</li>\n<li>장애\n<ul>\n<li>장애가 전체 서비스로 확장될 가능성이 적다.</li>\n<li>부분적 장애에 대한 격리가 수월하다</li>\n</ul>\n</li>\n<li>코드/유지보수\n<ul>\n<li>팀 별로 프로젝트를 분리해 코드의 이해도가 증가하며, 유지보수도 쉽다.</li>\n<li>신기술의 적용이 유연하고 여러 프로그래밍 언어, 패러다임을 이용해 개발/운영 할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"단점-1\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[단점]</h3>\n<ul>\n<li>성능\n<ul>\n<li>서비스 간 호출 시 API를 이용하기 때문에 통신비용 및 지연 시간이 증가한다.</li>\n</ul>\n</li>\n<li>데이터 관리\n<ul>\n<li>데이터가 여러 서비스에 분산되므로 한번에 조회 어렵고 정합성 관리가 어렵다.</li>\n</ul>\n</li>\n<li>테스트 / 트랜잭션\n<ul>\n<li>단위 테스트는 쉽지만 End-to-End 테스트가 불편하다.</li>\n<li>각 서비스 별 데이터베이스가 존재해 트랜잭션을 구현하기 까다롭다.</li>\n</ul>\n</li>\n<li>모니터링이 힘들다 (Service Mesh 도입으로 해결)</li>\n</ul>\n<h1 id=\"3-참고자료\" style=\"position:relative;\"><a href=\"#3-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"3 참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 참고자료</h1>\n<ul>\n<li>마이크로서비스 - <a href=\"http://aws.amazon.com/ko/microservices\">aws.amazon.com/ko/microservices</a></li>\n</ul>\n<p><br/><br/></p>","excerpt":"1. 모놀리틱 아키텍처 vs 마이크로서비스 아키텍처 (1) 모놀리틱 아키텍처(Monolithic Architecture) 애플리케이션의 모든 구성 요소가 한 프로젝트에 통합되어있다. 기능별로 독립적이지 않다(예: 한 프로젝트 내에 기능을 폴더로 구분) (2) 마이크로서비스 아키텍처(Microservice Architecture) 하나의 큰 애플리케이션을 작은 애플리케이션으로 쪼개 변경과 조합이 가능하도록 만든 것. 기능별로 독립적인 서비스를 구성한다(예: 기능별 도커 컨테이너 생성) 마틴 파울러와 제임스 루이스에 의하면 마이크로 서비스는 아래와 같다. In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with light…","frontmatter":{"date":"July 08, 2022","title":"마이크로서비스(Microservice)란?","categories":"데브옵스","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220708-devops-microservice/"}},"next":{"id":"e76ad179-ad05-53ab-a168-29960527c5c1","html":"<h1 id=\"1-api란\" style=\"position:relative;\"><a href=\"#1-api%EB%9E%80\" aria-label=\"1 api란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. API란?</h1>\n<ul>\n<li><strong>API(Application Programming Interface)</strong>: 요청과 응답을 사용하여 두 애플리케이션이 서로 통신하는 방법을 정의한 것이다.</li>\n<li>API 아키텍처는 <strong>클라이언트</strong>와 <strong>서버</strong>로 설명된다.\n<ul>\n<li>클라이언트: 요청을 보내는 애플리케이션</li>\n<li>서버: 요청을 받는 애플리케이션</li>\n</ul>\n</li>\n<li>예를 들어, 기상청의 시스템에는 일일 기상 데이터가 들어있는데, 휴대폰의 날씨 앱은 API를 이용해 이 시스템과 커뮤니케이션하고 휴대폰에 매일 최신 날씨 정보를 표시한다.</li>\n<li><strong>API 문서</strong>에는 개발자가 요청과 응답을 어떻게 구성하는지에 대한 방법이 들어있다.</li>\n</ul>\n<h1 id=\"2-api의-종류\" style=\"position:relative;\"><a href=\"#2-api%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"2 api의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. API의 종류</h1>\n<h2 id=\"1-soap-api\" style=\"position:relative;\"><a href=\"#1-soap-api\" aria-label=\"1 soap api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) SOAP API</h2>\n<ul>\n<li>단순 객체 접근 프로토콜을 사용</li>\n<li>XML을 사용하여 메시지를 교환</li>\n<li>과거에 많이 사용되었던 API</li>\n<li>유연성이 떨어진다.</li>\n</ul>\n<h2 id=\"2-rpc-api\" style=\"position:relative;\"><a href=\"#2-rpc-api\" aria-label=\"2 rpc api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) RPC API</h2>\n<ul>\n<li>원격 프로시저 호출 API이다.</li>\n<li>클라이언트가 서버에서 함수/프로시저를 완료하면 서버가 출력을 클라이언트로 다시 전송한다.</li>\n</ul>\n<h2 id=\"3-websocket-api\" style=\"position:relative;\"><a href=\"#3-websocket-api\" aria-label=\"3 websocket api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) Websocket API</h2>\n<ul>\n<li>JSON 객체를 사용해 데이터를 전달하는 최신 웹 APi중 하나이다.</li>\n<li>클라이언트 앱과 서버간의 양방향 통신을 지원한다.</li>\n<li>서버가 연결된 클라이언트에 콜백 메시지를 전송할 수 있어 REST API보다 효율적이다.</li>\n</ul>\n<h2 id=\"4-rest-api\" style=\"position:relative;\"><a href=\"#4-rest-api\" aria-label=\"4 rest api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(4) REST API</h2>\n<ul>\n<li><strong>REST(Representational State Transfer) API</strong>: 현재 웹에서 가장 많이 사용되는 API로 유연하다는 특징을 갖고 있다.</li>\n<li>클라이언트가 서버에 요청을 데이터로 전송한다. 서버가 이 클라이언트 입력을 사용하여 내부 함수를 시작하고, 출력 데이터를 다시 클라이언트에 반환하게 된다.</li>\n<li>REST는 클라이언트가 서버 데이터에 액세스하는 데 사용할 수 있는 GET, PUT, DELETE 등의 함수 집합을 정의하며, 클라이언트와 서버는 HTTP를 이용해 데이터를 교환한다.</li>\n<li>**무상태(stateless)**라는 특징을 갖고 있어 서버가 요청간에 클라이언트 데이터를 저장하지 않는다.</li>\n<li>REST API의 장점\n<ol>\n<li>통합\n<ul>\n<li>API는 새로운 앱을 기존 소프트웨어 시스템과 통합하는 데 사용된다.</li>\n<li>각 기능을 처음부터 작성할 필요가 없어 개발 속도가 빨라진다.</li>\n<li>API를 사용해 기존 코드를 활용할 수 있다.</li>\n</ul>\n</li>\n<li>혁신\n<ul>\n<li>전체 코드를 다시 작성할 필요 없이 API수준에서 변경해 혁신적인 서비스의 신속한 배포를 지원할 수 있다.</li>\n</ul>\n</li>\n<li>확장\n<ul>\n<li>API는 기업이 다양한 플랫폼에서 고객의 요구사항을 충족할 수 있는 기회를 제공한다.</li>\n<li>예를 들어, 지도 API를 사용하면 웹 사이트, 모바일 등을 통해 지도 정보를 통합할 수 있다.</li>\n<li>어느 기업이나 무료, 유로 API를 사용해 내부 DB에 유사한 액세스 권한을 부여할 수 있다.</li>\n</ul>\n</li>\n<li>유지관리 용이성\n<ul>\n<li>API는 두 시스템 간의 게이트웨이 역할을 한다.</li>\n<li>API가 영향을 받지 않도록 각 시스템은 내부적으로 변경이 필요하다.</li>\n<li>한 시스템의 향후 코드 변경이 다른 시스템에 영향을 끼치지 않는다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5-graphql\" style=\"position:relative;\"><a href=\"#5-graphql\" aria-label=\"5 graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(5) GraphQL</h2>\n<ul>\n<li>API용으로 특별히 개발된 쿼리 언어</li>\n<li>클라이언트에 요청한 데이터만 제공하는 것을 우선으로 한다.</li>\n<li>빠르고 유연하며 개발자 친화적으로 설계</li>\n<li>단일 GraphQL 엔드포인트로 여러 데이터베이스, 마이크로 서비스 및 API를 쿼리할 수 있는 기능을 제공</li>\n</ul>\n<h1 id=\"3-관련-aws-서비스\" style=\"position:relative;\"><a href=\"#3-%EA%B4%80%EB%A0%A8-aws-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\"3 관련 aws 서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 관련 AWS 서비스</h1>\n<h2 id=\"1-appsync\" style=\"position:relative;\"><a href=\"#1-appsync\" aria-label=\"1 appsync permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) AppSync</h2>\n<ul>\n<li>AWS의 경우 AppSync에서 DynamoDB, Lambda 등의 데이터 소스에 안전하게 연결해 GraphQL 개발을 용이하게 하는 완전 관리형 서비스. 웹 소켓을 통해 수백만 명의 클라이언트에 실시간 데이터 업데이트를 푸시(Push)한다.</li>\n<li>디바이스가 오프라인 상태일 때의 로컬 데이터 액세스 기능도 제공.</li>\n</ul>\n<h2 id=\"2-amazon-api-gateway\" style=\"position:relative;\"><a href=\"#2-amazon-api-gateway\" aria-label=\"2 amazon api gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) Amazon API Gateway</h2>\n<ul>\n<li>여러 API를 동시에 효율적으로 관리할 수 있는 모든 기능이 포함된 서비스.</li>\n<li>Aws poratl 가입 시 최대 100만개의 API호출을 무료로 만들 수 있다.</li>\n</ul>\n<h1 id=\"4-참고자료\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"4 참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참고자료</h1>\n<ul>\n<li>API란 무엇인가요? - <a href=\"http://aws.amazon.com/ko/what-is/api/\">aws.amazon.com/ko/what-is/api/</a></li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 08, 2022","title":"API란? (정의, 종류, 장단점)","categories":"CS","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220707-cs-api/"}},"prev":{"id":"b8dc8809-1b89-5160-b3a8-239a6349d024","html":"<h1 id=\"1-데이터베이스-인덱스database-index란\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9D%B8%EB%8D%B1%EC%8A%A4database-index%EB%9E%80\" aria-label=\"1 데이터베이스 인덱스database index란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데이터베이스 인덱스(Database Index)란?</h1>\n<ul>\n<li>데이터베이스 테이블에 대한 검색 성능의 속도를 높여주는 자료구조</li>\n<li>책에 있는 목차와 같은 개념으로, 인덱스에서 내가 원하는 데이터를 먼저 찾고 저장되어있는 물리적 주소로 찾아가게 된다.</li>\n</ul>\n<br/>\n<h2 id=\"인덱스를-사용하는-이유\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"인덱스를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 인덱스를 사용하는 이유</h2>\n<ul>\n<li>\n<p><strong>조건검색 Where 절의 효율성 향상</strong></p>\n<ul>\n<li>테이블 레코드는 순서 없이 저장되어 Where 절의 조건에 맞는 데이터를 찾을 때 처음부터 끝까지 다 읽게 된다(<strong>Full Table Scan</strong>)</li>\n<li>인덱스 테이블은 데이터가 정렬되어 저장되어있어 Where 조건에 맞는 데이터를 빠르게 찾을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>정렬 Order by 절의 효율성 향상</strong></p>\n<ul>\n<li>Order by는 부하가 많이 걸리는 작업(1차적으로 메모리에서 정렬 발생 &#x26; 메모리보다 작업이 큰 경우 디스크 I/O발생)</li>\n<li>인덱스를 사용하면 이미 정렬이 되어있어 Order by에 의한 sort과정을 피할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Min / Max의 효율적 처리</strong></p>\n<ul>\n<li>레코드의 시작값 &#x26; 끝 값 한 건만 가져오면 되기 때문에 Full table scan을 하지 않고 min/max값을 찾을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"인덱스index의-단점\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4index%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"인덱스index의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👎 인덱스(Index)의 단점</h2>\n<p>인덱스가 정렬된 상태를 계속 유지시켜야 하기 때문에 레코드 내 데이터 값이 바뀌면</p>\n<ul>\n<li>Index 테이블 값을 다시 정렬해야한다.</li>\n<li>Index 테이블, 원본 테이블 두 군데에 수정 작업이 필요하다.</li>\n</ul>\n<p>또한, 인덱스는 테이블의 전체 데이터 중 10~15% 데이터를 처리하는 경우에만 효율적이고 그 이상일 경우에는 사용하지 않는 것을 추천.</p>\n<p>인덱스를 관리하기 위해 데이터베이스의 추가 저장공간(약 10%)이 필요하다.</p>\n<h2 id=\"인덱스index를-사용하면-좋은-경우\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4index%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EA%B2%BD%EC%9A%B0\" aria-label=\"인덱스index를 사용하면 좋은 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✨ 인덱스(Index)를 사용하면 좋은 경우</h2>\n<ul>\n<li>규모가 작지 않은 테이블</li>\n<li>INSERT, UPDATE, DELETE가 자주 발생하지 않는 컬럼</li>\n<li>JOIN, WHERE 또는 ORDER BY에 자주 사용되는 컬럼</li>\n<li>데이터 중복도가 낮은 컬럼</li>\n<li>기타</li>\n</ul>\n<h1 id=\"2-데이터베이스-인덱스-자료구조\" style=\"position:relative;\"><a href=\"#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\" aria-label=\"2 데이터베이스 인덱스 자료구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 데이터베이스 인덱스 자료구조</h1>\n<p>인덱스를 구현하기 위해 다양한 자료구조를 사용할 수 있지만, 가장 대표적 예인 해시테이블과 B+Tree에 대해 알아보도록 하자.</p>\n<h2 id=\"해시-테이블hash-table\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94hash-table\" aria-label=\"해시 테이블hash table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[해시 테이블(Hash Table)]</h2>\n<ul>\n<li>\n<p>Key-Value 형태로 데이터를 저장하는 자료구조로 <strong>빠른 데이터 검색이 필요</strong>할 때 유용하다.</p>\n</li>\n<li>\n<p>Key값을 이용해 고유한 Index를 생성하여 해당 Index에 저장된 값을 꺼내오는 구조이다.</p>\n</li>\n<li>\n<p>DB인덱스에서 해시테이블이 사용되는 경우는 제한적이다 → 해시가 등호 연산에만 특화되어있기 때문이다(<strong>부등호 연산을 자주 사용하는 DB 검색에는 해시테이블이 적합하지 않다</strong>)</p>\n</li>\n</ul>\n<h2 id=\"btree\" style=\"position:relative;\"><a href=\"#btree\" aria-label=\"btree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[B+Tree]</h2>\n<ul>\n<li>자식 노드가 2개 이상인 B-Tree를 개선시킨 자료구조로, 모든 노드에 데이터(Value)를 저장했던 B Tree와 다른 특성을 가진다.\n<ul>\n<li>리프 노드(데이터 노드)만 인덱스와 함께 데이터(Value)를 가지고 있고, 나머지 노드(Index 노드)는 데이터를 위한 인덱스(key)만을 갖는다.</li>\n<li>리프 노드들은 Linked List로 연결되어있다.</li>\n<li>데이터 노드 크기는 인덱스 노드의 크기와 같지 않아도 된다.</li>\n</ul>\n</li>\n<li>인덱스 컬럼에서는 부등호를 이용한 순차 검색 연산이 자주 발생할 수 있어 B Tree의 리프 노드들을 Linked List로 연결해 <strong>순차 검색을 용이하게 하는 등 B Tree를 인덱스에 맞게 최적화</strong>하였다.</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 08, 2022","title":"데이터베이스(Database) 인덱스(Index) 자료구조","categories":"CS","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220708-cs-database-index/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220708-devops-microservice/","nextSlug":"/220707-cs-api/","prevSlug":"/220708-cs-database-index/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}