{"componentChunkName":"component---src-templates-blog-template-js","path":"/220619-python-day63/","result":{"data":{"cur":{"id":"6782406f-aeb7-58e4-bdef-b274c5f6da20","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬에서의 정규표현식 사용방법(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-19-Python-Photo/2022-06-19-Python-Photo1.jpg\" alt=\"2022-06-19-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-19-Python-Photo/2022-06-19-Python-Photo2.jpg\" alt=\"2022-06-19-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"01-정규표현식-소개\" style=\"position:relative;\"><a href=\"#01-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%86%8C%EA%B0%9C\" aria-label=\"01 정규표현식 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 정규표현식 소개</h1>\n<ul>\n<li>정규표현식: 문자열에서 특정 패턴을 찾고 싶을 때\n<ul>\n<li>조건문, 반복문 들을 복잡하게 사용해야할 때 사용</li>\n</ul>\n</li>\n<li>유효성 검사: if문을 사용하면 여러 줄에 걸쳐 작업해야하나 정규표현식은 아주 빠르게 할 수 있다.정</li>\n</ul>\n<br/>\n<h2 id=\"정규-표현식의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"정규 표현식의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규 표현식의 장점</h2>\n<ul>\n<li>문자열 추출, 유효성 검사에서 유용하게 쓰일 수 있다.</li>\n<li>거의 모든 언어에서 지원(범용성이 높다)</li>\n</ul>\n<br/>\n<h2 id=\"정규-표현식의-단점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"정규 표현식의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규 표현식의 단점</h2>\n<ul>\n<li>가독성이 좋지 못하다.</li>\n<li>유지보수가 힘들다(내가 짠 코드를 남이 이해하기 어렵고, 남이 짠 코드를 내가 이해하기 어렵다).\n<ul>\n<li>예: <code class=\"language-text\">^(?=.*[A-Za-z]...(생략)</code></li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"02-정규표현식-사용방법1\" style=\"position:relative;\"><a href=\"#02-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%951\" aria-label=\"02 정규표현식 사용방법1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>02. 정규표현식 사용방법(1)</h1>\n<h2 id=\"1-정규표현식-연습-사이트-소개\" style=\"position:relative;\"><a href=\"#1-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%97%B0%EC%8A%B5-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%86%8C%EA%B0%9C\" aria-label=\"1 정규표현식 연습 사이트 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 정규표현식 연습 사이트 소개</h2>\n<ul>\n<li>실습 사이트: <a href=\"https://regexr.com/639t5\">https://regexr.com/639t5</a></li>\n<li>Expression: 해당 사이트에서 정규표현식을 입력하는 곳. <code class=\"language-text\">/</code> 사이에 정규표현식을 입력하면 된다.</li>\n<li><code class=\"language-text\">gm</code> : Flag(정규표현식의 옵션)</li>\n<li>Text: 정규표현식을 적용할 샘플 텍스트</li>\n<li>Tools: 정규표현식의 매칭 결과의 설명</li>\n<li>Cheatsheet: 표현식을 정리해놓은 시트</li>\n</ul>\n<br/>\n<ul>\n<li>Expression에 Hello를 넣어보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">/</span>Hello<span class=\"token operator\">/</span>gm</code></pre></div>\n<br/>\n<ul>\n<li>Text에 표시되는 결과는 아래와 같다.\n<ul>\n<li>몇 개가 매칭되었는지, 매치에 걸린 시간이 우측 상단에 표시된다.</li>\n<li>매칭된 결과는 색이 다르게 표시된다(Hello)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">안녕하세요<span class=\"token punctuation\">.</span> 스타트코딩입니다<span class=\"token punctuation\">.</span>\n코딩을 최대한 쉽고 재미있게 배울 수 있도록 끊임없이 연구하고 있습니다<span class=\"token punctuation\">.</span>\n\n궁금한 사항이 생기면 아래 SNS를 통해 질문을 남겨 주세요<span class=\"token punctuation\">.</span>\n여러분의 열정과 도전을 함께 하겠습니다<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">**</span>Hello<span class=\"token operator\">**</span><span class=\"token punctuation\">.</span> This <span class=\"token keyword\">is</span> startcoding<span class=\"token punctuation\">.</span>\nstartcoding constantly studying to make coding <span class=\"token keyword\">as</span> easy <span class=\"token keyword\">and</span> fun <span class=\"token keyword\">as</span> possible<span class=\"token punctuation\">.</span>\n\nIf you have <span class=\"token builtin\">any</span> questions<span class=\"token punctuation\">,</span> please leave them on SNS below\nI will share your passion <span class=\"token keyword\">and</span> challenge<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">-</span>티스토리\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>startcoding0<span class=\"token punctuation\">.</span>tistory<span class=\"token punctuation\">.</span>com\n\n<span class=\"token operator\">-</span>네이버블로그\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>blog<span class=\"token punctuation\">.</span>naver<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>kkj6369\n\n<span class=\"token operator\">-</span>유튜브\nhttp<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>www<span class=\"token punctuation\">.</span>youtube<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>channel<span class=\"token operator\">/</span>UCHwhZ7HPBhUh2IscPSL0pHA\n\n<span class=\"token operator\">-</span>email\nkkj6369@naver<span class=\"token punctuation\">.</span>com\n\n<span class=\"token operator\">**</span>여러분 행복한 부자되세요!<span class=\"token operator\">**</span> \\<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>__<span class=\"token punctuation\">)</span>\\ 꾸벅\t\n\napple pineapple appleappleapple\n\nrait rabit rabbit rabbbit rabbbbit\n\n<span class=\"token comment\">#좋아요, #좋아요반사, #팔로우, #맞팔,</span>\n\ngrey gray\n\nI am a tiny tiny boy<span class=\"token punctuation\">.</span>\nMay I have have a question?\n\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>소가죽 샌들 <span class=\"token operator\">-</span>레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>스마트 워치 <span class=\"token operator\">-</span>레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>브이넥 반팔 티셔츠 <span class=\"token operator\">-</span>애플스토어\n쿨링밴딩 팬츠 <span class=\"token operator\">-</span>바나나스토어\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>남친룩 오버핏 셔츠 <span class=\"token operator\">-</span>래빗팜\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>여친룩 오버핏 셔츠 <span class=\"token operator\">-</span>래빗팜</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"2-정규표현식-사용방법1\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%951\" aria-label=\"2 정규표현식 사용방법1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정규표현식 사용방법(1)</h2>\n<h3 id=\"1-flags\" style=\"position:relative;\"><a href=\"#1-flags\" aria-label=\"1 flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Flags</h3>\n<ul>\n<li>실습 사이트 우측 상단에 위치</li>\n<li>정규표현식의 옵션을 설정할 수 있다.</li>\n<li>현재 실습환경에서는 <code class=\"language-text\">gm</code> 이 설정되어있는데 <code class=\"language-text\">global</code> 과 <code class=\"language-text\">multiline</code> 이 활성화 되어있다는 뜻이다.</li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">global</code> : 전체 텍스트에서 검색하게 하는 옵션(옵션이 비활성화 되어있을 경우 첫번째로 매칭되는 값에만 표시된다.)</li>\n<li><code class=\"language-text\">multiline</code> : 라인별로 범위를 지정하는 것(옵션이 비활성화 되어있을 경우 텍스트 전체를 한개의 범위로 본다.)</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-character-classes\" style=\"position:relative;\"><a href=\"#2-character-classes\" aria-label=\"2 character classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Character classes</h3>\n<ul>\n<li><code class=\"language-text\">.</code> : 개행을 제외한 모든 문자를 다 찾겠다는 뜻</li>\n<li><code class=\"language-text\">\\w</code> (word): 문자/숫자(alphanumeric), 밑줄(<code class=\"language-text\">_</code>)을 역슬래시로 가져온다.</li>\n<li><code class=\"language-text\">\\W</code> : 위와 반대의 개념</li>\n<li><code class=\"language-text\">\\d</code> (digit): 숫자만 검색한다.</li>\n<li><code class=\"language-text\">\\D</code> : 숫자가 아닌 것만 검색한다.</li>\n<li><code class=\"language-text\">\\s</code> : 공백인 것만 검색한다.</li>\n<li><code class=\"language-text\">\\S</code> : 공백이 아닌 것만 검색한다.</li>\n<li><code class=\"language-text\">[abc]</code> : a, b, 혹은 c가 들어간 것만 검색한다(or)</li>\n<li><code class=\"language-text\">[^abc]</code> : a,b,c가 아닌 값만 가져온다.</li>\n<li><code class=\"language-text\">[a-k]</code> : a~k 사이의 문자를 가져온다.</li>\n<li><code class=\"language-text\">[가-힣]</code> : 한글이 들어간 문자를 가져온다.</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"3-anchors\" style=\"position:relative;\"><a href=\"#3-anchors\" aria-label=\"3 anchors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Anchors</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">^abc</code> : 문장의 시작을 가져온다.</p>\n</li>\n<li>\n<p>예시: <code class=\"language-text\">^https/gm</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">안녕하세요<span class=\"token punctuation\">.</span> 스타트코딩입니다<span class=\"token punctuation\">.</span>\n코딩을 최대한 쉽고 재미있게 배울 수 있도록 끊임없이 연구하고 있습니다<span class=\"token punctuation\">.</span>\n\n궁금한 사항이 생기면 아래 SNS를 통해 질문을 남겨 주세요<span class=\"token punctuation\">.</span>\n여러분의 열정과 도전을 함께 하겠습니다<span class=\"token punctuation\">.</span>\n\nHello<span class=\"token punctuation\">.</span> This <span class=\"token keyword\">is</span> startcoding<span class=\"token punctuation\">.</span>\nstartcoding constantly studying to make coding <span class=\"token keyword\">as</span> easy <span class=\"token keyword\">and</span> fun <span class=\"token keyword\">as</span> possible<span class=\"token punctuation\">.</span>\n\nIf you have <span class=\"token builtin\">any</span> questions<span class=\"token punctuation\">,</span> please leave them on SNS below\nI will share your passion <span class=\"token keyword\">and</span> challenge<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">-</span>티스토리\n<span class=\"token operator\">**</span>https<span class=\"token operator\">**</span><span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>startcoding0<span class=\"token punctuation\">.</span>tistory<span class=\"token punctuation\">.</span>com\n\n<span class=\"token operator\">-</span>네이버블로그\n<span class=\"token operator\">**</span>https<span class=\"token operator\">**</span><span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>blog<span class=\"token punctuation\">.</span>naver<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>kkj6369\n\n<span class=\"token operator\">-</span>유튜브\n<span class=\"token operator\">**</span>http<span class=\"token operator\">**</span><span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>www<span class=\"token punctuation\">.</span>youtube<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>channel<span class=\"token operator\">/</span>UCHwhZ7HPBhUh2IscPSL0pHA\n\n<span class=\"token operator\">-</span>email\nkkj6369@naver<span class=\"token punctuation\">.</span>com\n\n<span class=\"token operator\">**</span>여러분 행복한 부자되세요!<span class=\"token operator\">**</span> \\<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>__<span class=\"token punctuation\">)</span>\\ 꾸벅\t\n\napple pineapple appleappleapple\n\nrait rabit rabbit rabbbit rabbbbit\n\n<span class=\"token comment\">#좋아요, #좋아요반사, #팔로우, #맞팔,</span>\n\ngrey gray\n\nI am a tiny tiny boy<span class=\"token punctuation\">.</span>\nMay I have have a question?\n\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>소가죽 샌들 <span class=\"token operator\">-</span>레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>스마트 워치 <span class=\"token operator\">-</span>레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>브이넥 반팔 티셔츠 <span class=\"token operator\">-</span>애플스토어\n쿨링밴딩 팬츠 <span class=\"token operator\">-</span>바나나스토어\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>남친룩 오버핏 셔츠 <span class=\"token operator\">-</span>래빗팜\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>여친룩 오버핏 셔츠 <span class=\"token operator\">-</span>래빗팜</code></pre></div>\n<ul>\n<li>총 3개가 매칭된다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">abc$</code> : 문장의 끝을 가져온다.\n<ul>\n<li>예시: <code class=\"language-text\">/com$/gm</code> ⇒ com으로 끝나는 문장을 가져온다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">\\b</code> : 지정한 첫 문자(열)로 시작 혹은 끝나는 단어를 가져온다.\n<ul>\n<li>예시 1: <code class=\"language-text\">\\bapple</code> ⇒ apple로 시작하는 단어를 가져온다.</li>\n<li>예시 2: <code class=\"language-text\">apple\\b</code> ⇒ apple로 끝나는 단어를 가져온다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">\\B</code> : 지정한 첫 문자(열)로 시작 혹은 끝나지 않는 단어를 가져온다.\n<ul>\n<li>예시 1: <code class=\"language-text\">\\Bapple</code> ⇒ apple로 시작하지 않는 단어를 가져온다.</li>\n<li>예시 2: <code class=\"language-text\">apple\\B</code> ⇒ apple로 끝나지 않는 단어를 가져온다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"4-escaped-characters\" style=\"position:relative;\"><a href=\"#4-escaped-characters\" aria-label=\"4 escaped characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Escaped Characters</h3>\n<ul>\n<li><code class=\"language-text\">\\.</code> : 문자 <code class=\"language-text\">.</code> 을 찾는다.</li>\n<li><code class=\"language-text\">\\*</code> : 문자 <code class=\"language-text\">*</code> 를 찾는다.</li>\n<li><code class=\"language-text\">\\\\</code> : 문자 <code class=\"language-text\">\\</code> 를 찾는다.</li>\n<li><code class=\"language-text\">\\t</code> : <code class=\"language-text\">tab</code> 키 입력을 찾는다.</li>\n<li><code class=\"language-text\">\\n</code> : 개행(linefeed)문자를 찾는다.</li>\n<li><code class=\"language-text\">\\r</code> : 현재 위치를 나타내는 커서 를 맨 앞으로 이동시키는 캐리지 리턴(carriage return) 문자를 찾는다.</li>\n</ul>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 정규표현식 사용방법(1)을 알아보았다. 다음 포스팅에서는 정규표현식 사용방법(2)에 대해 알아보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","excerpt":"오늘은 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 파트 2의 파이썬에서의 정규표현식 사용방법(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.  아래는 공부 인증 사진. 2022-06-19-Python-Photo1 2022-06-19-Python-Photo2  01. 정규표현식 소개 정규표현식: 문자열에서 특정 패턴을 찾고 싶을 때 조건문, 반복문 들을 복잡하게 사용해야할 때 사용 유효성 검사: if문을 사용하면 여러 줄에 걸쳐 작업해야하나 정규표현식은 아주 빠르게 할 수 있다.정 정규 표현식의 장점 문자열 추출, 유효성 검사에서 유용하게 쓰일 수 있다. 거의 모든 언어에서 지원(범용성이 높다) 정규 표현식의 단점 가독성이 좋지 못하다. 유지보수가 힘들다(내가 짠 코드를 남이 이해하기 어렵고, 남이 짠 코드를 내가 이해하기 어렵다). 예:   02. 정규표현식 사용방법(1) 1. …","frontmatter":{"date":"June 19, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 63일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220619-python-day63/"}},"next":{"id":"75ae6d33-a721-51ec-9c30-955f997a9f3d","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬에서의 SQLite 사용법을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-18-Python-Photo/2022-06-18-Python-Photo1.jpg\" alt=\"2022-06-18-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-18-Python-Photo/2022-06-18-Python-Photo2.jpg\" alt=\"2022-06-18-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"06-sql-파이썬에서-sqlite3-사용방법\" style=\"position:relative;\"><a href=\"#06-sql-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%97%90%EC%84%9C-sqlite3-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"06 sql 파이썬에서 sqlite3 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>06. SQL 파이썬에서 SQLite3 사용방법</h1>\n<h2 id=\"1-파이썬-sqlite3-사용-순서\" style=\"position:relative;\"><a href=\"#1-%ED%8C%8C%EC%9D%B4%EC%8D%AC-sqlite3-%EC%82%AC%EC%9A%A9-%EC%88%9C%EC%84%9C\" aria-label=\"1 파이썬 sqlite3 사용 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 파이썬 SQLite3 사용 순서</h2>\n<ol>\n<li>Database 파일 열기</li>\n<li>커서(Cursor) 생성\n<ul>\n<li>커서(Cursor)란? 사용자와 DBMS(SQLite)를 연결하는 역할. 사용자의 SQL문을 DBMS에 전송해주고, DBMS에서의 data 결과값을 저장해두었다 사용자가 필요할 때 제공.</li>\n</ul>\n</li>\n<li>SQL 명령 실행</li>\n<li>커밋(Commit) 또는 롤백(Rollback)\n<ul>\n<li>커밋(Commit): 변경사항/SQL명령문에 대한 승인</li>\n<li>롤백(Rollback): 변경사항/SQL명령문에 대한 취소</li>\n</ul>\n</li>\n<li>데이터베이스 닫기</li>\n</ol>\n<p><br/><br/></p>\n<h2 id=\"2-실습\" style=\"position:relative;\"><a href=\"#2-%EC%8B%A4%EC%8A%B5\" aria-label=\"2 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 실습</h2>\n<ul>\n<li>VScode로 돌아가서 작업하자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nCREATE_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"\"\"\n    CREATE TABLE IF NOT EXISTS item(\n        id integer primary key autoincrement,\n        code text not null,\n        name text not null,\n        price integer not null\n    )\n\"\"\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>CREATE_SQL<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<ul>\n<li>primary key 단독 사용과 autoincrement 병용과의 차이점\n<ul>\n<li>id = 3 을 삭제 후 재생성 시\n<ul>\n<li>primary key 단독 사용 ⇒ id =3</li>\n<li>autoincrement key 병용 ⇒ id =4 (바람직)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>실행결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">01.</span>CREATE_TABLE<span class=\"token punctuation\">.</span>py</code></pre></div>\n<br/>\n<ul>\n<li>SQLite로 돌아가 Open Database ⇒ 해당 db파일 오픈 ⇒ Database Structure에서 테이블이 추가된 것을 알 수 있다.</li>\n</ul>\n<br/>\n<ul>\n<li>INSERT문을 실행해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nINSERT_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO item(code, name, price) VALUES (?, ?, ?)\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>INSERT_SQL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'A38080'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'게이밍 마우스'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커밋 : INSERT, UPDATE, DELETE는 commit을 해야 실제 데이터베이스에 반영된다.</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<ul>\n<li>SELECT를 제외한 쿼리문은 commit을 해주어야 실제 데이터베이스에 반영이 된다.</li>\n</ul>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">02.</span><span class=\"token keyword\">INSERT</span><span class=\"token punctuation\">.</span>py</code></pre></div>\n<br/>\n<ul>\n<li>게이밍 마우스가 item에 추가되었다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A38080</td>\n<td>게이밍 마우스</td>\n<td>38080</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<ul>\n<li>여러가지 항목을 INSERT문으로 추가해보자</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nINSERT_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO item(code, name, price) VALUES (?, ?, ?)\"</span>\n\n<span class=\"token comment\"># 데이터 여러개 한번에 추가하기</span>\n<span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'A00002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'에어컨 20평형'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'A00003'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'최신형 스마트폰'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'A00004'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'가성비 노트북'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\nconn<span class=\"token punctuation\">.</span>executemany<span class=\"token punctuation\">(</span>INSERT_SQL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커밋 : INSERT, UPDATE, DELETE는 commit을 해야 실제 데이터베이스에 반영된다.</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<ul>\n<li>중첩 튜플 혹은 리스트를 넘겨주면 된다.</li>\n</ul>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">02.</span><span class=\"token keyword\">INSERT</span><span class=\"token punctuation\">.</span>py</code></pre></div>\n<br/>\n<ul>\n<li>여러 개의 데이터가 한번에 들어간 것을 알 수 있다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A38080</td>\n<td>게이밍 마우스</td>\n<td>38080</td>\n</tr>\n<tr>\n<td>2</td>\n<td>A00002</td>\n<td>에어컨 20평형</td>\n<td>350000</td>\n</tr>\n<tr>\n<td>3</td>\n<td>A00003</td>\n<td>최신형 스마트폰</td>\n<td>800000</td>\n</tr>\n<tr>\n<td>4</td>\n<td>A00004</td>\n<td>가성비 노트북</td>\n<td>650000</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<ul>\n<li>SELECT문을 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nSELECT_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM item\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\ncur<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>SELECT_SQL<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">rows</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">rows</span>:\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">row</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<ul>\n<li>cur.fetchall로 결과값을 가져와야한다.</li>\n</ul>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">03.</span><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span>py\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A38080'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'게이밍 마우스'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38080</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A00002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'에어컨 20평형'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A00003'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'최신형 스마트폰'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A00004'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'가성비 노트북'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>일부 값만 조회할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nSELECT_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM item WHERE code = 'A00002'\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\ncur<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>SELECT_SQL<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">rows</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">rows</span>:\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">row</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">03.</span><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span>py\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A00002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'에어컨 20평형'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>상위 두개 값만 출력하고 싶을 경우에는 아래와 같이 작성하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nSELECT_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM item LIMIT 2;\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\ncur<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>SELECT_SQL<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">rows</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">rows</span>:\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">row</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">03.</span><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span>py\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A38080'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'게이밍 마우스'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38080</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A00002'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'에어컨 20평형'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>UPDATE 명령어를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nUPDATE_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE item set price = 650000 WHERE code='A00002';\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\ncur<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>UPDATE_SQL<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커밋 : INSERT, UPDATE, DELETE는 commit을 해야 실제 데이터베이스에 반영된다.</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">04.</span><span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">.</span>py</code></pre></div>\n<br/>\n<ul>\n<li>값이 변경된 것을 알 수 있다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>code</th>\n<th>name</th>\n<th>price</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A38080</td>\n<td>게이밍 마우스</td>\n<td>38080</td>\n</tr>\n<tr>\n<td>2</td>\n<td>A00002</td>\n<td>에어컨 20평형</td>\n<td>650000</td>\n</tr>\n<tr>\n<td>3</td>\n<td>A00003</td>\n<td>최신형 스마트폰</td>\n<td>800000</td>\n</tr>\n<tr>\n<td>4</td>\n<td>A00004</td>\n<td>가성비 노트북</td>\n<td>650000</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<ul>\n<li>DELETE문을 실습해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># 모듈 추가</span>\n<span class=\"token keyword\">import</span> sqlite3\n\n<span class=\"token comment\"># 데이터베이스 추가</span>\nconn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token keyword\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myvenv/Chapter05/SQL_DDL.db'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커서 생성</span>\ncur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token keyword\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL 명령 작성</span>\nDELETE_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM item WHERE code='A00002';\"</span>\n\n<span class=\"token comment\"># SQL 명령 실행</span>\ncur<span class=\"token punctuation\">.</span><span class=\"token keyword\">execute</span><span class=\"token punctuation\">(</span>DELETE_SQL<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 커밋 : INSERT, UPDATE, DELETE는 commit을 해야 실제 데이터베이스에 반영된다.</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 데이터베이스 닫기</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token keyword\">close</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_advanced git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documen\nts<span class=\"token operator\">/</span>python_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_advanced<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter05<span class=\"token operator\">/</span><span class=\"token number\">05.</span><span class=\"token keyword\">DELETE</span><span class=\"token punctuation\">.</span>py</code></pre></div>\n<p><br/><br/></p>\n<h2 id=\"추가적인-데이터베이스-공부\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EA%B3%B5%EB%B6%80\" aria-label=\"추가적인 데이터베이스 공부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가적인 데이터베이스 공부</h2>\n<ul>\n<li>여러 개의 테이블이 필요한 프로젝트 설계(5~6개)</li>\n<li>Primary Key, Foreign Key(외부 키)</li>\n<li>정규화(+역정규화): 정규화 = 중복 제거</li>\n<li>ERD(Entity Relationship Diagram)</li>\n</ul>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 파이썬에서의 SQLite 사용법을 알아보았다. 다음 포스팅에서는 정규표현식에 대해 알아보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","frontmatter":{"date":"June 18, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 62일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220618-python-day62/"}},"prev":{"id":"58b6b898-40d1-5cc9-9811-2ae6d23abdd6","html":"<h1 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h1>\n<p>올해 2022년 오픈소스 컨트리뷰션 아카데미에 <a href=\"https://www.oss.kr/contribution_22_projects/show/c70482f2-060e-4820-a46c-32c4a4c0584c\">쿠버네티스 한글화 프로젝트</a>가 추가되었다는 소식을 듣고 헐레벌떡 신청했다. 신청하고나니 될지 안될지는 모르지만 컨트리뷰션 아카데미 가이드에 기재된 내용을 보고 예습 겸 PR을 올려보면 좋을 듯 해 쿠버네티스 공식문서의 <a href=\"https://kubernetes.io/ko/docs/contribute/localization_ko/\">한글화 가이드</a>와 유투브 영상을 보고 따라서 PR을 올려보았다(두근두근).</p>\n<br/>\n<p>하지만…</p>\n<p><img src=\"/assets/images/2022-06-19-Github_Git_Rebase_Squash/2022-06-19-Github_Git_Rebase_Squash1.png\" alt=\"2022-06-19-Github_Git_Rebase_Squash1.png\"></p>\n<br/>\n<p>내가 번역한 문서에 링크되어있는 YAML파일들이 한국어 버전에 존재하지 않아 빌드에러가 발생했다.</p>\n<br/>\n<p>다행히 리뷰어님께서 친절히 해결 방법을 알려주셔서 검색해보니, git squash라는 명령어가 따로 존재하는 건 아니고, interactive rebase의 옵션 중 하나가 squash였다.</p>\n<p><br/><br/></p>\n<h1 id=\"2-git-rebase--i로-여러-개의-커밋을-한개로-합치는-방법\" style=\"position:relative;\"><a href=\"#2-git-rebase--i%EB%A1%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-%EC%BB%A4%EB%B0%8B%EC%9D%84-%ED%95%9C%EA%B0%9C%EB%A1%9C-%ED%95%A9%EC%B9%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"2 git rebase  i로 여러 개의 커밋을 한개로 합치는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. git rebase -i로 여러 개의 커밋을 한개로 합치는 방법</h1>\n<p>위에서도 말했듯, 여러 개의 커밋 내역을 한개로 합치려면 <code class=\"language-text\">git rebase -i</code> (여기서 i는 interactive의 약어) 명령어를 사용해주어야 한다.</p>\n<br/>\n<p><strong>💡 주의: Commit이 완료 된 뒤에만 git rebase로 내역을 합칠 수 있다.</strong></p>\n<br/>\n<p>아래와 같이 2개의 커밋내역이 존재할때, 이 커밋들을 하나로 합쳐보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log --pretty<span class=\"token operator\">=</span>oneline\n8ef677a62b<span class=\"token punctuation\">..</span>. 2nd commit\n4bb2624993<span class=\"token punctuation\">..</span>. 1st commit</code></pre></div>\n<ul>\n<li><code class=\"language-text\">git log --pretty=oneline</code> :  커밋 내역을 한줄로 간단하게 보여주는 명령어</li>\n</ul>\n<br/>\n<p>커밋 내역을 합치려면, <code class=\"language-text\">git rebase -i</code> 명령어를 사용해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> rebase -i HEAD~2</code></pre></div>\n<ul>\n<li><code class=\"language-text\">HEAD~2</code> : 현재 커밋내역을 포함해 최신 순으로 2번째 커밋 내역까지 합치겠다는 의미(위의 예시에서는 <code class=\"language-text\">2nd commit</code> 과 <code class=\"language-text\">1st commit</code> 이 대상이다)</li>\n<li><code class=\"language-text\">HEAD~2</code> 대신 합치고 싶은 커밋의 해시값을 입력해줘도 된다.</li>\n</ul>\n<br/>\n<p>위의 명령어를 입력하면 아래와 같이 rebase에 포함한 커밋내역과 함께 interactive rebase에서 적용할 옵션 값이 표시된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pick 4bb2624993 1st commit\npick 8ef677a62b 2nd commit\n\n<span class=\"token comment\"># Rebase 36bee81493..8ef677a62b onto 36bee81493 (2 commands)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Commands:</span>\n<span class=\"token comment\"># p, pick &lt;commit> = use commit</span>\n<span class=\"token comment\"># r, reword &lt;commit> = use commit, but edit the commit message</span>\n<span class=\"token comment\"># e, edit &lt;commit> = use commit, but stop for amending</span>\n<span class=\"token comment\"># s, squash &lt;commit> = use commit, but meld into previous commit</span>\n<span class=\"token comment\"># f, fixup [-C | -c] &lt;commit> = like \"squash\" but keep only the previous</span>\n<span class=\"token comment\">#                    commit's log message, unless -C is used, in which case</span>\n<span class=\"token comment\">#                    keep only this commit's message; -c is same as -C but</span>\n<span class=\"token comment\">#                    opens the editor</span>\n<span class=\"token comment\"># x, exec &lt;command> = run command (the rest of the line) using shell</span>\n<span class=\"token comment\"># b, break = stop here (continue rebase later with 'git rebase --continue')</span>\n<span class=\"token comment\"># d, drop &lt;commit> = remove commit</span>\n<span class=\"token comment\"># l, label &lt;label> = label current HEAD with a name</span>\n<span class=\"token comment\"># t, reset &lt;label> = reset HEAD to a label</span>\n<span class=\"token comment\"># m, merge [-C &lt;commit> | -c &lt;commit>] &lt;label> [# &lt;oneline>]</span>\n<span class=\"token comment\"># .       create a merge commit using the original merge commit's</span>\n<span class=\"token comment\"># .       message (or the oneline, if no original merge commit was</span></code></pre></div>\n<ul>\n<li>우리는 이 중에서 squash를 사용할 것이다.</li>\n<li><code class=\"language-text\">pick</code> : 해당 커밋을 사용한다.</li>\n<li><code class=\"language-text\">squash</code> : 해당 커밋을 사용하지만 이전 커밋에 병합한다.</li>\n</ul>\n<br/>\n<p>사용할 커밋은 pick으로 남겨두고, 병합할 커밋을 squash로 수정해준다(수정하기 전 i를 눌러 수정모드로 변경한 뒤 수정 후 esc ⇒ :wq 로 저장한 뒤 빠져나오면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pick 4bb2624993 1st commit\nsquash 8ef677a62b 2nd commit\n\n<span class=\"token comment\"># Rebase 36bee81493..8ef677a62b onto 36bee81493 (2 commands)</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Commands:</span>\n<span class=\"token comment\"># p, pick &lt;commit> = use commit</span>\n<span class=\"token comment\"># r, reword &lt;commit> = use commit, but edit the commit message</span>\n<span class=\"token comment\"># e, edit &lt;commit> = use commit, but stop for amending</span>\n<span class=\"token comment\"># s, squash &lt;commit> = use commit, but meld into previous commit</span>\n<span class=\"token comment\"># f, fixup [-C | -c] &lt;commit> = like \"squash\" but keep only the previous</span>\n<span class=\"token comment\">#                    commit's log message, unless -C is used, in which case</span>\n<span class=\"token comment\">#                    keep only this commit's message; -c is same as -C but</span>\n<span class=\"token comment\">#                    opens the editor</span>\n<span class=\"token comment\"># x, exec &lt;command> = run command (the rest of the line) using shell</span>\n<span class=\"token comment\"># b, break = stop here (continue rebase later with 'git rebase --continue')</span>\n<span class=\"token comment\"># d, drop &lt;commit> = remove commit</span>\n<span class=\"token comment\"># l, label &lt;label> = label current HEAD with a name</span>\n<span class=\"token comment\"># t, reset &lt;label> = reset HEAD to a label</span>\n<span class=\"token comment\"># m, merge [-C &lt;commit> | -c &lt;commit>] &lt;label> [# &lt;oneline>]</span>\n<span class=\"token comment\"># .       create a merge commit using the original merge commit's</span>\n<span class=\"token comment\"># .       message (or the oneline, if no original merge commit was</span></code></pre></div>\n<br/>\n<p>저장하고 빠져나오게 되면 곧바로 다음 vi에디터 창이 뜨게 되는데, 합치게 되는 커밋 내역 중 어느 커밋의 메시지를 사용할 것인지 정하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># This is a combination of 2 commits.</span>\n<span class=\"token comment\"># This is the 1st commit message:</span>\n\n1st commit\n\n<span class=\"token comment\"># This is the commit message #2:</span>\n\n2nd commit\n\n<span class=\"token comment\"># Please enter the commit message for your changes. Lines starting</span>\n<span class=\"token comment\"># with '#' will be ignored, and an empty message aborts the commit.</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># Date:      Sat Jun 18 20:21:35 2022 +0900</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># interactive rebase in progress; onto 36bee81493</span>\n<span class=\"token comment\"># Last commands done (2 commands done):</span>\n<span class=\"token comment\">#    pick 4bb2624993 1st commit</span>\n<span class=\"token comment\">#    squash 8ef677a62b 2nd commit</span>\n<span class=\"token comment\"># No commands remaining.</span>\n<span class=\"token comment\"># You are currently rebasing branch 'jinnypark9393/monitor-node-health/v0.1' on '36bee81493'.</span>\n<span class=\"token comment\">#</span></code></pre></div>\n<ul>\n<li>사용할 커밋을 제외하고는 #문자로 주석처리 해준 뒤, 마찬가지로 esc + :wq 명령어로 저장한 뒤 빠져나오면 된다.</li>\n</ul>\n<br/>\n<ul>\n<li>아래와 같은 메시지가 뜨면 rebase에 성공한 것이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Successfully rebased and updated refs/heads/jinnypark9393/monitor-node-health/v0.1.</code></pre></div>\n<br/>\n<p>위와 같이 커밋내역을 수정하게 되면 remote에 push하게 될 때 conflict가 나면서 push가 되지 않는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  website git:<span class=\"token punctuation\">(</span>jinnypark9393/monitor-node-health/v0.1<span class=\"token punctuation\">)</span> <span class=\"token function\">git</span> push --set-upstream origin jinnypark9393/monitor-node-health/v0.1\nTo https://github.com/jinnypark9393/website.git\n <span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>rejected<span class=\"token punctuation\">]</span>              jinnypark9393/monitor-node-health/v0.1 -<span class=\"token operator\">></span> jinnypark9393/monitor-node-health/v0.1 <span class=\"token punctuation\">(</span>non-fast-forward<span class=\"token punctuation\">)</span>\nerror: failed to push some refs to <span class=\"token string\">'https://github.com/jinnypark9393/website.git'</span>\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes <span class=\"token punctuation\">(</span>e.g.\nhint: <span class=\"token string\">'git pull ...'</span><span class=\"token punctuation\">)</span> before pushing again.\nhint: See the <span class=\"token string\">'Note about fast-forwards'</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'git push --help'</span> <span class=\"token keyword\">for</span> details.</code></pre></div>\n<br/>\n<p>이 때에는 <code class=\"language-text\">-f</code> 혹은 <code class=\"language-text\">--force</code> 옵션을 추가해 강제로 remote 저장소에 push해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  website git:<span class=\"token punctuation\">(</span>jinnypark9393/monitor-node-health/v0.1<span class=\"token punctuation\">)</span> <span class=\"token function\">git</span> push --set-upstream origin jinnypark9393/monitor-node-health/v0.1 --force\nEnumerating objects: <span class=\"token number\">20</span>, done.\nCounting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">20</span>/20<span class=\"token punctuation\">)</span>, done.\nDelta compression using up to <span class=\"token number\">4</span> threads\nCompressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">11</span>/11<span class=\"token punctuation\">)</span>, done.\nWriting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">13</span>/13<span class=\"token punctuation\">)</span>, <span class=\"token number\">4.22</span> KiB <span class=\"token operator\">|</span> <span class=\"token number\">4.22</span> MiB/s, done.\nTotal <span class=\"token number\">13</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">0</span>\nremote: Resolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">7</span>/7<span class=\"token punctuation\">)</span>, completed with <span class=\"token number\">6</span> <span class=\"token builtin class-name\">local</span> objects.\nTo https://github.com/jinnypark9393/website.git\n + 4bb2624993<span class=\"token punctuation\">..</span>.31af66d757 jinnypark9393/monitor-node-health/v0.1 -<span class=\"token operator\">></span> jinnypark9393/monitor-node-health/v0.1 <span class=\"token punctuation\">(</span>forced update<span class=\"token punctuation\">)</span>\nBranch <span class=\"token string\">'jinnypark9393/monitor-node-health/v0.1'</span> <span class=\"token builtin class-name\">set</span> up to track remote branch <span class=\"token string\">'jinnypark9393/monitor-node-health/v0.1'</span> from <span class=\"token string\">'origin'</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p><strong>💡 참고:</strong> 이미 올린 Pull request는 삭제 후 다시 올리지 않아도 remote 저장소(origin)의 PR의 대상이 되었던 브랜치에 새롭게 커밋하게 되면 자동으로 업데이트 된다(약 5분내외 소요)</p>\n<p><br/><br/></p>\n<h1 id=\"3-에러-발생-및-트러블슈팅\" style=\"position:relative;\"><a href=\"#3-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EB%B0%8F-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\" aria-label=\"3 에러 발생 및 트러블슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 에러 발생 및 트러블슈팅</h1>\n<p>처음에 git rebase를 진행할 때 Rebase가 되지 않고 계속 conflict가 나는 상황이 있었는데, commit할 떄의 내용을 다시 살펴보니 내가 수정하지 않은 내역들이 잔뜩 커밋되어있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  website git:<span class=\"token punctuation\">(</span>jinnypark9393/monitor-node-health/v0.1<span class=\"token punctuation\">)</span> ✗ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Translate tasks/debug/debug-cluster/monitor-node-health into Korean -ver2\"</span>\n<span class=\"token punctuation\">[</span>jinnypark9393/monitor-node-health/v0.1 385a8c024e<span class=\"token punctuation\">]</span> Translate tasks/debug/debug-cluster/monitor-node-health into Korean -ver2\n <span class=\"token number\">47</span> files changed, <span class=\"token number\">92</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>, <span class=\"token number\">376427</span> deletions<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> api-ref-assets/api/.swagger.json.icloud\n delete mode <span class=\"token number\">100644</span> api-ref-assets/api/swagger.json\n delete mode <span class=\"token number\">100644</span> content/de/docs/concepts/configuration/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/concepts/extend-kubernetes/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/concepts/policy/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/concepts/workloads/pods/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/reference/federation/_index.html\n delete mode <span class=\"token number\">100644</span> content/de/docs/reference/kubernetes-api/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/reference/using-api/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/tasks/access-kubernetes-api/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/tasks/configure-pod-container/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/tasks/federation/_index.md\n delete mode <span class=\"token number\">100644</span> content/de/docs/tasks/manage-daemon/_index.md\n create mode <span class=\"token number\">100644</span> content/ko/examples/debug/node-problem-detector-configmap.yaml\n create mode <span class=\"token number\">100644</span> content/ko/examples/debug/node-problem-detector.yaml\n create mode <span class=\"token number\">100644</span> static/docs/reference/generated/kubernetes-api/v1.19/.index.html.icloud\n delete mode <span class=\"token number\">100644</span> static/docs/reference/generated/kubernetes-api/v1.19/index.html\n create mode <span class=\"token number\">100644</span> static/docs/reference/generated/kubernetes-api/v1.20/.index.html.icloud\n<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">(</span>생략<span class=\"token punctuation\">)</span></code></pre></div>\n<p>내용을 잘 읽어보니 기존 파일들이 <code class=\"language-text\">.icloud</code> 확장자의 파일로 치환되고 있었다. 확장자명을 보고 작업 중인 폴더가 icloud 공유폴더라 발생하는 현상이 아닐까 추측되어 해당 폴더를 날리고 공유폴더가 아닌 폴더에 프로젝트를 다시 git clone으로 받아 rebase를 진행하니 conflict가 발생하지 않았다.</p>\n<p><br/><br/></p>\n<h1 id=\"4-참고자료\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"4 참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참고자료</h1>\n<ul>\n<li><strong>NHN Cloud - git squash - 여러개의 커밋로그를 하나로 묶기</strong>: <a href=\"https://meetup.toast.com/posts/39\">https://meetup.toast.com/posts/39</a></li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 19, 2022","title":"Github/Git 여러 개의 커밋을 한개로 합치기(git rebase -i HEAD~3/git squash)","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220619-git-rebase-squash/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220619-python-day63/","nextSlug":"/220618-python-day62/","prevSlug":"/220619-git-rebase-squash/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}