{"componentChunkName":"component---src-templates-blog-template-js","path":"/220620-python-day64/","result":{"data":{"cur":{"id":"8b18ba57-66d5-5c7d-9c70-b208f9ab2a19","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬에서의 정규표현식 사용방법(2)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-20-Python-Photo/2022-06-20-Python-Photo1.jpg\" alt=\"2022-06-20-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-20-Python-Photo/2022-06-20-Python-Photo2.jpg\" alt=\"2022-06-20-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"01-정규표현식-소개\" style=\"position:relative;\"><a href=\"#01-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%86%8C%EA%B0%9C\" aria-label=\"01 정규표현식 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>01. 정규표현식 소개</h1>\n<ul>\n<li>정규표현식: 문자열에서 특정 패턴을 찾고 싶을 때\n<ul>\n<li>조건문, 반복문 들을 복잡하게 사용해야할 때 사용</li>\n</ul>\n</li>\n<li>유효성 검사: if문을 사용하면 여러 줄에 걸쳐 작업해야하나 정규표현식은 아주 빠르게 할 수 있다.정</li>\n</ul>\n<br/>\n<h2 id=\"정규-표현식의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"정규 표현식의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규 표현식의 장점</h2>\n<ul>\n<li>문자열 추출, 유효성 검사에서 유용하게 쓰일 수 있다.</li>\n<li>거의 모든 언어에서 지원(범용성이 높다)</li>\n</ul>\n<br/>\n<h2 id=\"정규-표현식의-단점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"정규 표현식의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규 표현식의 단점</h2>\n<ul>\n<li>가독성이 좋지 못하다.</li>\n<li>유지보수가 힘들다(내가 짠 코드를 남이 이해하기 어렵고, 남이 짠 코드를 내가 이해하기 어렵다).\n<ul>\n<li>예: <code class=\"language-text\">^(?=.*[A-Za-z]...(생략)</code></li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"03-정규표현식-사용방법2\" style=\"position:relative;\"><a href=\"#03-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%952\" aria-label=\"03 정규표현식 사용방법2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. 정규표현식 사용방법(2)</h1>\n<h2 id=\"1-quantifiers--alternation\" style=\"position:relative;\"><a href=\"#1-quantifiers--alternation\" aria-label=\"1 quantifiers  alternation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Quantifiers &#x26; Alternation</h2>\n<h3 id=\"1-quantifiers수량자\" style=\"position:relative;\"><a href=\"#1-quantifiers%EC%88%98%EB%9F%89%EC%9E%90\" aria-label=\"1 quantifiers수량자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Quantifiers(수량자)</h3>\n<ul>\n<li>\n<p>Quantifiers(수량자): 갯수를 지정할 수 있는 정규표현식</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">rait rabit rabbit rabbbit rabbbbit</code></pre></div>\n<ul>\n<li><code class=\"language-text\">rabit/gm</code> : 1 match</li>\n<li><code class=\"language-text\">rab*it/gm</code> : 5 matches(b가 0개 이상인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab+it/gm</code> : 4 matches(b가 1개 이상인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab?it/gm</code> : 2 matches(b가 0개 혹은 1개인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab{3}it/gm</code> : 1 match(b가 정확히 3개 들어있는 경우만 불러온다)</li>\n<li><code class=\"language-text\">rab{2,}it/gm</code> : 3 matches(b가 2개 이상인 경우를 모두 불러온다)</li>\n<li><code class=\"language-text\">rab{1,3}it/gm</code> : 3 matches(b가 1~3개 들어있는 경우를 모두 불러온다)</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-alternation\" style=\"position:relative;\"><a href=\"#2-alternation\" aria-label=\"2 alternation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Alternation</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#좋아요, #좋아요반사, #팔로우, #맞팔,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">#.+,</code> : <code class=\"language-text\">#</code> # 문자로 시작하는 &#x26; <code class=\"language-text\">.</code> = 모든 문자 &#x26; <code class=\"language-text\">,</code> 로 끝나는 문자 ⇒ 전체 한줄이 잡힘(Greedy방식)</li>\n<li><code class=\"language-text\">#.+?,</code>: Non-Greedy방식. 매치가 최소한으로 일어나도록 해줌 ⇒ 단어 하나씩 잡힘</li>\n<li><code class=\"language-text\">#.{3}?,</code> : 3글자 이상인 단어</li>\n<li><code class=\"language-text\">#.{2,3}?,</code> : 2글자 이상 3글자 이하인 단어</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">grey gray</code></pre></div>\n<ul>\n<li><code class=\"language-text\">gray|grey</code> : gray 또는 grey를 찾는다.</li>\n<li><code class=\"language-text\">gr(e|a)y</code> : gray 또는 grey를 찾는다(e &#x26; a가 그룹).</li>\n<li><code class=\"language-text\">gr[ae]y</code> : gray 또는 grey를 찾는다(a 혹은 e를 찾는다).</li>\n</ul>\n<p><br/><br/></p>\n<h2 id=\"2-groups--lookaround\" style=\"position:relative;\"><a href=\"#2-groups--lookaround\" aria-label=\"2 groups  lookaround permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Groups &#x26; Lookaround</h2>\n<h3 id=\"1-groups\" style=\"position:relative;\"><a href=\"#1-groups\" aria-label=\"1 groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Groups</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#좋아요, #좋아요반사, #팔로우, #맞팔,</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">#(.+?),#</code> : 그룹화해서 ,특정 부분만 뽑고싶을 때(#와 , 제거 등) 사용</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">I am a tiny tiny boy.\nMay I have have a question?</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\\1</code>: 역참조.</li>\n</ul>\n<p><br/><br/></p>\n<h3 id=\"2-lookaround\" style=\"position:relative;\"><a href=\"#2-lookaround\" aria-label=\"2 lookaround permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Lookaround</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>소가죽 샌들 -레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>스마트 워치 -레몬스토어\n<span class=\"token punctuation\">[</span>품절<span class=\"token punctuation\">]</span>브이넥 반팔 티셔츠 -애플스토어\n쿨링밴딩 팬츠 -바나나스토어\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>남친룩 오버핏 셔츠 -래빗팜\n<span class=\"token punctuation\">[</span>특가할인<span class=\"token punctuation\">]</span>여친룩 오버핏 셔츠 -래빗팜</code></pre></div>\n<ul>\n<li><code class=\"language-text\">\\[(특가할인|품절)].*</code> : [특가할인] [품절]데이터를 뽑는 것.</li>\n<li><code class=\"language-text\">\\[(?:특가할인|품절)].*</code> : [특가할인] [품절]데이터를 뽑지만 그룹에 대한 결과로 나타내고 싶지 않은 경우</li>\n<li><code class=\"language-text\">\\[(?:특가할인|품절)].*</code> : 긍정형 전방 탐색\n<ul>\n<li><code class=\"language-text\">.*(?=-레몬스토어)</code></li>\n<li><code class=\"language-text\">.*?=-(?!레몬).*스토어</code></li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 정규표현식 사용방법(2)을 알아보았다. 다음 포스팅에서는 파이썬 re모듈 사용방법(1)에 대해 알아보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","excerpt":"오늘은 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 파트 2의 파이썬에서의 정규표현식 사용방법(2)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.  아래는 공부 인증 사진. 2022-06-20-Python-Photo1 2022-06-20-Python-Photo2  01. 정규표현식 소개 정규표현식: 문자열에서 특정 패턴을 찾고 싶을 때 조건문, 반복문 들을 복잡하게 사용해야할 때 사용 유효성 검사: if문을 사용하면 여러 줄에 걸쳐 작업해야하나 정규표현식은 아주 빠르게 할 수 있다.정 정규 표현식의 장점 문자열 추출, 유효성 검사에서 유용하게 쓰일 수 있다. 거의 모든 언어에서 지원(범용성이 높다) 정규 표현식의 단점 가독성이 좋지 못하다. 유지보수가 힘들다(내가 짠 코드를 남이 이해하기 어렵고, 남이 짠 코드를 내가 이해하기 어렵다). 예:   03. 정규표현식 사용방법(2) 1. …","frontmatter":{"date":"June 20, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 64일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220620-python-day64/"}},"next":{"id":"ab7ed1d0-0fe8-5da9-b0b3-8695a89c1d3b","html":"<p>최근 AWS 서비스 아키텍처를 그려야 할 일이 생겨 노션에 간단하게 정리하다 AWS 아이콘 모음과 아키텍처를 그릴 때 유용한 사이트, 정보 포스팅을 작성해보았다.</p>\n<br/>\n<h1 id=\"1-aws-서비스-아이콘-이미지-모음\" style=\"position:relative;\"><a href=\"#1-aws-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%95%84%EC%9D%B4%EC%BD%98-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%AA%A8%EC%9D%8C\" aria-label=\"1 aws 서비스 아이콘 이미지 모음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AWS 서비스 아이콘 이미지 모음</h1>\n<p>AWS는 아키텍처 다이어그램을 그리기 위한 아이콘 이미지 모음을 공식 웹사이트에서 제공한다(아래 웹사이트 링크에서 서드파티 툴들도 소개하고 있는데 대부분 AWS에서 제공하는 아이콘 이미지로 아키텍처를 그리는 듯).</p>\n<br/>\n<ul>\n<li><strong>AWS Architecture Icons:</strong> <a href=\"https://aws.amazon.com/ko/architecture/icons/\">https://aws.amazon.com/ko/architecture/icons/</a></li>\n</ul>\n<br/>\n<p>AWS는 서비스가 수시로 업데이트되고 추가되는 만큼, 아이콘들도 주기적으로 업데이트 되기 때문에 기존에 다운로드 받아놓았다 하더라도 그릴 때마다 새로 받아서 그리는 것을 추천한다.</p>\n<br/>\n<p>참고로 아이콘들은 다크모드/일반모드 배경 및 pptx,ppt,svg,png 등 다양한 포맷으로 제공되고 있으니 본인이 원하는 스타일의 파일을 다운로드 받으면 된다.</p>\n<br/>\n<p>참고로 아이콘 pptx를 살펴보면 아이콘 자체 뿐만아니라 해당 프레젠테이션 덱의 사용법도 나와있으니 잘 살펴보자.</p>\n<p><br/><br/></p>\n<h1 id=\"2-아키텍처-예시\" style=\"position:relative;\"><a href=\"#2-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%98%88%EC%8B%9C\" aria-label=\"2 아키텍처 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 아키텍처 예시</h1>\n<p>AWS는 공식 웹사이트의 아키텍처 센터에서 벤치마킹할만한 아키텍처 및 발표 자료, 백서 등을 제공한다. 원하는 서비스나 구조 등이 있으면 검색으로 찾아서 볼 수 있다.</p>\n<br/>\n<ul>\n<li><strong>AWS 아키텍처 센터:</strong> <a href=\"https://aws.amazon.com/ko/architecture\">https://aws.amazon.com/ko/architecture</a></li>\n</ul>\n<br/>\n<p>참고로 AWS 의 유명한 서비스가 대부분 들어가 있는 기본 아키텍처를 참고하고 싶다면 워드프레스(Wordpress)라는 호스팅 플랫폼에 웹페이지를 구성한 아키텍처를 참고해보자.</p>\n<br/>\n<ul>\n<li><strong>Hosting WordPress on AWS:</strong> <a href=\"https://github.com/aws-samples/aws-refarch-wordpress\">https://github.com/aws-samples/aws-refarch-wordpress</a></li>\n</ul>\n<p><img src=\"/assets/images/2022-06-19-AWS-icon/2022-06-19-AWS-icon.png\" alt=\"Hosting WordPress on AWS\"></p>\n<br/>\n<p>살펴보면 알겠지만 ALB, Cloudfront, Route53, EC2 등 실제로 많이 쓰이는 요소가 배치되어있다.</p>\n<br/>\n<p>이 외에도 다양한 상황에서의 글들이 많이 올라와있으니 확인해보자.</p>\n<p><br/><br/></p>\n<h1 id=\"3-well-architecture-framework\" style=\"position:relative;\"><a href=\"#3-well-architecture-framework\" aria-label=\"3 well architecture framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Well-Architecture Framework</h1>\n<p>AWS에서 아키텍처를 그릴 때 여섯 개의 축을 가지고 아키텍처를 그리게 되는데, 이 설계원칙을 <code class=\"language-text\">AWS Well-Architected</code> 라고 한다.</p>\n<br/>\n<p>AWS의 Well-Architected란 아래와 같은 총 6가지 원칙을 준수한다(6번의 지속 가능성 원칙은 최근에 추가된 것으로 보인다).</p>\n<br/>\n<h3 id=\"1-운영-우수성-원칙\" style=\"position:relative;\"><a href=\"#1-%EC%9A%B4%EC%98%81-%EC%9A%B0%EC%88%98%EC%84%B1-%EC%9B%90%EC%B9%99\" aria-label=\"1 운영 우수성 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 운영 우수성 원칙</h3>\n<p>운영 우수성 원칙은 시스템을 실행 및 모니터링하고 프로세스와 절차를 지속적으로 개선하는 데 중점을 둔다. 주요 주제에는 <strong>변경 자동화, 이벤트 대응 및 일상적인 작업 관리를 위한 표준 정의</strong>가 포함된다.</p>\n<br/>\n<h3 id=\"2-보안-원칙\" style=\"position:relative;\"><a href=\"#2-%EB%B3%B4%EC%95%88-%EC%9B%90%EC%B9%99\" aria-label=\"2 보안 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 보안 원칙</h3>\n<p>보안 원칙은 정보와 시스템을 보호하는 데 중점을 둔다. 주요 주제에는 <strong>데이터의 기밀성 및 무결성, 사용자 권한 관리, 보안 이벤트 감지를 위한 제어 설정</strong>이 포함된다.</p>\n<br/>\n<h3 id=\"3-안정성-원칙\" style=\"position:relative;\"><a href=\"#3-%EC%95%88%EC%A0%95%EC%84%B1-%EC%9B%90%EC%B9%99\" aria-label=\"3 안정성 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 안정성 원칙</h3>\n<p>안정성 원칙은 의도한 기능을 수행하는 워크로드와 요구 사항을 충족하기 위해 실패로부터 신속하게 복구하는 방법에 중점을 둔다. 주요 주제에는 <strong>분산 시스템 설계, 복구 계획</strong> 및 <strong>변화하는 요구 사항에 대한 적응</strong>이 포함된다.</p>\n<br/>\n<h3 id=\"4-성능-효율성-원칙\" style=\"position:relative;\"><a href=\"#4-%EC%84%B1%EB%8A%A5-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EC%9B%90%EC%B9%99\" aria-label=\"4 성능 효율성 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 성능 효율성 원칙</h3>\n<p>성능 효율성 원칙은 IT 및 컴퓨팅 리소스의 구조화되고 간소화된 할당에 중점을 둔다. 주요 주제에는 워크로드 요구 사항에 <strong>최적화된 리소스 유형 및 크기 선택, 성능 모니터링</strong>, 비즈니스 요구 사항 변화에 따른 <strong>효율성 유지</strong>가 포함된다.</p>\n<br/>\n<h3 id=\"5-비용-최적화-원칙\" style=\"position:relative;\"><a href=\"#5-%EB%B9%84%EC%9A%A9-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%9B%90%EC%B9%99\" aria-label=\"5 비용 최적화 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 비용 최적화 원칙</h3>\n<p>비용 최적화 원칙은 불필요한 비용 발생을 방지하는 데 중점을 둔다. 주요 주제에는 <strong>시간 경과에 따른 지출 이해 및 자금 할당 제어, 올바른 유형 및 수량의 리소스 선택, 초과 지출 없이 비즈니스 요구를 충족하도록 확장</strong>이 포함됩니다.</p>\n<br/>\n<h3 id=\"6-지속-가능성-원칙\" style=\"position:relative;\"><a href=\"#6-%EC%A7%80%EC%86%8D-%EA%B0%80%EB%8A%A5%EC%84%B1-%EC%9B%90%EC%B9%99\" aria-label=\"6 지속 가능성 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. <strong>지속 가능성 원칙</strong></h3>\n<p>지속 가능성 원칙은 클라우드 워크로드 실행이 환경에 미치는 영향을 최소화하는 데 중점을 둔다. 지속 가능성을 위한 <strong>공동 책임 모델, 영향 이해 및 활용</strong>을 극대화하여 필요한 리소스를 최소화하고 다운스트림 영향을 줄이는 방법과 같은 주요 주제를 다룬다.</p>\n<br/>\n<p>이 외에도 AWS에서 Well-Architected Labs라는 Lab을 제공해 위의 원칙들을 어떻게 적용해나가는 지 실습해볼 수 있다.</p>\n<br/>\n<ul>\n<li><strong>Well-Architected Labs:</strong> <a href=\"https://www.wellarchitectedlabs.com/\">https://www.wellarchitectedlabs.com/</a></li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"June 19, 2022","title":"서비스 아이콘 모음 및 아키텍처/다이어그램 작성에 유용한 자료","categories":"클라우드","author":"jinnypark9393","emoji":"💫"},"fields":{"slug":"/220619-cloud-aws-icon-and-architecture-references/"}},"prev":{"id":"d59edfb8-6835-555f-a8ea-b69eadf72ccb","html":"<p>오늘은 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 파트 2의 파이썬에서의 re모듈 사용방법(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-06-21-Python-Photo/2022-06-21-Python-Photo1.jpg\" alt=\"2022-06-21-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-06-21-Python-Photo/2022-06-21-Python-Photo2.jpg\" alt=\"2022-06-21-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"04-파이썬-re-모듈-사용-방법1\" style=\"position:relative;\"><a href=\"#04-%ED%8C%8C%EC%9D%B4%EC%8D%AC-re-%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%951\" aria-label=\"04 파이썬 re 모듈 사용 방법1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>04. 파이썬 re 모듈 사용 방법(1)</h1>\n<h2 id=\"1-re-모듈의-메서드\" style=\"position:relative;\"><a href=\"#1-re-%EB%AA%A8%EB%93%88%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1 re 모듈의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. re 모듈의 메서드</h2>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>찾는 경우</th>\n<th>없는 경우</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>match</td>\n<td>문자열 처음부터 검색</td>\n<td>match object 1개</td>\n<td>None</td>\n</tr>\n<tr>\n<td>search</td>\n<td>문자열 전체를 검색</td>\n<td>match object 1개</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>(regex, 문자열) 형태로 표현</li>\n</ul>\n<br/>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>찾는 경우</th>\n<th>없는 경우</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>findall</td>\n<td>문자열 전체를 검색</td>\n<td>문자열 리스트</td>\n<td>빈 리스트</td>\n</tr>\n<tr>\n<td>finditer</td>\n<td>문자열 전체를 검색</td>\n<td>match object iterator</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>findall ⇒ (’a’, ‘a’) 형태로 표현</li>\n<li>finditer ⇒ iterator(순서가 있는)의 약어.</li>\n</ul>\n<br/>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>찾는 경우</th>\n<th>없는 경우</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fullmatch</td>\n<td>패턴과 문자열이 남는 부분 없이 완벽하게 일치</td>\n<td>match object 1개</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p><br/><br/></p>\n<h2 id=\"2-match-객체의-메서드\" style=\"position:relative;\"><a href=\"#2-match-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2 match 객체의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. match 객체의 메서드</h2>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>기능</th>\n<th>반환 값 예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>group</td>\n<td>매칭된 문자열을 반환</td>\n<td>people</td>\n</tr>\n<tr>\n<td>start</td>\n<td>매칭된 문자열의 시작 위치</td>\n<td>5</td>\n</tr>\n<tr>\n<td>end</td>\n<td>매칭된 문자열의 끝 위치</td>\n<td>11</td>\n</tr>\n<tr>\n<td>span</td>\n<td>매칭된 문자열의 (시작, 끝) 튜플</td>\n<td>(5,11)</td>\n</tr>\n</tbody>\n</table>\n<p><br/><br/></p>\n<h2 id=\"3-실습\" style=\"position:relative;\"><a href=\"#3-%EC%8B%A4%EC%8A%B5\" aria-label=\"3 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 실습</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>맨 앞의 love를 지울 경우에는 어떻게 표시되는지 보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\nNone</code></pre></div>\n<br/>\n<ul>\n<li>search 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>findall 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<ul>\n<li>finditer를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></code></pre></div>\n<ul>\n<li>순서가 있는 오브젝트를 출력할 때에는 for in문을 사용해야한다.</li>\n</ul>\n<br/>\n<ul>\n<li>for in문을 사용해 finditer문의 결과를 다시 출력해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li>fullmatch도 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'Hey Guys, read books'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.*</code> 로 표현해도 일치할 것이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x108ea7fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span></code></pre></div>\n<br/>\n<h2 id=\"3-search-object의-메서드\" style=\"position:relative;\"><a href=\"#3-search-object%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"3 search object의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. search object의 메서드</h2>\n<ul>\n<li><code class=\"language-text\">.group()</code> 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople</code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.start()</code> 메서드도 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) start() : 매칭된 문자열의 시작 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과: 매칭된 문자열의 시작 위치(5)를 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople\n<span class=\"token number\">5</span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.end()</code> 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) start() : 매칭된 문자열의 시작 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 3) end() : 매칭된 문자열의 끝 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople\n<span class=\"token number\">5</span>\n<span class=\"token number\">11</span></code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">.span()</code> 메서드를 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> re\n\n<span class=\"token comment\"># 1. re 모듈의 메서드</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'love people around you, love your work, love yourself'</span>\n\n<span class=\"token comment\"># 1) match : 문자열의 처음부터 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2) search : 문자열의 전체를 검색 (결과 : 1개의 match 객체)</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3) findall : 문자열의 전체를 검색 (결과 : 문자열 리스트)</span>\nresults <span class=\"token operator\">=</span> re.findall<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4) finditer : 문자열의 전체를 검색 (결과 : match 객체 이터레이터(순서가 있는 자료형))</span>\nresults <span class=\"token operator\">=</span> re.finditer<span class=\"token punctuation\">(</span><span class=\"token string\">'love'</span>, str<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순서가 있는 자료형을 프린트 할 때에는 for in문을 사용한다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">result</span> <span class=\"token keyword\">in</span> results:\n    print<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5) fullmatch : 패턴과 문자열이 완벽하게 일치하는지 검사</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'Hey Guys, read books'</span>\nresult <span class=\"token operator\">=</span> re.fullmatch<span class=\"token punctuation\">(</span><span class=\"token string\">'.*'</span>, str2<span class=\"token punctuation\">)</span>\nprint<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. match object 의 메서드</span>\nresult <span class=\"token operator\">=</span> re.search<span class=\"token punctuation\">(</span><span class=\"token string\">'people'</span>, str<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1) group() : 매칭된 문자열 반환</span>\nprint<span class=\"token punctuation\">(</span>result.group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 2) start() : 매칭된 문자열의 시작 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 3) end() : 매칭된 문자열의 끝 위치 반환</span>\nprint<span class=\"token punctuation\">(</span>result.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token comment\"># 4) span() : 매칭된 문자열의 (시작, 끝)의 위치 튜플을 반환</span>\nprint<span class=\"token punctuation\">(</span>result.span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></code></pre></div>\n<br/>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myvenv git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ /usr/local/bin/python3 /Users/usr/Documents/python_advanced/myvenv/Chapter06/01.정규표현식\n<span class=\"token number\">1</span>.py\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'people'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span>, <span class=\"token string\">'love'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>callable_iterator object at 0x10c233fa<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span>, <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'love'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>re.Match object<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">span</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>, <span class=\"token assign-left variable\">match</span><span class=\"token operator\">=</span><span class=\"token string\">'Hey Guys, read books'</span><span class=\"token operator\">></span>\npeople\n<span class=\"token number\">5</span>\n<span class=\"token number\">11</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 강의의 파트 2의 re모듈 사용방법(1))을 알아보았다. 다음 포스팅에서는 파이썬 re모듈 사용방법(2)에 대해 알아보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","frontmatter":{"date":"June 21, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 65일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220621-python-day65/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220620-python-day64/","nextSlug":"/220619-cloud-aws-icon-and-architecture-references/","prevSlug":"/220621-python-day65/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}