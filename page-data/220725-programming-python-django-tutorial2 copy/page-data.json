{"componentChunkName":"component---src-templates-blog-template-js","path":"/220725-programming-python-django-tutorial2 copy/","result":{"data":{"cur":{"id":"0bb5b921-258d-515f-8368-c5cbfb938460","html":"<h1 id=\"1-배경-상황\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EA%B2%BD-%EC%83%81%ED%99%A9\" aria-label=\"1 배경 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배경 상황</h1>\n<p>Django 실습 내용을 Github 저장소에 업로드해서 소스코드를 관리하려고 새롭게 깃허브 저장소를 생성하고 코드를 올렸었다.</p>\n<br/>\n<p>그런데 올리자마자 메일 알람이 울리는 것;;; 내용을 확인했더니 GitGuardian이라는 곳에서 온 “Django Secret Key exposed on GitHub”이라는 보안 알람 메일이었다. 깜짝 놀라서 소스코드를 뜯어봤더니 settings.py에 SECRET_KEY가 대놓고 들어있어서 얼른 github에 생성했던 저장소를 삭제했다(실습 시작한지 진짜 얼마 안되어서 다행이었음).</p>\n<br/>\n<p>이 SECRET_KEY는 <a href=\"https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-SECRET_KEY\">Django의 보안 관련 기능</a>에 사용하는 값으로, 다음과 같은 경우에 사용된다.</p>\n<ul>\n<li><code class=\"language-text\">django.contrib.sessions.backends.cache</code>가 아닌 다른 세션 백엔드를 사용하는 경우 혹은 기본 <a href=\"https://docs.djangoproject.com/en/1.11/topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\">get_session_auth_hash()</a>를 사용하는 모든 <a href=\"https://docs.djangoproject.com/en/1.11/topics/http/sessions/\">sessions</a>.</li>\n<li><a href=\"https://docs.djangoproject.com/en/1.11/ref/contrib/messages/#django.contrib.messages.storage.cookie.CookieStorage\">CookieStorage</a> 혹은 <a href=\"https://docs.djangoproject.com/en/1.11/ref/contrib/messages/#django.contrib.messages.storage.fallback.FallbackStorage\">FallbackStorage</a>를 사용하는 모든 <a href=\"https://docs.djangoproject.com/en/1.11/ref/contrib/messages/\">messages</a>.</li>\n<li>모든 <a href=\"https://docs.djangoproject.com/en/1.11/topics/auth/default/#django.contrib.auth.views.PasswordResetView\">PasswordResetView</a> 토큰.</li>\n<li>다른 키가 제공되지 않는 <a href=\"https://docs.djangoproject.com/en/1.11/topics/signing/\">cryptographic signing</a> 에 사용된다.</li>\n</ul>\n<br/>\n<p>이 시크릿 키는 Django 프로젝트의 설정값을 모아놓은 <code class=\"language-text\">settings.py</code> 에 저장되어있는데, 아래와 같이 키값이 그대로 파일에 들어가있어 공개된 저장소에 올릴 경우 시크릿 키 값이 그대로 노출이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># SECURITY WARNING: keep the secret key used in production secret!</span>\nSECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">'django-insecure-(i6d9syn7v6s#=q19h4p64-vn&amp;%g6gw+vk7l&amp;uqu@ee9quz!i@'</span></code></pre></div>\n<br/>\n<p>구글링으로 찾아보니 SECRET_KEY를 노출하지 않고 관리하기 위해서는 환경변수로 지정하는 방법, 그리고 별도 파일로 분리해서 관리하는 방법, 총 두 가지 방법이 있었다.</p>\n<p><br/><br/></p>\n<h1 id=\"2-django-프로젝트의-secret_key를-별도-파일에-저장하기\" style=\"position:relative;\"><a href=\"#2-django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-secret_key%EB%A5%BC-%EB%B3%84%EB%8F%84-%ED%8C%8C%EC%9D%BC%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"2 django 프로젝트의 secret_key를 별도 파일에 저장하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Django 프로젝트의 SECRET_KEY를 별도 파일에 저장하기</h1>\n<p>기본으로 생성되는 키 대신 다른 키를 사용하고 싶다면 <a href=\"https://miniwebtool.com/django-secret-key-generator/\">Django Secret Key Generator</a>를 사용하거나, 아래의 코드를 실행해 임의의 50글자를 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> string, random\n\n<span class=\"token comment\"># Get ascii Characters numbers and punctuation (minus quote characters as they could terminate string).</span>\nchars <span class=\"token operator\">=</span> <span class=\"token string\">''</span>.join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>string.ascii_letters, string.digits, string.punctuation<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>.replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\'</span>', <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>.replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\"'</span>, <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>.replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span>, <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\nSECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">''</span>.join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>random.SystemRandom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.choice<span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nprint<span class=\"token punctuation\">(</span>SECRET_KEY<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>아래 명령어로 시크릿 키 값을 저장할 json파일을 프로젝트 root 디렉토리에 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token function\">touch</span> secrets.json\n➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ tree\n<span class=\"token builtin class-name\">.</span>\n├── db.sqlite3\n├── manage.py\n├── myfirstsite\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-310.pyc\n│   │   ├── settings.cpython-310.pyc\n│   │   ├── urls.cpython-310.pyc\n│   │   └── wsgi.cpython-310.pyc\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n├── polls\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-310.pyc\n│   │   ├── urls.cpython-310.pyc\n│   │   └── views.cpython-310.pyc\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   ├── urls.py\n│   └── views.py\n└── secrets.json\n\n<span class=\"token number\">5</span> directories, <span class=\"token number\">23</span> files</code></pre></div>\n<br/>\n<p>생성한 json 파일에 새로 생성한 시크릿 키 값을 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"SECRET_KEY\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"생성한 시크릿 키 값\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p><code class=\"language-text\">settings.py</code> 파일에서 새로운 모듈을 추가한 뒤, 하드코딩된 SECRET_KEY를 대체하는 코드를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> os, json\nfrom django.core.exceptions <span class=\"token function\">import</span> ImproperlyConfigured\n\nsecret_file <span class=\"token operator\">=</span> os.path.join<span class=\"token punctuation\">(</span>BASE_DIR, <span class=\"token string\">'secrets.json'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># secrets.json 파일 위치를 명시</span>\n\nwith open<span class=\"token punctuation\">(</span>secret_file<span class=\"token punctuation\">)</span> as f:\n    secrets <span class=\"token operator\">=</span> json.loads<span class=\"token punctuation\">(</span>f.read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\ndef get_secret<span class=\"token punctuation\">(</span>setting, <span class=\"token assign-left variable\">secrets</span><span class=\"token operator\">=</span>secrets<span class=\"token punctuation\">)</span>:\n    <span class=\"token string\">\"\"</span>\"비밀 변수를 가져오거나 명시적 예외를 반환한다.<span class=\"token string\">\"\"</span>\"\n    try:\n        <span class=\"token builtin class-name\">return</span> secrets<span class=\"token punctuation\">[</span>setting<span class=\"token punctuation\">]</span>\n    except KeyError:\n        error_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Set the {} environment variable\"</span>.format<span class=\"token punctuation\">(</span>setting<span class=\"token punctuation\">)</span>\n        raise ImproperlyConfigured<span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">)</span>\n\nSECRET_KEY <span class=\"token operator\">=</span> get_secret<span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_KEY\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p><code class=\"language-text\">.gitignore</code> 파일을 생성해 secrets.json 파일을 Git 커밋에 포함하지 않도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token function\">vi</span> .gitignore\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nsecrets.json</code></pre></div>\n<br/>\n<p>개발서버를 실행해 서버 빌드에 문제가 없는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage.py runserver \nWatching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes with StatReloader\nPerforming system checks<span class=\"token punctuation\">..</span>.\n\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n\nYou have <span class=\"token number\">18</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>. Your project may not work properly <span class=\"token keyword\">until</span> you apply the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: admin, auth, contenttypes, sessions.\nRun <span class=\"token string\">'python manage.py migrate'</span> to apply them.\nJuly <span class=\"token number\">24</span>, <span class=\"token number\">2022</span> - 00:44:49\nDjango version <span class=\"token number\">4.0</span>.6, using settings <span class=\"token string\">'myfirstsite.settings'</span>\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.</code></pre></div>\n<p>문제 없이 올라간 경우 git 명령어로 원격 저장소에 소스코드를 업로드하자(git status로 푸시 전 반드시 secrets.json이 스테이지 영역에서 제외되었는지 확인할 것).</p>\n<p><br/><br/></p>","excerpt":"1. 배경 상황 Django 실습 내용을 Github 저장소에 업로드해서 소스코드를 관리하려고 새롭게 깃허브 저장소를 생성하고 코드를 올렸었다. 그런데 올리자마자 메일 알람이 울리는 것;;; 내용을 확인했더니 GitGuardian이라는 곳에서 온 “Django Secret Key exposed on GitHub”이라는 보안 알람 메일이었다. 깜짝 놀라서 소스코드를 뜯어봤더니 settings.py에 SECRET_KEY가 대놓고 들어있어서 얼른 github에 생성했던 저장소를 삭제했다(실습 시작한지 진짜 얼마 안되어서 다행이었음). 이 SECRET_KEY는 Django의 보안 관련 기능에 사용하는 값으로, 다음과 같은 경우에 사용된다. 가 아닌 다른 세션 백엔드를 사용하는 경우 혹은 기본 get_session_auth_hash()를 사용하는 모든 sessions. CookieStorage 혹은 FallbackStorage를 사용하는 모든 messages. 모든 PasswordReset…","frontmatter":{"date":"July 25, 2022","title":"Python Django settings.py의 SECRET_KEY 변경 및 분리하기","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220725-programming-python-django-tutorial2 copy/"}},"next":{"id":"6065efab-2d62-5dc8-bd37-551b0b37291c","html":"<p>“<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 강의의 Django 파트를 수강하고 있는데, 생각보다 설명이 생략된 부분이 많아 코드 따라치기만 하게 되는듯해 Django 공식문서의 튜토리얼을 따라해 이해도를 높인 다음 다시 들으려한다.</p>\n<br/>\n<p>이 글은 Django 문서의 <a href=\"https://docs.djangoproject.com/ko/4.0/intro/tutorial01/\">첫 번째 장고 앱 작성하기</a> 튜토리얼을 참고해 실습한 내용을 정리한 것이다.</p>\n<p><br/><br/></p>\n<h1 id=\"1-산출물\" style=\"position:relative;\"><a href=\"#1-%EC%82%B0%EC%B6%9C%EB%AC%BC\" aria-label=\"1 산출물 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 산출물</h1>\n<ul>\n<li>Polls라는 이름의 간단한 설문조사 애플리케이션을 제작\n<ul>\n<li>Public: 사람들이 설문 내용을 보고 직접 투표할 수 있는 개방된 사이트</li>\n<li>Private: 관리자가 설문을 추가, 변경, 삭제할 수 있는 관리용 사이트</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-사전-작업\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%A0%84-%EC%9E%91%EC%97%85\" aria-label=\"2 사전 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 사전 작업</h1>\n<ul>\n<li>\n<p><code class=\"language-text\">Django</code> 를 설치한다(Django 4.0버전 기준. Python 3.8이상 버전 설치 권장).</p>\n</li>\n<li>\n<p>Django가 설치가 잘 되었는지 확인하기 위해 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  <span class=\"token operator\">~</span> git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 <span class=\"token operator\">-</span>m django <span class=\"token operator\">-</span><span class=\"token operator\">-</span>version\n<span class=\"token number\">4.0</span><span class=\"token number\">.6</span></code></pre></div>\n<ul>\n<li>설치가 되지 않았다면 “No module named django”와 같은 에러가 발생한다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-프로젝트-생성\" style=\"position:relative;\"><a href=\"#3-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"3 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 프로젝트 생성</h1>\n<p>프로젝트를 저장할 디렉터리로 이동한 후, 다음의 명령어를 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  github git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ django<span class=\"token operator\">-</span>admin startproject myfirstsite</code></pre></div>\n<ul>\n<li>myfirstsite라는 디렉터리가 생성되었다.</li>\n<li>참고: 프로젝트 생성 시, Python 혹은 Django에서 사용 중인 이름은 피해야 한다. 특히 django(Django 자체와 충돌 발생), test(Python 패키지 이름 중 하나)와 같은 이름은 피해야 한다.</li>\n</ul>\n<br/>\n<p>ll 명령어로 프로젝트 디렉터리가 잘 생성되었는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  github git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ ll\ntotal <span class=\"token number\">0</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">35</span> jinipark  staff   <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>1K Jun <span class=\"token number\">28</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">48</span> jinnypark9393<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">4</span> jinipark  staff   128B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span> myfirstsite</code></pre></div>\n<br/>\n<p>초기 생성된 Django 프로젝트 myfirstsite 하위에는 아래와 같은 디렉터리/파일이 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```python\n➜  myfirstsite git:(master) ✗ tree\n.\n├── manage.py\n└── myfirstsite\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n\n1 directory, 6 files\n```\n\n- **`manage.py`**: Django 프로젝트에서 사용하는 커맨드라인의 유틸리티. 자세한 정보는 [django-admin and manage.py](https://docs.djangoproject.com/ko/4.0/ref/django-admin/) 에서 확인.\n- **`myfirstsite/`** 디렉토리 내부에는 프로젝트를 위한 실제 Python 패키지들이 저장된다. 이 디렉토리 내의 이름을 이용하여, (**`myfirstsite.urls`** 와 같은 식으로) 프로젝트의 어디서나 Python 패키지들을 import할 수 있다.\n- **`myfirstsite/__init__.py`**: Python이 이 디렉토리를 패키지처럼 다루라고 알려주는 용도의 단순한 빈 파일이다. 패키지에 대해 궁금하다면 [패키지](https://docs.python.org/3/tutorial/modules.html#tut-packages)를 참고한다.\n- **`mysfirstite/settings.py`**: 현재 Django 프로젝트의 환경 및 구성을 저장한다. [Django settings](https://docs.djangoproject.com/ko/4.0/topics/settings/)에서 환경 설정이 어떻게 동작하는지 확인할 수 있다.\n- **`myfirstsite/urls.py`**: 현재 Django project 의 URL 선언을 저장한다. 사이트의 “목차” 라고 생각하면 된다. 자세한 내용은 [URL dispatcher](https://docs.djangoproject.com/ko/4.0/topics/http/urls/) 를 참고한다.\n- **`myfirstsite/asgi.py`**: 현재 프로젝트를 서비스하기 위한 ASGI-호환 웹 서버의 진입점이다. 자세한 내용은 [ASGI를 사용하여 배포하는 방법](https://docs.djangoproject.com/ko/4.0/howto/deployment/asgi/) 를 참고한다.\n- **`myfirstsite/wsgi.py`**: 현재 프로젝트를 서비스하기 위한 WSGI 호환 웹 서버의 진입점다. 자세한 내용은 [WSGI를 사용하여 배포하는 방법](https://docs.djangoproject.com/ko/4.0/howto/deployment/wsgi/)를 참고한다.</code></pre></div>\n<p><br/><br/></p>\n<h1 id=\"4-개발-서버\" style=\"position:relative;\"><a href=\"#4-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84\" aria-label=\"4 개발 서버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 개발 서버</h1>\n<p><code class=\"language-text\">myfirstsite</code> 디렉터리로 이동해 다음 명령어를 입력하면 Django 개발 서버를 시작할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py runserver\nWatching <span class=\"token keyword\">for</span> <span class=\"token builtin\">file</span> changes <span class=\"token keyword\">with</span> StatReloader\nPerforming system checks<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\nYou have <span class=\"token number\">18</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> Your project may <span class=\"token keyword\">not</span> work properly until you <span class=\"token builtin\">apply</span> the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> admin<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> contenttypes<span class=\"token punctuation\">,</span> sessions<span class=\"token punctuation\">.</span>\nRun <span class=\"token string\">'python manage.py migrate'</span> to <span class=\"token builtin\">apply</span> them<span class=\"token punctuation\">.</span>\nJuly <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2022</span> <span class=\"token operator\">-</span> <span class=\"token number\">14</span><span class=\"token punctuation\">:</span><span class=\"token number\">39</span><span class=\"token punctuation\">:</span><span class=\"token number\">59</span>\nDjango version <span class=\"token number\">4.0</span><span class=\"token number\">.6</span><span class=\"token punctuation\">,</span> using settings <span class=\"token string\">'myfirstsite.settings'</span>\nStarting development server at http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8000</span><span class=\"token operator\">/</span>\nQuit the server <span class=\"token keyword\">with</span> CONTROL<span class=\"token operator\">-</span>C<span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n<ul>\n<li>데이터베이스에 적용되지 않은 변경사항들(migrations)는 현재는 크게 신경쓰지 않아도 된다.</li>\n<li>웹 브라우저에서 <code class=\"language-text\">http://127.0.0.1:8000</code> 을 입력해 개발서버에 접속할 수 있다.</li>\n<li>개발 서버는 순수 Python으로 작성된 경량의 웹 서버이며 운영 이관 전까지 Apache와 같은 운영 서버를 구성할 필요 없이 신속하게 개발 할 수 있도록 만들어진 도구이다(운영 환경과 유사한 환경에서는 사용하지 말 것)</li>\n<li>포트 변경\n<ul>\n<li>\n<p>기본적으로 runserver 명령은 8080포트를 사용하도록 설정되어있다.</p>\n</li>\n<li>\n<p>이 설정을 변경하려면 아래와 같이 커맨드라인에서 인수를 전달하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py runserver <span class=\"token number\">8080</span></code></pre></div>\n</li>\n<li>\n<p>IP를 변경하려면 포트와 함께 커맨드라인에서 인수를 전달한다.</p>\n</li>\n</ul>\n</li>\n<li>runserver는 요청이 들어올 때마다 Python 파일을 다시 불러오므로 코드 변경사항 반영을 위해 서버를 기동하지 않아도 된다. 다만 파일 추가 등 몇 동작은 개발서버가 자동으로 인식하지 못하는 경우도 있다.</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"5-설문조사polls-앱-만들기\" style=\"position:relative;\"><a href=\"#5-%EC%84%A4%EB%AC%B8%EC%A1%B0%EC%82%ACpolls-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"5 설문조사polls 앱 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 설문조사(polls) 앱 만들기</h1>\n<p>다음으로는 생성된 프로젝트 내에서 앱(app)을 생성해보자. Django에서는 앱의 기본 디렉터리 구조를 자동으로 생성해준다.</p>\n<ul>\n<li>참고: 프로젝트와 앱의 차이\n<ul>\n<li>앱: 블로그 시스템, 공개 기록 데이터베이스 또는 소규모 의견조사 앱과 같은 작업을 수행하는 웹 애플리케이션.</li>\n<li>프로젝트: 특정 웹 사이트에 대한 구성 및 앱의 모음. 한 프로젝트에 여러 개의 앱이 포함될 수 있으며, 앱은 여러 프로젝트에 있을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p>manage.py가 존재하는 디렉터리에서 polls라는 이름의 앱을 생성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py startapp polls\n➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ ll\ntotal <span class=\"token number\">8</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">-</span><span class=\"token operator\">-</span>r<span class=\"token operator\">-</span><span class=\"token operator\">-</span>  <span class=\"token number\">1</span> jinipark  staff     0B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">39</span> db<span class=\"token punctuation\">.</span>sqlite3\n<span class=\"token operator\">-</span>rwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">1</span> jinipark  staff   667B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span> manage<span class=\"token punctuation\">.</span>py\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">8</span> jinipark  staff   256B Jul <span class=\"token number\">23</span> <span class=\"token number\">23</span><span class=\"token punctuation\">:</span><span class=\"token number\">39</span> myfirstsite\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">9</span> jinipark  staff   288B Jul <span class=\"token number\">24</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">50</span> polls\n➜  myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ cd polls\n➜  polls git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ tree\n<span class=\"token punctuation\">.</span>\n├── __init__<span class=\"token punctuation\">.</span>py\n├── admin<span class=\"token punctuation\">.</span>py\n├── apps<span class=\"token punctuation\">.</span>py\n├── migrations\n│   └── __init__<span class=\"token punctuation\">.</span>py\n├── models<span class=\"token punctuation\">.</span>py\n├── tests<span class=\"token punctuation\">.</span>py\n└── views<span class=\"token punctuation\">.</span>py</code></pre></div>\n<h1 id=\"6-첫-번째-뷰-작성하기\" style=\"position:relative;\"><a href=\"#6-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B7%B0-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"6 첫 번째 뷰 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 첫 번째 뷰 작성하기</h1>\n<p><code class=\"language-text\">polls</code> 디렉터리의 <code class=\"language-text\">view.py</code>파일을 열어 다음과 같은 파이썬 코드를 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world. You're at the polls index.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>뷰를 생성한 뒤에는 URLconf를 사용해 뷰를 호출할 수 있도록 URL을 연결해준다. 먼저, urls.py라는 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  polls git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ <span class=\"token function\">touch</span> urls.py\n➜  polls git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ tree\n<span class=\"token builtin class-name\">.</span>\n├── __init__.py\n├── admin.py\n├── apps.py\n├── migrations\n│   └── __init__.py\n├── models.py\n├── tests.py\n├── urls.py\n└── views.py\n\n<span class=\"token number\">1</span> directory, <span class=\"token number\">8</span> files</code></pre></div>\n<p><code class=\"language-text\">urls.py</code> 파일에 다음과 같은 코드를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">from django.urls <span class=\"token function\">import</span> path\n\nfrom <span class=\"token builtin class-name\">.</span> <span class=\"token function\">import</span> views\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span>, view.index, <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>다음으로는 최상위 URLconf에서 <code class=\"language-text\">polls.urls</code> 모듈을 바라보게 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">from django.contrib <span class=\"token function\">import</span> admin\nfrom django.urls <span class=\"token function\">import</span> path\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'polls/'</span>, include<span class=\"token punctuation\">(</span><span class=\"token string\">'polls.urls'</span><span class=\"token punctuation\">))</span>,\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span>, admin.site.urls<span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">include()</code> : 다른 URLconf들을 참조할 수 있도록 도와주는 함수. Django가 이 함수를 만나게 되면 URL의 그 시점까지 일치하는 부분을 잘라내고, 남은 문자열 부분을 후속 처리를 위해 include된 URLconf로 전달한다.</li>\n</ul>\n<p><code class=\"language-text\">polls</code> 의 index뷰가 잘 연결되어있는지 확인하기 위해 개발서버를 올려 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage.py runserver\nWatching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes with StatReloader\nPerforming system checks<span class=\"token punctuation\">..</span>.\n\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n\nYou have <span class=\"token number\">18</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>. Your project may not work properly <span class=\"token keyword\">until</span> you apply the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: admin, auth, contenttypes, sessions.\nRun <span class=\"token string\">'python manage.py migrate'</span> to apply them.\nJuly <span class=\"token number\">23</span>, <span class=\"token number\">2022</span> - <span class=\"token number\">21</span>:07:37\nDjango version <span class=\"token number\">4.0</span>.6, using settings <span class=\"token string\">'myfirstsite.settings'</span>\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.</code></pre></div>\n<p><code class=\"language-text\">http://127.0.0.1:8000/polls</code>를 브라우저에 입력하면 polls의 index 뷰에 정의한 “Hello, world. You’re at the polls index.” 가 보인다.</p>\n<p><code class=\"language-text\">path()</code> 함수에는 필수 인수 <code class=\"language-text\">route</code> &#x26; <code class=\"language-text\">view</code>, 추가 옵션으로 <code class=\"language-text\">kwargs</code> &#x26; <code class=\"language-text\">name</code> 까지 총 4개의 인수가 전달된다.</p>\n<h2 id=\"1-path-인수-route\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-route\" aria-label=\"1 path 인수 route permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: route</h2>\n<ul>\n<li>URL 패턴을 가진 문자열. 요청이 처리될 때 Django는 urlpatterns의 첫 패턴부터 일치하는 패턴을 찾을때까지 요청된 URL을 각 패턴과 리스트를 순서대로 비교한다.</li>\n<li>패턴은 GET, POST의 매개변수들, 혹은 도메인 이름을 색인하지 않는다.\n<ul>\n<li><code class=\"language-text\">https://www.example.com/myapp/</code> → <code class=\"language-text\">myapp/</code> 만 바라본다.</li>\n<li><code class=\"language-text\">https://www.example.com/myapp/?page=3</code> → <code class=\"language-text\">myapp/</code>만 바라본다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-path-인수-view\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-view\" aria-label=\"1 path 인수 view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: view</h2>\n<ul>\n<li>일치하는 패턴을 찾으면, <a href=\"https://docs.djangoproject.com/ko/4.0/ref/request-response/#django.http.HttpRequest\">HttpRequest</a> 객체를 첫번째 인수로 하여 경로로 부터 ‘캡처된’ 값을 키워드 인수로하여 특정한 view 함수를 호출한다.</li>\n</ul>\n<h2 id=\"1-path-인수-kwargs\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-kwargs\" aria-label=\"1 path 인수 kwargs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: kwargs</h2>\n<ul>\n<li>임의의 키워드 인수들은 목표한 view 에 딕셔너리형으로 전달된다.</li>\n</ul>\n<h2 id=\"1-path-인수-name\" style=\"position:relative;\"><a href=\"#1-path-%EC%9D%B8%EC%88%98-name\" aria-label=\"1 path 인수 name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. path() 인수: name</h2>\n<ul>\n<li>URL 에 name을 붙이면, 템플릿을 포함한 Django 어디에서나 명확하게 참조할 수 있다.</li>\n<li>이 기능을 이용해 단 하나의 파일만 수정해도 project 내의 모든 URL 패턴을 바꿀 수 있다.</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 24, 2022","title":"Python Django 튜토리얼(1)프로젝트/앱 생성하고 view 작성하기","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220724-programming-python-django-tutorial1/"}},"prev":{"id":"24e06a85-7e42-51a2-94ac-ed60de158d13","html":"<h1 id=\"1-데이터베이스-설치\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EC%B9%98\" aria-label=\"1 데이터베이스 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데이터베이스 설치</h1>\n<p>settings.py를 열어보자. settings.py는 Django 설정을 모듈 변수로 표현한 보통의 Python 모듈이다.</p>\n<br/>\n<p>Django에서는 기본적으로 SQLite를 사용하도록 구성되어있으며(Python에서 기본으로 제공되어 별도 설치 불필요), 이번 실습에서는 SQLite를 활용하여 데이터베이스를 구성하도록 한다. 만약 다른 데이터베이스를 사용하고 싶은 경우 DATABASES의 키 값을 적절히 변경해준다(상세 설명은 <a href=\"https://docs.djangoproject.com/ko/4.0/intro/tutorial02/\">공식문서</a>를 참고한다).</p>\n<p><br/><br/></p>\n<h2 id=\"1-settingspy설정\" style=\"position:relative;\"><a href=\"#1-settingspy%EC%84%A4%EC%A0%95\" aria-label=\"1 settingspy설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. settings.py설정</h2>\n<p>settings.py의 TIME_ZONE 설정값을 수정해 현재 작업하고 있는 시간대를 맞춰준다.</p>\n<br/>\n<p>settings.py의 <a href=\"https://docs.djangoproject.com/ko/4.0/ref/settings/#std-setting-INSTALLED_APPS\">INSTALLED_APPS</a>는 현재 Django 인스턴스에서 활성화된 모든 Django 어플리케이션들의 이름이 들어있다. 앱들은 다수의 프로젝트에서 사용될 수 있고, 다른 프로젝트에서 쉽게 사용될 수 있도록 패키징하여 배포할 수 있다.</p>\n<br/>\n<p><a href=\"https://docs.djangoproject.com/ko/4.0/ref/settings/#std-setting-INSTALLED_APPS\">INSTALLED_APPS</a>에 기본적으로 설정되어 있는 앱은 아래와 같다.</p>\n<br/>\n<ul>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/ref/contrib/admin/#module-django.contrib.admin\">django.contrib.admin</a> – 관리용 사이트.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/topics/auth/#module-django.contrib.auth\">django.contrib.auth</a> – 인증 시스템.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/ref/contrib/contenttypes/#module-django.contrib.contenttypes\">django.contrib.contenttypes</a> – 컨텐츠 타입을 위한 프레임워크.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/topics/http/sessions/#module-django.contrib.sessions\">django.contrib.sessions</a> – 세션 프레임워크.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/ref/contrib/messages/#module-django.contrib.messages\">django.contrib.messages</a> – 메세징 프레임워크.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/ref/contrib/staticfiles/#module-django.contrib.staticfiles\">django.contrib.staticfiles</a> – 정적 파일을 관리하는 프레임워크.</li>\n</ul>\n<br/>\n<p>애플리케이션들은 데이터베이스 테이블을 사용하므로, 데이터베이스에서 테이블을 생성해야한다. 다음 명령으로 테이블을 생성해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  myfirstsite git:<span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> python3 manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0001_initial<span class=\"token punctuation\">..</span>. OK\n  Applying admin.0001_initial<span class=\"token punctuation\">..</span>. OK\n  Applying admin.0002_logentry_remove_auto_add<span class=\"token punctuation\">..</span>. OK\n  Applying admin.0003_logentry_add_action_flag_choices<span class=\"token punctuation\">..</span>. OK\n  Applying contenttypes.0002_remove_content_type_name<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0002_alter_permission_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0003_alter_user_email_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0004_alter_user_username_opts<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0005_alter_user_last_login_null<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0006_require_contenttypes_0002<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0007_alter_validators_add_error_messages<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0008_alter_user_username_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0009_alter_user_last_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0010_alter_group_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0011_update_proxy_permissions<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0012_alter_user_first_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying sessions.0001_initial<span class=\"token punctuation\">..</span>. OK</code></pre></div>\n<ul>\n<li><code class=\"language-text\">migrate</code> : INSTALLED_APPS의 설정을 탐색해 settings.py의 데이터베이스 설정 및 app과 함께 제공되는 database migrations에 따라 데이터베이스 테이블을 생성한다.</li>\n<li>생성 내용을 확인하려면 데이터베이스 클라이언트로 접속 후 <code class=\"language-text\">\\dt</code> (PostgreSQL), <code class=\"language-text\">SHOW TABLES;</code> (MariaDB, MySQL), <code class=\"language-text\">.tables</code> (SQLite), <code class=\"language-text\">SELECT TABLE_NAME FROM USER_TABLES;</code>(Oracle)로 확인할 수 있다.</li>\n<li>기본 앱 중에 필요 없는 앱이 있다면 INSTALLED_APPS에서 주석처리하면 migrate 명령에서 데이터베이스 테이블을 생성하지 않는다.</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"2-모델-만들기\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A8%EB%8D%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"2 모델 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 모델 만들기</h1>\n<p>모델이란 부가적인 메타데이터를 가진 데이터베이스의 구조(layout)을 뜻한다.</p>\n<br/>\n<h2 id=\"django-철학-1\" style=\"position:relative;\"><a href=\"#django-%EC%B2%A0%ED%95%99-1\" aria-label=\"django 철학 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Django 철학 (1)</h2>\n<ul>\n<li>모델 = 데이터에 대한 단 하나의 확실한 정보 출처</li>\n<li>저장 중인 데이터의 필수 필드 및 동작 포함</li>\n<li>DRY Principle(Don’t Repeat Yourself)을 준수: 데이터 모델을 한 곳에서 정의 및 데이터 모델 자동으로 파생(<code class=\"language-text\">migration</code>: 모델 파일에서 파생)</li>\n</ul>\n<br/>\n<p>이 설문조사 앱에서는 <code class=\"language-text\">Question</code> 과 <code class=\"language-text\">Choice</code> 라는 두 가지 모델을 생성한다.</p>\n<ul>\n<li><code class=\"language-text\">Questions</code>: 질문 및 발행일</li>\n<li><code class=\"language-text\">Choice</code>: 선택 텍스트, 투표 집계</li>\n<li>각 <code class=\"language-text\">Choice</code> 모델은 <code class=\"language-text\">Question</code>과 연동된다.</li>\n</ul>\n<br/>\n<p>위의 개념은 Python 클래스로 표현된다. <code class=\"language-text\">polls/models.py</code>파일을 아래와 같이 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># Create your models here.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    question_text <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    pub_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span><span class=\"token string\">'date published'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Choice</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    question <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Question<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    choice_text <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    votes <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Question, Choice 각 모델은 :class:<code class=\"language-text\">django.db.models.Model</code>의 하위 클래스로 표현된다.</li>\n<li>모델은 여러 클래스 변수를 가지며 각 클래스 변수는 모델에서 데이터베이스 필드를 나타낸다.\n<ul>\n<li>예: 모델 <code class=\"language-text\">Question</code> 은 <code class=\"language-text\">questions_text</code> 와 <code class=\"language-text\">pub_date</code> 라는 클래스 변수를 가지며 각 클래스 변수는 데이터베이스의 필드에 해당한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<p>데이터베이스의 각 필드는 <code class=\"language-text\">Field</code> 클래스의 인스턴스로서 표현되며, 각 필드가 어떤 자료형을 가질 수 있는지 Django에 알려주는 역할을 한다.</p>\n<ul>\n<li>CharField: 문자(Character) 필드</li>\n<li>DateTimeField: 날짜와 시간(Datetime)필드</li>\n</ul>\n<p>각 Field 인스턴스의 이름(<code class=\"language-text\">questions_text</code> 와 <code class=\"language-text\">pub_date</code>)는 기계가 읽기 좋은 형식의 데이터베이스 필드 이름이다. 이 필드명을 <strong>Python 코드</strong>에서 사용할 수 있으며, 데이터베이스에서는 <strong>컬럼명</strong>으로 사용된다.</p>\n<br/>\n<ul>\n<li>Field 클래스 생성자에 선택적인 첫번째 위치 인수를 전달하여 사람이 읽기 좋은(human-readable) 이름을 지정할 수도 있습니다. 이 방법은 Django 의 내부를 설명하는 용도로 종종 사용되는데, 이는 마치 문서가 늘어나는 것 같은 효과를 가집니다. 만약 이 선택적인 첫번째 위치 인수를 사용하지 않으면, Django 는 기계가 읽기 좋은 형식의 이름을 사용합니다. 이 예제에서는, <code class=\"language-text\">Question.pub_date</code>에 한해서만 인간이 읽기 좋은 형태의 이름을 정의하겠습니다. 그 외의 다른 필드들은, 기계가 읽기 좋은 형태의 이름이라도 사람이 읽기에는 충분합니다.</li>\n<li>일부 Field 클래스는 필수 인수가 필요하다(예: CharField → max_length 가 필요)</li>\n<li>Field 는 다양한 옵션 인수를 가질 수 있다(예: default를 이용해 votes의 기본값을 0으로 설정)</li>\n<li>ForeignKey를 사용해 모델간의 관계를 설정할 수 있다.\n<ul>\n<li>예: 각 Choice가 하나의 Question에 연관</li>\n<li>Django에서 지원하는 데이터베이스 관계:  다-대-일(many-to-one), 다-대-다(many-to-many), 일-대-일(one-to-one) 등 모든 일반 데이터베이스의 관계</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>\n<h1 id=\"3-모델의-활성화\" style=\"position:relative;\"><a href=\"#3-%EB%AA%A8%EB%8D%B8%EC%9D%98-%ED%99%9C%EC%84%B1%ED%99%94\" aria-label=\"3 모델의 활성화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 모델의 활성화</h1>\n<p>위에서 작성한 코드를 이용해 Django에서는 다음과 같은 작업을 수행할 수 있다.</p>\n<br/>\n<ul>\n<li>앱을 위한 데이터베이스 스키마 생성(CREATE TABLE문)</li>\n<li>Question과 Choice객체에 접근하기 위한 Python 데이터베이스 접근 API 생성</li>\n</ul>\n<br/>\n<h2 id=\"django의-철학2\" style=\"position:relative;\"><a href=\"#django%EC%9D%98-%EC%B2%A0%ED%95%992\" aria-label=\"django의 철학2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Django의 철학(2)</h2>\n<ul>\n<li>Django의 앱들은 끼웠다 뺐다 할 수 있다(=모듈)</li>\n<li>앱을 다수의 프로젝트에서 사용 혹은 배포할 수 있다.</li>\n<li>특정 Django 사이트에 앱이 묶여있지 않아도 된다.</li>\n</ul>\n<br/>\n<p>위의 작업을 수행하기 전, 프로젝트에 <code class=\"language-text\">polls</code> 앱이 설치되어 있다는 것을 알려야 한다. 그러기 위해서는 <code class=\"language-text\">INSTALLED_APPS</code> 설정에 앱을 추가해야 한다. polls 앱의 설정을 담은 PollsConfig 클래스는 <code class=\"language-text\">polls/apps.py</code> 파일 내에 존재한다. 따라서 점으로 구분된 경로는 <code class=\"language-text\">polls.apps.PollsConfig</code> 가 된다. 이 점으로 구분된 경로를 <code class=\"language-text\">django-myfirstsite/settings.py</code> 파일을 편집해 아래와 같이 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'polls.apps.PollsConfig'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<p>이제 Django에서 polls앱을 인식할 수 있다. 다음은 makemigrations 명령어를 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  django<span class=\"token operator\">-</span>myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py makemigrations polls\nMigrations <span class=\"token keyword\">for</span> <span class=\"token string\">'polls'</span><span class=\"token punctuation\">:</span>\n  polls<span class=\"token operator\">/</span>migrations<span class=\"token operator\">/</span>0001_initial<span class=\"token punctuation\">.</span>py\n    <span class=\"token operator\">-</span> Create model Question\n    <span class=\"token operator\">-</span> Create model Choice</code></pre></div>\n<ul>\n<li><code class=\"language-text\">makemigrations</code>: 모델 변경 사항(위의 경우는 모델을 생성) 및 변경사항을 migration으로 저장하고 싶다는 점을 Django에 알려준다.</li>\n<li><code class=\"language-text\">Migration</code>: Django가 모델(데이터베이스 스키마)의 변경사항을 디스크에 저장하는 방법. Django의 변경점을 수동으로 수정하는 것도 가능하다.</li>\n<li><code class=\"language-text\">migrate</code> 명령어: migration을 실행하고 자동으로 데이터베이스 스키마(모델)를 관리하는 역할.</li>\n</ul>\n<br/>\n<p>migration이 내부적으로 실행하는 SQL문장은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  django<span class=\"token operator\">-</span>myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py sqlmigrate polls <span class=\"token number\">0001</span>\nBEGIN<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span> Create model Question\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>\nCREATE TABLE <span class=\"token string\">\"polls_question\"</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span> integer NOT NULL PRIMARY KEY AUTOINCREMENT<span class=\"token punctuation\">,</span> <span class=\"token string\">\"question_text\"</span> varchar<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> NOT NULL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pub_date\"</span> datetime NOT NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span> Create model Choice\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>\nCREATE TABLE <span class=\"token string\">\"polls_choice\"</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span> integer NOT NULL PRIMARY KEY AUTOINCREMENT<span class=\"token punctuation\">,</span> <span class=\"token string\">\"choice_text\"</span> varchar<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> NOT NULL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"votes\"</span> integer NOT NULL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"question_id\"</span> bigint NOT NULL REFERENCES <span class=\"token string\">\"polls_question\"</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> DEFERRABLE INITIALLY DEFERRED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCREATE INDEX <span class=\"token string\">\"polls_choice_question_id_c5b4b260\"</span> ON <span class=\"token string\">\"polls_choice\"</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"question_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCOMMIT<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>사용하는 데이터베이스에 따라 출력 결과가 다를 수 있다.</li>\n<li>테이블 이름: 앱 이름과 모델 이름(소문자)가 조합되어 자동 생성 (예: polls_question, polls_choice)</li>\n<li>기본 키(ID): 자동으로 추가</li>\n<li>외래 키: 필드명에 <code class=\"language-text\">_id</code> 이름을 자동으로 추가</li>\n<li>외래 키 관계는 <code class=\"language-text\">FOREIGN KEY</code> 라는 제약에 의해 명시된다(SQLite에서는 보이지 않음). <code class=\"language-text\">DEFERRABLE</code> 부분은 DBMS에 트랜잭션이 끝날 때까지 외래 키를 강제하지 말라고 알려준다.</li>\n<li>사용하는 데이터베이스에 따라, 데이터베이스 고유의 필드타입이 조정된다. 따라서, 자동 증가 필드를 생성할 경우, <code class=\"language-text\">auto_increment</code>(MySQL), <code class=\"language-text\">serial</code>(PostgreSQL), <code class=\"language-text\">integer primary key autoincrement</code>(SQLite)와 같이 사용하는 데이터베이스에 따라 적절한 필드타입이 자동으로 선택된다. 필드 명에 사용되는 인용부호도 상황에 따라 겹따옴표나 홑따옴표가 적절히 선택된다.</li>\n<li><code class=\"language-text\">sqlmigrate</code>명령은 실제로 데이터베이스에서 마이그레이션을 실행하는 것이 아니라 화면에 인쇄하여 필요한 SQL Django를 확인할 수 있도록 한다. 이것은 Django가 수행할 작업이나 변경을 위해 SQL 스크립트를 필요로 하는 데이터베이스 관리자가 있는지 확인하는 데 유용하다.</li>\n</ul>\n<br/>\n<p>더 자세히 알고 싶은 경우 <code class=\"language-text\">python manage.py check</code> 명령어를 통해 마이그레이션을 수행해보자.</p>\n<br/>\n<p>migrate을 실행해 데이터베이스 모델과 관련된 테이블을 생성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  django<span class=\"token operator\">-</span>myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py migrate\nOperations to perform<span class=\"token punctuation\">:</span>\n  Apply <span class=\"token builtin\">all</span> migrations<span class=\"token punctuation\">:</span> admin<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> contenttypes<span class=\"token punctuation\">,</span> polls<span class=\"token punctuation\">,</span> sessions\nRunning migrations<span class=\"token punctuation\">:</span>\n  Applying polls<span class=\"token punctuation\">.</span>0001_initial<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> OK</code></pre></div>\n<p>migrate 명령은 아직 적용되지 않은 마이그레이션을 수집해 실행한다(Django는 django_migrations 테이블을 두어 마이그레이션 적용 여부를 추적). 이 과정을 통해 모델에서의 변경 사항과 데이터베이스 스키마의 동기화가 이루어진다.</p>\n<br/>\n<p>데이터베이스나 테이블에 손대지 않고도 모델의 반복적인 변경을 가능하게 해준다. 동작 중인 데이터베이스를 자료 손실 없이 업그레이드 하는 데 최적화 되어 있다. 이제 모델의 변경을 만드는 아래 세 단계를 기억하도록 하자.</p>\n<ul>\n<li>(<code class=\"language-text\">models.py</code> 에서) 모델을 변경한다.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/ref/django-admin/#django-admin-makemigrations\">python manage.py makemigrations</a>을 통해 이 변경사항에 대한 마이그레이션을 생성한다.</li>\n<li><a href=\"https://docs.djangoproject.com/ko/4.0/ref/django-admin/#django-admin-migrate\">python manage.py migrate</a>명령을 통해 변경사항을 데이터베이스에 적용한다.</li>\n</ul>\n<br/>\n<p>마이그레이션 생성과 적용 명령이 분리된 것은 Git과 같은 버전 관리 시스템에 마이그레이션을 커밋하고 앱과 함께 출시할 수 있도록 하기 위해서이다. 개발을 쉽게 해줄 뿐 아니라, 다른 개발자가 운영 환경에서도 사용할 수 있게 해준다(<code class=\"language-text\">manage.py</code> 유틸리티로 어떤 일들을 할 수 있는지 <a href=\"https://docs.djangoproject.com/ko/4.0/ref/django-admin/\">django-admin 문서</a>를 참고한다).</p>\n<p><br/><br/></p>\n<h1 id=\"4-api-가지고-놀기\" style=\"position:relative;\"><a href=\"#4-api-%EA%B0%80%EC%A7%80%EA%B3%A0-%EB%86%80%EA%B8%B0\" aria-label=\"4 api 가지고 놀기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. API 가지고 놀기</h1>\n<p>대화형 Python 쉘으로 Django API를 다뤄보자. 아래 명령어를 사용해 Python 쉘을 실행하자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">➜  django<span class=\"token operator\">-</span>myfirstsite git<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span> ✗ python3 manage<span class=\"token punctuation\">.</span>py shell\nPython <span class=\"token number\">3.10</span><span class=\"token number\">.4</span> <span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">.</span><span class=\"token number\">10.4</span><span class=\"token punctuation\">:</span>9d38120e33<span class=\"token punctuation\">,</span> Mar <span class=\"token number\">23</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">:</span><span class=\"token number\">05</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Clang <span class=\"token number\">13.0</span><span class=\"token number\">.0</span> <span class=\"token punctuation\">(</span>clang<span class=\"token operator\">-</span><span class=\"token number\">1300.0</span><span class=\"token number\">.29</span><span class=\"token number\">.30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> on darwin\nType <span class=\"token string\">\"help\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"copyright\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"credits\"</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> more information<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">(</span>InteractiveConsole<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>쉘에 진입한 후, <a href=\"https://docs.djangoproject.com/ko/4.0/topics/db/queries/\">데이터베이스 API</a>를 탐험해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 방금 생성한 모델 클래스를 import한다</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> polls<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Choice<span class=\"token punctuation\">,</span> Question  \n\n<span class=\"token comment\"># 시스템에 아직 Question이 등록되지 않았다.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 신규 Question을 생성하자.</span>\n<span class=\"token comment\"># Support for time zones is enabled in the default settings file, so</span>\n<span class=\"token comment\"># Django expects a datetime with tzinfo for pub_date. Use timezone.now()</span>\n<span class=\"token comment\"># instead of datetime.datetime.now() and it will do the right thing.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> timezone\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q <span class=\"token operator\">=</span> Question<span class=\"token punctuation\">(</span>question_text<span class=\"token operator\">=</span><span class=\"token string\">\"What's new?\"</span><span class=\"token punctuation\">,</span> pub_date<span class=\"token operator\">=</span>timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 객체를 DB에 저장한다. save() 을 명시적으로 불러와야한다.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 이제 해당 객체에 ID가 부여되었다.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span>\n<span class=\"token number\">1</span>\n\n<span class=\"token comment\"># 파이썬 속성을 통한 접근 모델(Access model) 필드값.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>question_text\n<span class=\"token string\">\"What's new?\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>pub_date\ndatetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">714138</span><span class=\"token punctuation\">,</span> tzinfo<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>timezone<span class=\"token punctuation\">.</span>utc<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 속성을 변경해 값을 변경하고 save()를 불러온다.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>question_text <span class=\"token operator\">=</span> <span class=\"token string\">\"What's up?\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># objects.all()은 데이터베이스의 모든 질문들을 표시한다.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> Question <span class=\"token builtin\">object</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>마지막 결과값은 <a href=\"Question:%C2%A0Question%C2%A0object%C2%A0(1)\">Question: Question object (1)</a>인데, 이러한 출력 형태로는 객체를 이해하기 어렵다.</li>\n</ul>\n<br/>\n<p><code class=\"language-text\">polls/models.py</code> 파일의 Question과 Choice에 <code class=\"language-text\">__str__()</code> 메서드를 추가해 모델을 수정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># Create your models here.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    question_text <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    pub_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span><span class=\"token string\">'date published'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 데이터베이스의 필드값을 알기 쉽게 표시한다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>question_text\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Choice</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    question <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Question<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    choice_text <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    votes <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 데이터베이스의 필드값을 알기 쉽게 표시한다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>choice_text</code></pre></div>\n<ul>\n<li><code class=\"language-text\">__str__()</code> 메서드의 추가는 객체 표현을 대화형 프롬프트에서 편하게 보려는 이유 외에도 Django가 자동으로 생성하는 관리 사이트에서도 이 객체 표현이 사용된다.</li>\n</ul>\n<br/>\n<p>이 모델에 커스텀 메소드도 추가해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> timezone\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> timezone\n\n<span class=\"token comment\"># Create your models here.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Question</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    question_text <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    pub_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span><span class=\"token string\">'date published'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 데이터베이스의 필드값을 알기 쉽게 표시한다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>question_text\n    <span class=\"token keyword\">def</span> <span class=\"token function\">was_published_recently</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>pub_date <span class=\"token operator\">>=</span> timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Choice</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    question <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Question<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    choice_text <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    votes <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 데이터베이스의 필드값을 알기 쉽게 표시한다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>choice_text</code></pre></div>\n<ul>\n<li><code class=\"language-text\">import datetime</code> 은 파이썬의 표준 모듈인 datetime 모듈을, <code class=\"language-text\">from django.utils import timezone</code> 은 Django의 시간 관련 유틸리티인 django.utils.timezone을 참조하기 위해 추가</li>\n</ul>\n<br/>\n<p>변경 사항을 저장하고 <code class=\"language-text\">python manage.py shell</code> 을 다시 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> polls<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Choice<span class=\"token punctuation\">,</span> Question\n\n<span class=\"token comment\"># Make sure our __str__() addition worked.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> What's up?<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># Django provides a rich database lookup API that's entirely driven by</span>\n<span class=\"token comment\"># keyword arguments.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> What's up?<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>question_text__startswith<span class=\"token operator\">=</span><span class=\"token string\">'What'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> What's up?<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># Get the question that was published this year.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> timezone\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> current_year <span class=\"token operator\">=</span> timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>year\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pub_date__year<span class=\"token operator\">=</span>current_year<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> What's up?<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># Request an ID that doesn't exist, this will raise an exception.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nDoesNotExist<span class=\"token punctuation\">:</span> Question matching query does <span class=\"token keyword\">not</span> exist<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># Lookup by a primary key is the most common case, so Django provides a</span>\n<span class=\"token comment\"># shortcut for primary-key exact lookups.</span>\n<span class=\"token comment\"># The following is identical to Question.objects.get(id=1).</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> What's up?<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># Make sure our custom method worked.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q <span class=\"token operator\">=</span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>was_published_recently<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span>\n\n<span class=\"token comment\"># Give the Question a couple of Choices. The create call constructs a new</span>\n<span class=\"token comment\"># Choice object, does the INSERT statement, adds the choice to the set</span>\n<span class=\"token comment\"># of available choices and returns the new Choice object. Django creates</span>\n<span class=\"token comment\"># a set to hold the \"other side\" of a ForeignKey relation</span>\n<span class=\"token comment\"># (e.g. a question's choice) which can be accessed via the API.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q <span class=\"token operator\">=</span> Question<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Display any choices from the related object set -- none so far.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># Create three choices.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>choice_text<span class=\"token operator\">=</span><span class=\"token string\">'Not much'</span><span class=\"token punctuation\">,</span> votes<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> Not much<span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>choice_text<span class=\"token operator\">=</span><span class=\"token string\">'The sky'</span><span class=\"token punctuation\">,</span> votes<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> The sky<span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>choice_text<span class=\"token operator\">=</span><span class=\"token string\">'Just hacking again'</span><span class=\"token punctuation\">,</span> votes<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Choice objects have API access to their related Question objects.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span>question\n<span class=\"token operator\">&lt;</span>Question<span class=\"token punctuation\">:</span> What's up?<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># And vice versa: Question objects get access to Choice objects.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> Not much<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> The sky<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> Just hacking again<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n\n<span class=\"token comment\"># The API automatically follows relationships as far as you need.</span>\n<span class=\"token comment\"># Use double underscores to separate relationships.</span>\n<span class=\"token comment\"># This works as many levels deep as you want; there's no limit.</span>\n<span class=\"token comment\"># Find all Choices for any question whose pub_date is in this year</span>\n<span class=\"token comment\"># (reusing the 'current_year' variable we created above).</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Choice<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>question__pub_date__year<span class=\"token operator\">=</span>current_year<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>QuerySet <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> Not much<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> The sky<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Choice<span class=\"token punctuation\">:</span> Just hacking again<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># Let's delete one of the choices. Use delete() for that.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>choice_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>choice_text__startswith<span class=\"token operator\">=</span><span class=\"token string\">'Just hacking'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>모델의 관계 → <a href=\"https://docs.djangoproject.com/ko/4.0/ref/models/relations/\">관련 객체에 접근하기</a>를 참고</p>\n</li>\n<li>\n<p>API에서 이중 밑줄(<strong><code class=\"language-text\">__</code></strong>) 을 이용해 어떻게 필드를 조회할 수 있는지 → <a href=\"https://docs.djangoproject.com/ko/4.0/topics/db/queries/#field-lookups-intro\">필드 조회</a>를 참고</p>\n</li>\n<li>\n<p>데이터베이스 API → <a href=\"https://docs.djangoproject.com/ko/4.0/topics/db/queries/\">데이터베이스 API 레퍼런스</a>를 참고.</p>\n</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"July 26, 2022","title":"Python Django 튜토리얼(2)데이터베이스 설치, API 실습","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220726-programming-python-django-tutorial2/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220725-programming-python-django-tutorial2 copy/","nextSlug":"/220724-programming-python-django-tutorial1/","prevSlug":"/220726-programming-python-django-tutorial2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}