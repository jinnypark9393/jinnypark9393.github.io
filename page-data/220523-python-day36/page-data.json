{"componentChunkName":"component---src-templates-blog-template-js","path":"/220523-python-day36/","result":{"data":{"cur":{"id":"f9dd679f-ac3d-5bdb-88ca-fac0004aa523","html":"<p>오늘도 어제에 이어서 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 12-3. 블로그 프로젝트 - 게시물 로딩 기능 구현을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-05-23-Python-Photo/2022-05-23-Python-Photo1.JPG\" alt=\"2022-05-23-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-05-23-Python-Photo/2022-05-23-Python-Photo2.JPG\" alt=\"2022-05-23-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h1 id=\"03-블로그-게시글-로딩하기\" style=\"position:relative;\"><a href=\"#03-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B2%8C%EC%8B%9C%EA%B8%80-%EB%A1%9C%EB%94%A9%ED%95%98%EA%B8%B0\" aria-label=\"03 블로그 게시글 로딩하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. 블로그 게시글 로딩하기</h1>\n<h2 id=\"1-프로그램-기능-구현하기\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"1 프로그램 기능 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로그램 기능 구현하기</h2>\n<ul>\n<li>\n<p>게시글 로딩하기 기능의 의사 코드(Pseudo Code)를 작성해보자.</p>\n<ul>\n<li>**의사코드(Pseudo Code)**란? 직역하면 가짜(Pseudo) 코드라는 뜻으로, 프로그램 코드를 작성하기위해 프로그램의 진행 과정을 단계별로 기록해 놓은 것.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 게시글 로딩하기</span>\n\ndata.csv 파일이 있으면\n    게시글을 로딩한다.\ndata.csv 파일이 없으면\n    data.csv파일을 만든다.\n\n<span class=\"token comment\"># 게시글 로딩 기능</span>\ndata.csv 파일을 읽는다.\n데이터 한 줄마다\n    Post 인스턴스를 만든다.\n    Post 리스트에 인스턴스를 저장한다.</code></pre></div>\n<ul>\n<li>게시글 로딩 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>, 파이썬 공부 <span class=\"token number\">2</span>일차, 연산 배웠다, <span class=\"token number\">2</span>\n<span class=\"token number\">2</span>, 파이썬 공부 <span class=\"token number\">3</span>일차, 조건문 배웠다, <span class=\"token number\">0</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"2-코드-구현\" style=\"position:relative;\"><a href=\"#2-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84\" aria-label=\"2 코드 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 코드 구현</h2>\n<ul>\n<li>위에서 의사코드로 작성한 내용을 실제 코드로 구현해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> os\n\n<span class=\"token comment\"># 파일 경로</span>\nfile_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./myvenv/Chapter12/data.csv\"</span> <span class=\"token comment\"># data.csv 파일 경로를 변수로 지정해준다.</span>\n\n<span class=\"token comment\"># data.csv 파일이 있다면</span>\n<span class=\"token keyword\">if</span> os.path.exists<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 결과로 true를 반환한다</span>\n    <span class=\"token comment\"># 게시글 로딩</span>\n    pass\nelse:\n    <span class=\"token comment\"># 파일 생성하기</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"w\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span>, <span class=\"token assign-left variable\">newline</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    f.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>파일유무를 체크하기 위해 os.path.exists 모듈을 활용한다: os 모듈을 import한 뒤 사용할 수 있음</p>\n</li>\n<li>\n<p>파일 생성 ⇒ open 함수를 이용해 생성. newline은 윈도우 환경일 때 추가할 것.</p>\n</li>\n<li>\n<p>실행결과: data.csv 파일이 Chapter12 폴더 하위에 생성된다.</p>\n<p><img src=\"/assets/images/2022-05-23-Python-Photo/2022-05-23-Python-Photo3.png\" alt=\"2022-05-23-Python-Photo3.png\"></p>\n<ul>\n<li>file not found 에러가 발생한 경우 경로 설정을 다시 확인해보자.</li>\n</ul>\n</li>\n<li>\n<p>테스트를 위해 data.csv 파일에 데이터를 넣어준다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>,테스트,테스트입니다</code></pre></div>\n<ul>\n<li>게시글 로딩을 구현해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> os\n<span class=\"token function\">import</span> csv\n\n<span class=\"token comment\"># 파일 경로</span>\nfile_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./myvenv/Chapter12/data.csv\"</span> <span class=\"token comment\"># data.csv 파일 경로를 변수로 지정해준다.</span>\n\n<span class=\"token comment\"># data.csv 파일이 있다면</span>\n<span class=\"token keyword\">if</span> os.path.exists<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 결과로 true를 반환한다</span>\n    <span class=\"token comment\"># 게시글 로딩</span>\n    print<span class=\"token punctuation\">(</span><span class=\"token string\">\"게시글 로딩중...\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"r\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span>\n    reader <span class=\"token operator\">=</span> csv.reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">data</span> <span class=\"token keyword\">in</span> reader:\n        print<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nelse:\n    <span class=\"token comment\"># 파일 생성하기</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"w\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span>, <span class=\"token assign-left variable\">newline</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    f.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>위의 코드가 이해가 되지 않는다면 <strong>파일 입출력</strong> 파트의 <strong>csv 입출력 강의</strong>를 복습하고 오자.</p>\n</li>\n<li>\n<p>csv.reader는 순회 가능한 함수 ⇒ for in 문을 사용해 데이터를 한줄씩 리스트 형태로 뽑아와 data객체에 저장할 수 있다.</p>\n</li>\n<li>\n<p>지금까지 만든 부분을 출력해보자.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents\n/python_basic/myvenv/bin/python /Users/usr/Do\ncuments/python_basic/myvenv/Chapter12/main.py\n게시글 로딩중<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span>, <span class=\"token string\">'테스트'</span>, <span class=\"token string\">'테스트입니다'</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span>, <span class=\"token string\">'테스트2'</span>, <span class=\"token string\">'테스트입니다2'</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>\n<p>게시글을 리스트 형태로 잘 받아오는 것을 확인할 수 있다. 이제 인덱스를 이용해 각 데이터에 접근할 수 있다.</p>\n</li>\n<li>\n<p>지금까지 구현된 코드를 확인해보자.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 게시글 로딩하기</span>\n\ndata.csv 파일이 있으면 <span class=\"token comment\"># 구현 완료</span>\n    게시글을 로딩한다. <span class=\"token comment\"># 구현중</span>\ndata.csv 파일이 없으면 <span class=\"token comment\"># 구현 완료</span>\n    data.csv파일을 만든다. <span class=\"token comment\"># 구현중</span>\n\n<span class=\"token comment\"># 게시글 로딩 기능</span>\ndata.csv 파일을 읽는다. <span class=\"token comment\"># 구현 완료</span>\n데이터 한 줄마다 <span class=\"token comment\"># 구현 완료(데이터 한 줄씩 리스트 형태로 불러오기)</span>\n    Post 인스턴스를 만든다. <span class=\"token comment\"># 구현해야 함</span>\n    Post 리스트에 인스턴스를 저장한다. <span class=\"token comment\"># 구현해야 함</span></code></pre></div>\n<ul>\n<li>post 객체를 저장할 리스트를 생성하고 post 객체를 불러온다(이해가 되지 않을 경우 <strong>모듈과 패키지</strong> 강의를 복습하자)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> os\n<span class=\"token function\">import</span> csv\nfrom post <span class=\"token function\">import</span> Post\n\n<span class=\"token comment\"># 파일 경로</span>\nfile_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./myvenv/Chapter12/data.csv\"</span> <span class=\"token comment\"># data.csv 파일 경로를 변수로 지정해준다.</span>\n\n<span class=\"token comment\"># post 객체를 저장할 리스트 생성</span>\npost_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># data.csv 파일이 있다면</span>\n<span class=\"token keyword\">if</span> os.path.exists<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 결과로 true를 반환한다</span>\n    <span class=\"token comment\"># 게시글 로딩</span>\n    print<span class=\"token punctuation\">(</span><span class=\"token string\">\"게시글 로딩중...\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"r\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span>\n    reader <span class=\"token operator\">=</span> csv.reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">data</span> <span class=\"token keyword\">in</span> reader:\n        print<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\nelse:\n    <span class=\"token comment\"># 파일 생성하기</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"w\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span>, <span class=\"token assign-left variable\">newline</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    f.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Post 객체를 생성해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> os\n<span class=\"token function\">import</span> csv\nfrom post <span class=\"token function\">import</span> Post\n\n<span class=\"token comment\"># 파일 경로</span>\nfile_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./myvenv/Chapter12/data.csv\"</span> <span class=\"token comment\"># data.csv 파일 경로를 변수로 지정해준다.</span>\n\n<span class=\"token comment\"># post 객체를 저장할 리스트 생성</span>\npost_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># data.csv 파일이 있다면</span>\n<span class=\"token keyword\">if</span> os.path.exists<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 결과로 true를 반환한다</span>\n    <span class=\"token comment\"># 게시글 로딩</span>\n    print<span class=\"token punctuation\">(</span><span class=\"token string\">\"게시글 로딩중...\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"r\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span>\n    reader <span class=\"token operator\">=</span> csv.reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">data</span> <span class=\"token keyword\">in</span> reader:\n        <span class=\"token comment\"># post 인스턴스 생성하기</span>\n        post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>, data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>, data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>, int<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span> <span class=\"token comment\"># Post 인스턴스를 생성해 post 객체에 담아준다.</span>\n        post_list.append<span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\nelse:\n    <span class=\"token comment\"># 파일 생성하기</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"w\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span>, <span class=\"token assign-left variable\">newline</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    f.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nprint<span class=\"token punctuation\">(</span>post_list<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>print문으로 post_list를 확인하면 2개의 객체가 담겨있는 것을 알 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents\n/python_basic/myvenv/bin/python /Users/usr/Do\ncuments/python_basic/myvenv/Chapter12/main.py\n게시글 로딩중<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>post.Post object at 0x104ddea7<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>, <span class=\"token operator\">&lt;</span>post.Post object at 0x104eece2<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>post_list에 저장된 첫번째 객체에서 get_title 메서드를 호출해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">import</span> os\n<span class=\"token function\">import</span> csv\nfrom post <span class=\"token function\">import</span> Post\n\n<span class=\"token comment\"># 파일 경로</span>\nfile_path <span class=\"token operator\">=</span> <span class=\"token string\">\"./myvenv/Chapter12/data.csv\"</span> <span class=\"token comment\"># data.csv 파일 경로를 변수로 지정해준다.</span>\n\n<span class=\"token comment\"># post 객체를 저장할 리스트 생성</span>\npost_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># data.csv 파일이 있다면</span>\n<span class=\"token keyword\">if</span> os.path.exists<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 결과로 true를 반환한다</span>\n    <span class=\"token comment\"># 게시글 로딩</span>\n    print<span class=\"token punctuation\">(</span><span class=\"token string\">\"게시글 로딩중...\"</span><span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"r\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span>\n    reader <span class=\"token operator\">=</span> csv.reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">data</span> <span class=\"token keyword\">in</span> reader:\n        <span class=\"token comment\"># post 인스턴스 생성하기</span>\n        post <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>, data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>, data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>, int<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span> <span class=\"token comment\"># Post 인스턴스를 생성해 post 객체에 담아준다.</span>\n        post_list.append<span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\nelse:\n    <span class=\"token comment\"># 파일 생성하기</span>\n    f <span class=\"token operator\">=</span> open<span class=\"token punctuation\">(</span>file_path, <span class=\"token string\">\"w\"</span>, <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"utf8\"</span>, <span class=\"token assign-left variable\">newline</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    f.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nprint<span class=\"token punctuation\">(</span>post_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.get_title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token comment\"># 호출 부분</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic /Users/usr/Documents\n/python_basic/myvenv/bin/python /Users/usr/Do\ncuments/python_basic/myvenv/Chapter12/main.py\n게시글 로딩중<span class=\"token punctuation\">..</span>.\n테스트</code></pre></div>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 블로그의 게시물 로딩 기능을 구현해보았다. 다음 포스팅에서는 메뉴 출력하기, 게시글 쓰기 기능을 구현하도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","excerpt":"오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 12-3. 블로그 프로젝트 - 게시물 로딩 기능 구현을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.  아래는 공부 인증 사진. 2022-05-23-Python-Photo1 2022-05-23-Python-Photo2  03. 블로그 게시글 로딩하기 1. 프로그램 기능 구현하기 게시글 로딩하기 기능의 의사 코드(Pseudo Code)를 작성해보자. **의사코드(Pseudo Code)**란? 직역하면 가짜(Pseudo) 코드라는 뜻으로, 프로그램 코드를 작성하기위해 프로그램의 진행 과정을 단계별로 기록해 놓은 것. 게시글 로딩 예시 2. 코드 구현 위에서 의사코드로 작성한 내용을 실제 코드로 구현해보자. 파일유무를 체크하기 위해 os.path.exists 모듈을 활용한다: os 모듈을 import한 뒤 사용할 수 있음…","frontmatter":{"date":"May 23, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 36일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220523-python-day36/"}},"next":{"id":"905dcb20-0f11-5415-8ed0-96e1cb839da4","html":"<h1 id=\"제-2장-변수와-배열\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-2%EC%9E%A5-%EB%B3%80%EC%88%98%EC%99%80-%EB%B0%B0%EC%97%B4\" aria-label=\"제 2장 변수와 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 2장 변수와 배열</h1>\n<h2 id=\"19-2차원-배열의-각-요소는-2개의-첨자로-구별한다\" style=\"position:relative;\"><a href=\"#19-2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B0%81-%EC%9A%94%EC%86%8C%EB%8A%94-2%EA%B0%9C%EC%9D%98-%EC%B2%A8%EC%9E%90%EB%A1%9C-%EA%B5%AC%EB%B3%84%ED%95%9C%EB%8B%A4\" aria-label=\"19 2차원 배열의 각 요소는 2개의 첨자로 구별한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. 2차원 배열의 각 요소는 2개의 첨자로 구별한다</h2>\n<ul>\n<li>2차원 배열에서는 행과 열에 대해 각각 ‘0’(또는 ‘1’)로 시작하는 요소번호를 붙여 교차점에 있는 배열요소를 가리킨다.</li>\n<li>예시\n<ul>\n<li>배열명[행 요소번호][열 요소번호] ⇒ ARRAY[2][6]</li>\n<li>배열명(행 요소번호)(열 요소번호) ⇒ ARRAY(2)(6)</li>\n<li>배열명[행 요소번호, 열 요소번호] ⇒ ARRAY[2, 6]</li>\n<li>배열명(행 요소번호, 열 요소번호) ⇒ ARRAY(2, 6)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"20-문자열은-문자-데이터의-배열이다\" style=\"position:relative;\"><a href=\"#20-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EB%AC%B8%EC%9E%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%B4%EB%8B%A4\" aria-label=\"20 문자열은 문자 데이터의 배열이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20. 문자열은 문자 데이터의 배열이다</h2>\n<ul>\n<li>문자열은 각 요소에 문자가 저장된 문자 타입 배열이다.</li>\n<li>예: 문자열 ‘ABC’: 문자타입 데이터를 저장할 수 있는 배열의 1번째 요소에 문자 ‘A’, 2번째 요소에 문자 ‘B’, 3번째 요소에 문자 ‘C’가 저장된 것이다.</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"May 23, 2022","title":"그림으로 배우는 알고리즘 제 2장 - 변수와 배열(7)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220523-algorithm-book-with-pic/"}},"prev":{"id":"fc33f28a-79c2-5df8-9f7b-fbf5040dae6c","html":"<h1 id=\"제-2장-변수와-배열\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-2%EC%9E%A5-%EB%B3%80%EC%88%98%EC%99%80-%EB%B0%B0%EC%97%B4\" aria-label=\"제 2장 변수와 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 2장 변수와 배열</h1>\n<h2 id=\"21-문자열의-길이는-문자길이-변수-또는-보초-값이-관리한다\" style=\"position:relative;\"><a href=\"#21-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%98-%EA%B8%B8%EC%9D%B4%EB%8A%94-%EB%AC%B8%EC%9E%90%EA%B8%B8%EC%9D%B4-%EB%B3%80%EC%88%98-%EB%98%90%EB%8A%94-%EB%B3%B4%EC%B4%88-%EA%B0%92%EC%9D%B4-%EA%B4%80%EB%A6%AC%ED%95%9C%EB%8B%A4\" aria-label=\"21 문자열의 길이는 문자길이 변수 또는 보초 값이 관리한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>21. 문자열의 길이는 문자길이 변수 또는 ‘보초 값’이 관리한다</h2>\n<ul>\n<li>문자열은 1번째 요소부터 차례로 문자가 저장된 문자 타입의 배열 ⇒ 문자열이 끝날 때 배열이 끝났음을 알려주어야한다.</li>\n<li>문자열이 끝남을 알려주는 방법\n<ul>\n<li>\n<p>문자 열 길이 변수를 준비</p>\n<p>: 배열 속 문자열 길이를 정수 타입 변수에 저장해 참조한다.</p>\n</li>\n<li>\n<p>문자 열 끝에 <strong>보초 값</strong>을 저장</p>\n<ul>\n<li>문자열의 구성 문자로 절대로 표시되지 않는 문자 코드(<strong>보초 값</strong>)를 배열 끝 부분에 저장</li>\n<li>일반적으로 숫자 0(문자 ‘0’ 아님)을 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"column-관용적으로-사용되는-변수명\" style=\"position:relative;\"><a href=\"#column-%EA%B4%80%EC%9A%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EB%B3%80%EC%88%98%EB%AA%85\" aria-label=\"column 관용적으로 사용되는 변수명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Column: 관용적으로 사용되는 변수명</h2>\n<ol>\n<li>\n<p>반복문의 반복 횟수를 저장하는 변수</p>\n<p>: 반복 처리 알고리즘에서 반복 횟수를 유지하는 정수 타입 변수명은 <strong>i, j, k</strong>를 자주 사용</p>\n</li>\n<li>\n<p>배열 첨자로 사용되는 변수</p>\n<p>: <strong>index, idx</strong></p>\n</li>\n<li>\n<p>수를 세는 데 사용되는 변수</p>\n<p>: <strong>count, counter, cnt</strong></p>\n</li>\n<li>\n<p>문자열을 다루는 변수(배열)</p>\n<p>: <strong>str, string</strong></p>\n</li>\n</ol>\n<br/>\n<h1 id=\"제-3장-자료구조\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-3%EC%9E%A5-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\" aria-label=\"제 3장 자료구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 3장: 자료구조</h1>\n<h2 id=\"22-대량-데이터를-효율적으로-관리하기-위한-메커니즘이-자료구조\" style=\"position:relative;\"><a href=\"#22-%EB%8C%80%EB%9F%89-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98%EC%9D%B4-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\" aria-label=\"22 대량 데이터를 효율적으로 관리하기 위한 메커니즘이 자료구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22. 대량 데이터를 효율적으로 관리하기 위한 메커니즘이 자료구조</h2>\n<ul>\n<li><strong>자료구조</strong>: 대량 데이터를 효율적으로 관리하기 위한 메커니즘</li>\n<li>예시\n<ul>\n<li>우편번호: 앞 3자리로 대략적인 시, 군, 자치구를 파악할 수 있어 배송처의 범위를 빠르게 좁힐 수 있음</li>\n<li>출석번호: 무작위로 나열된 학생 명단에서 특정 학생을 찾는 것은 어렵지만 학년, 반, 출석번호 라는 정보를 부여하면 해당 학생을 효율적으로 찾을 수 있다.</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/></p>","frontmatter":{"date":"May 24, 2022","title":"그림으로 배우는 알고리즘 제 2장 - 변수와 배열(8), 제3장 - 자료구조(1)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220524-algorithm-book-with-pic/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220523-python-day36/","nextSlug":"/220523-algorithm-book-with-pic/","prevSlug":"/220524-algorithm-book-with-pic/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}