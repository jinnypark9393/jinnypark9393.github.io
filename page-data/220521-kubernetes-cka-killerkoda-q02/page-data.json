{"componentChunkName":"component---src-templates-blog-template-js","path":"/220521-kubernetes-cka-killerkoda-q02/","result":{"data":{"cur":{"id":"52e45724-be66-57a0-8ddc-2f2bac432930","html":"<h1 id=\"q2-api서버-장애\" style=\"position:relative;\"><a href=\"#q2-api%EC%84%9C%EB%B2%84-%EC%9E%A5%EC%95%A0\" aria-label=\"q2 api서버 장애 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2. API서버 장애</h1>\n<p>이 실습에서는 API서버가 여러 방식으로 망가지도록 잘못 설정한 뒤, 에러를 확인할 수 있는 로그 경로를 확인한다.</p>\n<br/>\n<p>당신은 API서버가 올라오지 않는 상황에 익숙해져야 한다.</p>\n<br/>\n<p>API서버 매니페스트 파일에 <code class=\"language-text\">—-this-is-very-wrong</code> 이라는 신규 인자(argument)를 설정하자. 파드가 다시 올라오는지 확인하고, 이 설정이 어떤 로그를 발생시키는지 확인하자.</p>\n<br/>\n<h2 id=\"로그-경로\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8-%EA%B2%BD%EB%A1%9C\" aria-label=\"로그 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그 경로</h2>\n<p>아래는 확인해야할 로그 경로이다.</p>\n<ul>\n<li><code class=\"language-text\">/var/log/pods</code></li>\n<li><code class=\"language-text\">/var/log/containers</code></li>\n<li><code class=\"language-text\">crictl ps</code> + <code class=\"language-text\">crictl logs</code></li>\n<li><code class=\"language-text\">docker ps</code> + <code class=\"language-text\">docker logs</code> (컨테이너 런타임으로 도커를 사용할 경우)</li>\n<li>Kubelet 로그: <code class=\"language-text\">/var/log/syslog</code> 혹은 <code class=\"language-text\">journalctl</code></li>\n</ul>\n<br/>\n<h2 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># 항상 백업을 생성하자<span class=\"token operator\">!</span>\ncp <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>kubernetes<span class=\"token operator\">/</span>manifests<span class=\"token operator\">/</span>kube<span class=\"token operator\">-</span>apiserver<span class=\"token punctuation\">.</span>yaml\n\n# 변경 사항을 적용하자\nvim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>kubernetes<span class=\"token operator\">/</span>manifests<span class=\"token operator\">/</span>kube<span class=\"token operator\">-</span>apiserver<span class=\"token punctuation\">.</span>yaml\n\n# 컨테이너가 재시작할때까지 기다리자\nwatch crictl ps\n\n# <span class=\"token constant\">API</span> 서버 파드를 확인하자\nk <span class=\"token operator\">-</span>n kube<span class=\"token operator\">-</span>system <span class=\"token keyword\">get</span> pod</code></pre></div>\n<br/>\n<ul>\n<li>API 서버가 돌아오지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># 파드 로그를 확인한다\n\ncat <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>log<span class=\"token operator\">/</span>pods<span class=\"token operator\">/</span>kube<span class=\"token operator\">-</span>system_kube<span class=\"token operator\">-</span>apiserver<span class=\"token operator\">-</span>controlplane_<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hashed</span> <span class=\"token attr-name\">value</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">/kube-apiserver/X.log\n> 2022-01-26T10:41:12.401641185Z stderr F Error: unknown flag: --this-is-very-wrong</span></code></pre></div>\n<br/>\n<p>변경사항을 취소하고 다음 실습으로 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"># 백업을 사용하면 편리하다\ncp <span class=\"token operator\">~</span><span class=\"token operator\">/</span>kube<span class=\"token operator\">-</span>apiserver<span class=\"token punctuation\">.</span>yaml<span class=\"token punctuation\">.</span>ori <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>kuberentes<span class=\"token operator\">/</span>manifests<span class=\"token operator\">/</span>kube<span class=\"token operator\">-</span>apiserver<span class=\"token punctuation\">.</span>yaml</code></pre></div>\n<br/>","excerpt":"Q2. API서버 장애 이 실습에서는 API서버가 여러 방식으로 망가지도록 잘못 설정한 뒤, 에러를 확인할 수 있는 로그 경로를 확인한다. 당신은 API서버가 올라오지 않는 상황에 익숙해져야 한다. API서버 매니페스트 파일에  이라는 신규 인자(argument)를 설정하자. 파드가 다시 올라오는지 확인하고, 이 설정이 어떤 로그를 발생시키는지 확인하자. 로그 경로 아래는 확인해야할 로그 경로이다.    +   +  (컨테이너 런타임으로 도커를 사용할 경우) Kubelet 로그:  혹은  해결 방법 API 서버가 돌아오지 않는다. 변경사항을 취소하고 다음 실습으로 넘어가자.","frontmatter":{"date":"May 21, 2022","title":"쿠버네티스(Kubernetes) CKA - KillerKoda Q2. Apiserver Crash","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220521-kubernetes-cka-killerkoda-q02/"}},"next":{"id":"7227250d-e0e8-53ce-b9f5-8cc1ab22c571","html":"<p>오늘도 어제에 이어서 “<a href=\"https://fastcampus.co.kr/dev_online_pyweb\">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 11-2. 에러 만들기 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>\n<p><br/><br/></p>\n<p>아래는 공부 인증 사진.</p>\n<br/>\n<p><img src=\"/assets/images/2022-05-20-Python-Photo1/2022-05-20-Python-Photo1.JPG\" alt=\"2022-05-20-Python-Photo1\"></p>\n<p><img src=\"/assets/images/2022-05-20-Python-Photo1/2022-05-20-Python-Photo2.JPG\" alt=\"2022-05-20-Python-Photo2\"></p>\n<p><br/><br/></p>\n<h2 id=\"1-raise-구문\" style=\"position:relative;\"><a href=\"#1-raise-%EA%B5%AC%EB%AC%B8\" aria-label=\"1 raise 구문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. raise 구문</h2>\n<ul>\n<li>에러를 강제로 발생시키기 위한 구문</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">raise</span> 예외<span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 메시지\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 예시</span>\n<span class=\"token keyword\">raise</span> Exception\n<span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 메시지\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"2-예외-계층-구조\" style=\"position:relative;\"><a href=\"#2-%EC%98%88%EC%99%B8-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 예외 계층 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 예외 계층 구조</h2>\n<ul>\n<li>예외 계층 구조</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">BaseException\n <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> SystemExit\n <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> Keyboardinterrupt\n <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> GeneratorExit\n <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> Exception\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> Stopiteration\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> StopAsynciteration\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> ArithmeticError\n      <span class=\"token operator\">|</span>    <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> FloatingPointError\n      <span class=\"token operator\">|</span>    <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> OverflowError\n      <span class=\"token operator\">|</span>    <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> ZeroDivisionError\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> AssertionError\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> AttributeError\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> BuffurError\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> EOFError\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> ImportError\n      <span class=\"token operator\">|</span>    <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> ModuleNotFoundError\n      <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> LookupError\n      <span class=\"token operator\">|</span>    <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> IndexError\n      <span class=\"token operator\">|</span>    <span class=\"token operator\">+</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> KeyError\n</code></pre></div>\n<ul>\n<li>예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">except</span> ZeroDivisionError <span class=\"token comment\"># ZeroDivisionError 하나만 받아서 처리</span>\n\n<span class=\"token keyword\">except</span> ArithmeticError <span class=\"token comment\"># ArithmeticError 하위의 세 에러 모두 받을 수 있음</span>\n\n<span class=\"token keyword\">except</span> Exception <span class=\"token comment\"># 하위의 모든 내장 예외를 모두 받을 수 있음</span></code></pre></div>\n<h2 id=\"3-에러-만들기\" style=\"position:relative;\"><a href=\"#3-%EC%97%90%EB%9F%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"3 에러 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 에러 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> 예외<span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># exception 클래스를 상속받는 것</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">\"에러메시지\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"4-실습\" style=\"position:relative;\"><a href=\"#4-%EC%8B%A4%EC%8A%B5\" aria-label=\"4 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 실습</h2>\n<h3 id=\"1-에러-발생시키기\" style=\"position:relative;\"><a href=\"#1-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"1 에러 발생시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 에러 발생시키기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># raise 구문을 사용해서 에러를 강제로 발생시켜 보자.</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"음수를 입력해 주세요>>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"양수는 입력 불가\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_basic<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>\npython_basic<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter11<span class=\"token operator\">/</span><span class=\"token number\">02.</span>에러발생시키기<span class=\"token punctuation\">.</span>py\n음수를 입력해 주세요<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token number\">1</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"/Users/jinipark/Documents/python_basic/myvenv/Chapter11/02.에러발생시키기.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"양수는 입력 불가\"</span><span class=\"token punctuation\">)</span>\nException<span class=\"token punctuation\">:</span> 양수는 입력 불가</code></pre></div>\n<ul>\n<li>try except 구문을 사용해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># raise 구문을 사용해서 에러를 강제로 발생시켜 보자.</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"음수를 입력해 주세요>>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"양수는 입력 불가\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 발생!\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_basic<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>\npython_basic<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter11<span class=\"token operator\">/</span><span class=\"token number\">02.</span>에러발생시키기<span class=\"token punctuation\">.</span>py\n음수를 입력해 주세요<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token number\">1</span>\n에러 발생! 양수는 입력 불가</code></pre></div>\n<ul>\n<li>에러를 Exception이 아닌 기타 내장된 에러로 변경할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># raise 구문을 사용해서 에러를 강제로 발생시켜 보자.</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"음수를 입력해 주세요>>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"양수는 입력 불가\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 발생!\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-에러-만들기\" style=\"position:relative;\"><a href=\"#2-%EC%97%90%EB%9F%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"2 에러 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 에러 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PositiveNumberError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token string\">\"양수는 입력 불가\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"음수를 입력해 주세요>>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> PositiveNumberError\n<span class=\"token keyword\">except</span> PositiveNumberError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 발생!\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>myvenv<span class=\"token punctuation\">)</span> ➜  python_basic <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>pyt\nhon_basic<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span><span class=\"token builtin\">bin</span><span class=\"token operator\">/</span>python <span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>Documents<span class=\"token operator\">/</span>\npython_basic<span class=\"token operator\">/</span>myvenv<span class=\"token operator\">/</span>Chapter11<span class=\"token operator\">/</span><span class=\"token number\">03.</span>에러만들기<span class=\"token punctuation\">.</span>py\n음수를 입력해 주세요<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token number\">2</span>\n에러 발생! 양수는 입력 불가</code></pre></div>\n<p><br/><br/></p>\n<p>이번 포스팅에서는 에러와 예외처리에 대해 알아보았다. 다음 포스팅에서는 에러와 에러를 만들어보도록 하자.</p>\n<br/>\n<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>\n<br/>\n<ul>\n<li>패스트캠퍼스 강의 등록하기: <a href=\"https://bit.ly/3L3avNW\">https://bit.ly/3L3avNW</a></li>\n</ul>\n<br/>\n<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>","frontmatter":{"date":"May 20, 2022","title":"Python - 패스트캠퍼스 캐시백 챌린지 33일차","categories":"프로그래밍","author":"jinnypark9393","emoji":"🐍"},"fields":{"slug":"/220520-python-day33/"}},"prev":{"id":"e8d902b3-8e09-5856-a612-ce18e0d89b4c","html":"<h1 id=\"1-killerkoda란\" style=\"position:relative;\"><a href=\"#1-killerkoda%EB%9E%80\" aria-label=\"1 killerkoda란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. KillerKoda란?</h1>\n<p>CKA(Certified Kubernetes Administrator) 시험을 신청하게 되면 Killer.sh 이라는 모의 시험 환경이 제공되는데, 이번에 시험을 신청해보니 Killer.sh 외에도 Killer.sh을 만든 팀에서 KillerKoda라는 실습환경도 제공하고 있어 한 번 풀어보았다.</p>\n<br/>\n<p><a href=\"https://killercoda.com/killer-shell\">Killer.sh 과 KillerKoda의 차이점</a>은 아래와 같다.</p>\n<h2 id=\"killersh\" style=\"position:relative;\"><a href=\"#killersh\" aria-label=\"killersh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Killer.sh]</h2>\n<ul>\n<li>시험환경과 유사한 인터페이스를 제공하는 모의고사</li>\n<li>CKA 시험을 신청했을 때 접속할 수 있다</li>\n<li>동일한 문제가 들어있는 두 개의 시뮬레이터를 제공</li>\n<li>각 시뮬레이터는 활성화 한 뒤 36시간동안만 접속할 수 있다</li>\n<li>채점 및 해설 제공</li>\n<li>난이도: 높은 편(개인적으로 유데미의 CKA 바이블 뭄샤드님의 강의에서 제공하는 모의고사보다 훨씬 어려웠다)</li>\n</ul>\n<br/>\n<h2 id=\"killerkoda\" style=\"position:relative;\"><a href=\"#killerkoda\" aria-label=\"killerkoda permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[KillerKoda]</h2>\n<ul>\n<li>CKA 실제 시험과는 다소 다른 인터페이스</li>\n<li>시간 제한 없이 누구나 무료로 이용할 수 있다</li>\n<li>일부 채점 및 해설 제공</li>\n<li>난이도: 쉬운 편 ~ 중간</li>\n<li>KillerKoda는 현재 베타버전으로 운영되고 있어 현재는 12개 문제를 제공하고 있는데(첫번째는 Playground라 제외하고 나머지 문제만 업로드했다), 향후 더 다양한 문제가 제공될 예정</li>\n</ul>\n<br/>\n<p>이 외에도 <a href=\"https://killercoda.com/playgrounds\">위의 사이트에서 쿠버네티스와 관련된 여러 가상환경을 제공</a>하고(Kubernetes 1.24 버전의 마스터노드 1 + 워커노드 1 환경, Istio가 구성된 환경 등) 있어, 쿠버네티스 클러스터를 설치하지 않고 간단하게 실습을 해볼 수 있다.</p>\n<p><br/><br/></p>\n<h1 id=\"2-vim-setup\" style=\"position:relative;\"><a href=\"#2-vim-setup\" aria-label=\"2 vim setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Vim Setup</h1>\n<p>k8s 시험에서 YAML을 편집할 때의 중요한 설정에 대해 알아보자.</p>\n<br/>\n<h2 id=\"세팅\" style=\"position:relative;\"><a href=\"#%EC%84%B8%ED%8C%85\" aria-label=\"세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세팅</h2>\n<p>먼저 <code class=\"language-text\">.vimrc</code> 파일을 생성하거나 연다(이미 생성했을 경우):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vim ~/.vimrc\n</code></pre></div>\n<br/>\n<p> <code class=\"language-text\">i</code> 로 삽입모드를 활성화 한 상태에서 다음을 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set expandtab\nset tabstop=2\nset shiftwidth=2\n</code></pre></div>\n<br/>\n<p><code class=\"language-text\">Esc</code> 다음  <code class=\"language-text\">:x</code> , <code class=\"language-text\">Enter</code> 를 눌러 파일을 저장하고 닫는다.</p>\n<p><br/><br/></p>\n<h2 id=\"설명\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EB%AA%85\" aria-label=\"설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설명</h2>\n<p>Vim을 오픈할때마다 항상 현재 사용자로서 위의 세팅들이 적용될 것이다.</p>\n<p>만일 당신이 다른 서버에 ssh로 접속하게 된다면 이 설정들은 <strong>적용되지 않는다</strong>.</p>\n<p>설정값 설명은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">expandtab: 탭키를 스페이스로 사용한다\ntabstop: 탭키에 적용할 스페이스양\nshiftwidth: 들여쓰기 중 사용할 스페이스 양</code></pre></div>\n<br/>","frontmatter":{"date":"May 21, 2022","title":"쿠버네티스(Kubernetes) CKA - KillerKoda Q1. Vim Setup","categories":"데브옵스","author":"jinnypark9393","emoji":"🔧"},"fields":{"slug":"/220521-kubernetes-cka-killerkoda-q01/"}},"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220521-kubernetes-cka-killerkoda-q02/","nextSlug":"/220520-python-day33/","prevSlug":"/220521-kubernetes-cka-killerkoda-q01/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}