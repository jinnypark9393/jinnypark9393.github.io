{"componentChunkName":"component---src-templates-blog-template-js","path":"/220914-algorithm-book-with-pic/","result":{"data":{"cur":{"id":"6c2809cc-bc24-5da5-9777-b84bf4088d75","html":"<h1 id=\"제-6장-그-외의-알고리즘들4\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-6%EC%9E%A5-%EA%B7%B8-%EC%99%B8%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EB%93%A44\" aria-label=\"제 6장 그 외의 알고리즘들4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 6장: 그 외의 알고리즘들(4)</h1>\n<h2 id=\"71-재귀-호출을-이용해-n의-팩토리얼-구하기\" style=\"position:relative;\"><a href=\"#71-%EC%9E%AC%EA%B7%80-%ED%98%B8%EC%B6%9C%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-n%EC%9D%98-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC-%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"71 재귀 호출을 이용해 n의 팩토리얼 구하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>71. 재귀 호출을 이용해 N의 팩토리얼 구하기</h2>\n<ul>\n<li>재귀호출: 함수에서 값을 구하기 위해 자기자신을 호출하는 표현이 포함된 상황</li>\n<li>재귀 호출에서 자기 자신을 다시 호출하기만 하는 경우에는 무한 루프에 빠질 수 있으므로 아래 등을 적용해 무한루프를 막아야한다.\n<ul>\n<li>자기자신을 다시 호출하는 경우와 단순하게 결과값만 반환하는 경우를 분리</li>\n</ul>\n</li>\n<li>n의 팩토리얼(n!)을 구하는 알고리즘을 이용해보자.\n<ul>\n<li>n! = 1 * 2 * 3 * … * (n-1) * n</li>\n<li>이 때 (n-1)을 미리 구했다면 (n-1)! * n 으로 구할 수 있다.</li>\n<li>즉, n!을 구하는 함수를 fact(n)이라고 했을 경우</li>\n<li>fact(n) = fact(n-1)! * n과 같이 함수가 스스로를 호출하도록 표현할 수 있다.\n<ul>\n<li>n = 1 → 1! = 1</li>\n<li>n ≥ 2 일 경우 fact(n-1)! * n을 반환</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"칼럼-알고리즘과-플로우-차트순서도\" style=\"position:relative;\"><a href=\"#%EC%B9%BC%EB%9F%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EA%B3%BC-%ED%94%8C%EB%A1%9C%EC%9A%B0-%EC%B0%A8%ED%8A%B8%EC%88%9C%EC%84%9C%EB%8F%84\" aria-label=\"칼럼 알고리즘과 플로우 차트순서도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>칼럼: 알고리즘과 플로우 차트(순서도)</h2>\n<ul>\n<li>플로우차트: 알고리즘의 처리 흐름(해결 방법)을 시각적으로 명확화</li>\n<li>미리 약속된 기호들을 사용해 처리의 흐름을 설명</li>\n<li>대표적인 기호\n<ul>\n<li>터미널: 시작과 종료 표시</li>\n<li>처리: 처리 내용 기재</li>\n<li>판단: 적혀있는 조건에 따라 처리 분기</li>\n<li>반복: 루프(반복처리)의 시작과 끝을 기재</li>\n<li>정의된 처리: 다른 곳에서 정의된 처리(보조 프로그램)를 호출</li>\n<li>흐름선: 처리 흐름을 표시. 화살표를 사용해 처리 방향을 명확히 표시</li>\n</ul>\n</li>\n</ul>\n<br/>","excerpt":"제 6장: 그 외의 알고리즘들(4) 71. 재귀 호출을 이용해 N의 팩토리얼 구하기 재귀호출: 함수에서 값을 구하기 위해 자기자신을 호출하는 표현이 포함된 상황 재귀 호출에서 자기 자신을 다시 호출하기만 하는 경우에는 무한 루프에 빠질 수 있으므로 아래 등을 적용해 무한루프를 막아야한다. 자기자신을 다시 호출하는 경우와 단순하게 결과값만 반환하는 경우를 분리 n의 팩토리얼(n!)을 구하는 알고리즘을 이용해보자. n! = 1 * 2 * 3 * … * (n-1) * n 이 때 (n-1)을 미리 구했다면 (n-1)! * n 으로 구할 수 있다. 즉, n!을 구하는 함수를 fact(n)이라고 했을 경우 fact(n) = fact(n-1)! * n과 같이 함수가 스스로를 호출하도록 표현할 수 있다. n = 1 → 1! = 1 n ≥ 2 일 경우 fact(n-1)! * n을 반환 칼럼: 알고리즘과 플로우 차트(순서도) 플로우차트: 알고리즘의 처리 흐름(해결 방법)을 시각적으로 명확화 미리 약…","frontmatter":{"date":"September 14, 2022","title":"그림으로 배우는 알고리즘 제 6장: 그 외의 알고리즘들(4)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220914-algorithm-book-with-pic/"}},"next":{"id":"1ff2c503-1de7-5db6-8981-76c126eab031","html":"<h1 id=\"제-6장-그-외의-알고리즘들3\" style=\"position:relative;\"><a href=\"#%EC%A0%9C-6%EC%9E%A5-%EA%B7%B8-%EC%99%B8%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EB%93%A43\" aria-label=\"제 6장 그 외의 알고리즘들3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제 6장: 그 외의 알고리즘들(3)</h1>\n<h2 id=\"69-그래프에서-최적-경로를-구하는-데이크스트라-알고리즘\" style=\"position:relative;\"><a href=\"#69-%EA%B7%B8%EB%9E%98%ED%94%84%EC%97%90%EC%84%9C-%EC%B5%9C%EC%A0%81-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%81%AC%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"69 그래프에서 최적 경로를 구하는 데이크스트라 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>69. 그래프에서 최적 경로를 구하는 데이크스트라 알고리즘</h2>\n<ul>\n<li>최단 거리 및 최저 운임 이동경로 등의 최적경로를 구할 경우 그래프를 이용하는 데이크스트라 알고리즘이 유용</li>\n<li>그래프로 아래 3 요소를 표현 한 뒤 최적 경로 구함\n<ul>\n<li>꼭짓점: 출발점, 종착점 및 경유 지점</li>\n<li>변: 꼭짓점과 꼭짓점을 연결하는 경로</li>\n<li>변의 가중치: 경로를 통과하는 비용(시간 혹은 운임)</li>\n</ul>\n</li>\n<li>최적 경로 구하는 절차\n<ul>\n<li>1단계: 출발점의 [검색된 플래그]를 켠다. 그 외 모든 꼭짓점의 [검색됨 플래그]를 끈다.</li>\n<li>2단계: [검색된 플래그]가 켜진 모든 꼭짓점과 변으로 연결된 [검색됨 플래그]가 켜진 꼭짓점 목록을 구한다.</li>\n<li>3단계: [검색된 플래그]가 켜져있는 꼭짓점으로 향하는 경로의 ‘가중치’합계와 2단계에서 구한 꼭짓점으로 향하는 ‘변의 가중치’합계가 가장 적은 꼭짓점을 새롭계 선택한다.</li>\n<li>4단계: 3단계에서 선택한 새 꼭짓점이 종착점일 경우 해당 꼭짓점까지의 경로를 최적경로로 삼는다.\n<ul>\n<li>종착점이 아닐경우 그 꼭짓점의 검색됨 플래그를 켜고 2단계 절차를 다시 수행한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"70-자연수-n이-소수인지-여부를-거르는-에라토스테네스의-체\" style=\"position:relative;\"><a href=\"#70-%EC%9E%90%EC%97%B0%EC%88%98-n%EC%9D%B4-%EC%86%8C%EC%88%98%EC%9D%B8%EC%A7%80-%EC%97%AC%EB%B6%80%EB%A5%BC-%EA%B1%B0%EB%A5%B4%EB%8A%94-%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98-%EC%B2%B4\" aria-label=\"70 자연수 n이 소수인지 여부를 거르는 에라토스테네스의 체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>70. 자연수 n이 소수인지 여부를 거르는 에라토스테네스의 체</h2>\n<ul>\n<li>소수: 1과 자신만을 약수로 갖는 1보다 큰 자연수</li>\n<li>에라토스테네스의 체: N까지의 자연수를 나열한 뒤 소수가 아닌 수(합성수)를 걸러냈을 때 마지막까지 남은 자연수가 소수이다.</li>\n<li>자연수 2~N사이의 소수 수열 PRIME을 에라토스테네스의 체로 구하는 방법\n<ul>\n<li>1단계: 2~N까지의 자연수 수열 DATA를 생성</li>\n<li>2단계: 수열 DATA의 1번째 요소 P를 소수 열 PRIME으로 이동</li>\n<li>3단계: 2단계에서 구한 소수의 배수를 수열 data에서 걸러낸다.</li>\n<li>4단계: 수열 DATA의 최대 값이 수열 PRIME의 최대 값의 제곱 이상이라면, 2~3단계를 반복한다.</li>\n<li>5단계: 수열 DATA에 남은 숫자를 소수 열 PRIME의 끝으로 이동시킨다.</li>\n</ul>\n</li>\n</ul>\n<br/>","frontmatter":{"date":"September 13, 2022","title":"그림으로 배우는 알고리즘 제 6장: 그 외의 알고리즘들(3)","categories":"알고리즘","author":"jinnypark9393","emoji":"🤖"},"fields":{"slug":"/220913-algorithm-book-with-pic/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://jinnypark9393.github.io","comments":{"utterances":{"repo":"jinnypark9393/jinnypark9393.github.io"}}}}},"pageContext":{"slug":"/220914-algorithm-book-with-pic/","nextSlug":"/220913-algorithm-book-with-pic/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}