var store = [{
        "title": "첫 글",
        "excerpt":"깃허브 블로그 첫 글  우여곡절 끝에 깃허브 블로그를 생성했다.   MacOS 와 Jekyll(이라기보다는 ruby 버전 호환 문제) 설치 문제 때문에 임시로 티스토리를 사용했었는데, Ubuntu 20.04 버전 환경에서 설치하니 이렇게 금방 설치 될 수가 없더라…(허무)   기존 티스토리 블로그에 있던 포스팅은 조만간 전부 이관할 예정.   이제 깃허브 블로그도 생성했겠다 1일 1커밋을 생활화 해야지.  ","categories": ["ETC"],
        "tags": ["GithubPages","깃허브페이지","깃허브블로그","개발자블로그비교"],
        "url": "/etc/my-first-post/",
        "teaser": null
      },{
        "title": "[Linux/Ubuntu]VMware Fusion에서 Ubuntu 20.04 설치하기",
        "excerpt":"   💡 MacOS 환경에서 VMware로 Ubuntu를 설치하려면 “VMware Fusion”을 설치해야 한다.        이번 포스팅에서는 VMware Fusion에서 Ubuntu 20.04 버전을 설치해보도록 하겠다. 코딩 강의를 수강하거나 스터디 할 때 실습 환경을 맞춰주기 위해서 우분투를 설치했었는데, 이번에는 Jekyll을 설치하기 위해 우분투 환경을 만들어주게 되었다.     만약 나와 같이 MacOS(Catalina 이상 버전)에서 Jekyll 설치에 실패했던 사람은 Ubuntu 20.04 버전에서 설치 해보는 걸 추천한다. (참고로 Ubuntu 18.04 버전에서는 Jekyll 설치는 가능했었으나 테마 적용에서 버전 이슈가 발생했다.)     그럼 VMware Fusion과 Ubuntu가 무엇인지에 대해 간단하게 살펴본 뒤 두 소프트웨어를 설치해보도록 하자.      1. VMware Fusion이란?   VMware Fusion은 VMware사에서 제공하는 MacOS 컴퓨터용 가상머신 소프트웨어이다. 무료버전인 VMware Fusion Player와 유료버전인 VMware Fusion Pro 두 가지 버전을 배포하고 있다.     VMware 에서는 VMware Fusion외에도 Windows 환경에서 사용할 수 있는 VMware Workstation이 있으며, VMware Workstation도 Player와 마찬가지로 Player(무료 버전), Pro(유료 버전) 두 가지 버전을 배포하고 있다.      2. 우분투(Ubuntu)란?   우분투(Ubuntu)는 데비안(Debian) GNU/리눅스를 기반으로 만들어진 운영체제로, 남아공 출신의 사업가인 Canonical의 CEO인 마크 셔틀워스(Mark Shuttleworth)에 의해 시작되었다. 우분투라는 제품명도 남아프리카의 반투어에서 따온 것으로, 사람들간의 관계와 헌신에 중점을 둔 윤리 사상, 인본주의에 기반한 아프리카의 전통적 사상이다. 우분투는 이러한 ‘우분투’ 정신을 개발 철학으로 삼고 있어 1. 소프트웨어 사용이 무료여야하고, 2. 모든 사람들의 모국어로 사용되어야하며, 3. 장애를 가진 사람도 이용할 수 있어야 한다고 한다. 또한 우분투는 오픈소스 소프트웨어로 무료로 제공되며 사람들이 자유롭게 소프트웨어를 수정할 수 있다.     뿐만 아니라 대부분의 리눅스 배포판들이 서버용으로 사용되고 있는 데 반해, 우분투는 개인 사용자나 데스크탑 환경에 최적화 되도록 개발되어 개인 컴퓨터에 리눅스 환경을 구축하고 싶을 때 매우 유용하다.      3. VMware Fusion 설치하기           구글에서 vmware fusion download 12를 검색해 맨 위의 링크로 들어간다.                       VMware Fusion Player - Personal Use License에 접속해 로그인한다(아이디가 없을 경우 Create an Account 탭을 클릭 ⇒ 빨간 박스 안에 들어간 내용을 입력해 회원가입을 진행한 뒤 로그인한다).                       패키지를 다운로드 및 설치한다(License Key가 필요한 경우 다운로드 창 위에 발급된 라이선스 키를 사용한다).                 4. Ubuntu 20.04 버전 설치하기            구글에서 “Ubuntu 20.04 download”를 검색해 우분투 공식 웹사이트 링크로 접속한다.                       다운로드를 클릭한다.                       iso 파일을 다운로드 받는다.                       VMware Fusion을 구동한 뒤, File &gt; New를 클릭한다.                       Install from disc or image에 다운로드 받은 iso파일을 드래그앤드롭 한다.                       ubuntu-20.04버전이 선택된 것을 확인 한 뒤 Continue 클릭한다.                       계정명과 비밀번호를 입력한 뒤 Continue 버튼을 클릭한다.                       내용을 확인한 뒤 Finish를 클릭한다(만일 생성되는 머신의 이름을 변경하고 싶은 경우 Customize Settings를 클릭해 이름을 변경해준다).                       설치가 완료되면 화면을 더블클릭해 활성화 한 뒤 설정한 비밀번호를 입력한 후 접속할 수 있다.            이렇게 MacOS 환경에서 VMware Fusion을 이용해 Ubuntu20.04 환경을 구성해보았다. 다음 포스팅에서는 Ubuntu 환경 위에서 Jekyll을 설치한 뒤, Github Pages(깃허브 블로그)를 생성해보도록 하자.      ","categories": ["DevOps"],
        "tags": ["GithubPages","깃허브페이지","깃허브블로그","macosvmware설치","vmwarefusion설치","ubuntu20.04설치","ubuntu","linux"],
        "url": "/devops/Linux-Ubuntu-VMware-ubuntu/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 1일차",
        "excerpt":"     회사분의 추천을 받고 또 충동적으로 구매해버린 패스트캠퍼스 강의… 이번에야말로 꼭 완강을 해보겠다는 의지로 캐시백 챌린지를 신청해보았다. 이번에 내가 신청한 강의는 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online”. 파이썬 기초 언어 뿐만 아니라 배포, 관련 라이브러리 등을 한꺼번에 습득할 수 있는 커리큘럼인데다 이미 강의를 듣고 계신 회사분이 설명도 나쁘지 않다고 해주셔서 12개월 할부로 긁었다.      캐시백 챌린지는 기본적으로 매일 최소 1강 이상씩 듣고 공부기록을 블로그에 올리면 강의료를 환급해주는 형식인데, 중간과제가 있긴 하나 코딩 관련이 아닌 리뷰 개념이라 부담없이 성공할 수 있을 듯 한 느낌. (하지만 이러고 실패하면 정말 노간지인데….^^ 열심히 해야겠다)           강의를 미리 결제해놓았어서 1일차는 그동안 미리 들어두었던 공부 내용을 전체적으로 정리해보았다.      Part 1. 파이썬 필수 문법   Ch01. 강의소개   1. 파이썬을 선택하는 세 가지 이유           문법이 쉽고 간결하다       아래는 같은 결과값을 출력하는데 필요한 코딩 양.   [첫번째 코드블록: C]        #include&lt;studio.h&gt;  int main (void){  \tprintf(\"안녕하세요\\n\");  \treturn 0;  }          [두번째 코드블록: Python]       print(\"안녕하세요\")                   인기가 많다.            학습 자료가 많음 (책, 온/오프라인 강의, 블로그 등)       오류가 생겼을 때 누군가 해결 방법을 찾아놓았을 경우가 많다.                    다양한 분야에 활용 가능하다            웹 서버 개발(Django, flask)       크롤링       업무자동화       데이터분석       인공지능       게임제작                 Ch02. 환경 설정             참고: MacOS에서 설치를 진행했기 때문에 MacOS 에 대한 설명만 기재하였다.        1. 파이썬 설치      https://www.python.org &gt; Download &gt; 파이썬 패키지 다운로드   패키지 파일 더블클릭해 설치 (이용약관: 동의)   설치가 완료되면 아래와 같이 파이썬 디렉토리가 생성된다.              python 3 명령어로 설치된 버전을 확인 할 수 있다.              python 명령어를 실행해보자.            2. idle로 파이썬 실행      Launchpad에서 ‘Idle’을 검색해 더블클릭으로 실행   명령어 한줄씩 실행 예시:              명령어 여러줄 실행: File &gt; New File            실행하고 싶은 명령어 입력                         Run &gt; Run Module 클릭 &gt; 파일 저장                    실행 결과가 최초 실행했던 idle 창에 표시된다.                                      idle을 사용하지 않는 이유            UI가 예쁘지 않다       자동완성 기능이 없다       파일 탐색기능이 없어 폴더/파일 기능 관리가 어렵다           ⇒ 결론: VScode를 사용하자!            3. 소스코드 편집기를 사용하는 이유      폴더, 파일 쉽게 정리   코드 자동완성 기능   디버깅(오류수정)이 쉽다: 오타, 문법오류 날 시 알려 준다   유용한 단축키가 많다        4. vscode 설치      vscode 공식 홈페이지 &gt; Download   루트폴더 지정            File &gt; Open &gt; ‘Documents’ &gt; 새로운 폴더 ‘python_basic’을 root로 지정       vscode에서 보는 디렉토리/파일과 실제 디렉토리/파일이 연동 되어있다.                    vscode에서 생성 ⇒ 실제 폴더에도 생성           실제 폴더 생성 ⇒ vscode 에도 생성                                              파일 생성 버튼 &gt; ‘hello.py’ 이름 입력 후 엔터 &gt; 파이썬 파일 생성됨                    print(”hello python!”) 입력하기                                                     저장 되었는지 여부 판단하기: 탭 이름 옆 흰 동그라미가 있을 경우 변경사항이 저장이 되지 않은 것.                                                       [추가] 폰트 설정 바꾸기: Code &gt; Preferences &gt; 폰트사이즈 입력 후 ‘Settings’ 닫아줌                                  폰트 크기 변경이 적용이 된 것을 확인할 수 있다.                                               Extensions에서 확장 프로그램 “Python(Microsoft)” 설치                                               파이썬 코드 실행방법: Run &gt; Run without Debugging                                               파이썬 코드 실행방법 2: vscode 오른쪽 상단의 재생 버튼 클릭                                               하단 콘솔에서 파이썬 코드가 실행됨을 확인할 수 있다.                                   5. VScode의 장점           파일과 폴더를 보기 쉽게 정리할 수 있다(탐색기 내장).                           코드 자동완성 기능 (클릭 혹은 엔터키로 입력 가능)                           디버깅, 오류 수정이 쉽다(아래처럼 오류가 난 부분을 표시해준다).                           유용한 단축키가 많다.             예: option + shift + 아래/위 방향키로 간단하게 복사 가능                                 예: option + 클릭 (여러 줄을 동시에 선택/수정할 수 있다).                       6. 가상환경 설정(Mac)   1. 가상환경을 사용하는 이유      A 프로젝트: 패키지 1.0 버전 사용        B 프로젝트: 패키지 2.0 버전 사용       ⇒ 컴퓨터 안 공간을 나누면 한 컴퓨터 안에서 다른 버전을 사용할 수 있다.            2. 가상환경 만들고 패키지 설치      venv로 설치        myvenv 라는 이름의 가상환경 만들기                           myvenv 라는 새로운 폴더가 생성된 것을 확인할 수 있다.                      myvenv &gt; bin &gt; activate 파일을 이용해 활성화            (myvenv) 라는 가상환경명이 명령줄 앞에 붙게 된다.             python_basic source ./myvenv/bin/activate   (myvenv) ➜  python_basic                          가상환경에서 빠져나오려면 deactivate 명령어를 실행해주면 된다.             (myvenv) ➜  python_basic deactivate   ➜  python_basic                         TIP) 위/아래 방향키로 이전에 사용했던 명령어들을 사용할 수 있다.                           pip 명령어를 통해 가상환경에 설치된 모듈이나 패키지를 확인할 수 있다.                                 예 1) pip list: 현재 설치되어 있는 패키지 파일 리스트 확인                 (myvenv) ➜  python_basic pip list   Package    Version   ---------- -------   pip        22.0.4   setuptools 58.1.0                                                  예 2) pip install requests: requests 라는 패키지 파일을 myvenv라는 가상환경 안에 설치                            따라서 다른 프로젝트와 충돌이 나지 않게 된다.                             (myvenv) ➜  python_basic pip install requests   Collecting requests     Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 63.1/63.1 KB 3.0 MB/s eta 0:00:00   Collecting charset-normalizer~=2.0.0     Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)   Collecting idna&lt;4,&gt;=2.5     Downloading idna-3.3-py3-none-any.whl (61 kB)        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 61.2/61.2 KB 1.9 MB/s eta 0:00:00   Collecting urllib3&lt;1.27,&gt;=1.21.1     Downloading urllib3-1.26.9-py2.py3-none-any.whl (138 kB)        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 139.0/139.0 KB 2.6 MB/s eta 0:00:00   Collecting certifi&gt;=2017.4.17     Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB)        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 149.2/149.2 KB 1.9 MB/s eta 0:00:00   Installing collected packages: certifi, urllib3, idna, charset-normalizer, requests   Successfully installed certifi-2021.10.8 charset-normalizer-2.0.12 idna-3.3 requests-2.27.1 urllib3-1.26.9                                                  예 3) pip list 로 설치된 패키지 파일을 다시 확인한다.                            requests 패키지와 requests 패키지가 필요로 하는 다른 패키지들이 설치된 것을 확인할 수 있다.                             (myvenv) ➜  python_basic pip list               Package            Version   ------------------ ---------   certifi            2021.10.8   charset-normalizer 2.0.12   idna               3.3   pip                22.0.4   requests           2.27.1   setuptools         58.1.0   urllib3            1.26.9                                                                  강의에서의 소스코드 디렉토리 구성: myvenv 하위에 Chapter 별로 폴더 생성 ⇒ 필요한 실습 소스 파일 생성해 코드 작성            myvenv/Chapter 2/01.가상환경세팅.py 구조로 폴더 및 파일 생성                                 01.가상환경세팅.py 파일 안에 실습코드 작성 및 실행                           본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day1/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 2일차",
        "excerpt":"     오늘은 패스트캠퍼스(Fastcampus) 캐시백 챌린지 2일차 포스팅. 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 3-1. 숫자, 문자, 불린형, 자료형을 듣고 강의 내용을 정리해 보았다. 이 포스팅은 공부용으로 요약한 것으로, 자세한 강의 내용은 위 링크를 참조할 것.         Ch03.자료형과 변수            1. 자료형이란?      자료(Data)란?            많은 자료를 분류하기 위해서 자료의 형태(종류)를 나눠주는 것.                1. 숫자형      숫자 데이터를 뜻한다.   정수형(Integer: int): 1, 2, 3, 0, -1, -10 (소수점이 없다)   실수형(Float): 1.5, 0, -3, 1.4 (소수점이 있다)   # 주석(Comments) # 1. 코드에 설명을 추가하고 싶을 때 사용한다. # 2. 코드를 실행하고 싶지 않을 때 사용한다.  # 출력문 # print(\"hello world\") # 출력문  # - 숫자 자료형 # 1. 정수형: 소수점이 없는 수 # print(1) # print(3) # print(-1) print(1,3,0,-1)  # 2. 실수형: 소수점이 있는 수 # print(1.1) # print(3.1) # print(0) # print(-1.4) print(1.1,3.1,0,-1.4)        2. 문자열      문자를 나열한 것을 뜻한다.   \"(큰따옴표) '(작은따옴표) 로 문자열의 시작과 끝을 나타낸다.   예 1: “123” (문자열), 123 (숫자열)   예 2: 따옴표 속의 따옴표 표현 ⇒ ‘”개 짖는 소리좀 안 나게 해라!”라고 말했다.’   # - 문자열 자료형 # \"\" or '' 로 감싸서 표현한다. print(\"파이썬 너무 재밌다\") print('파이썬 정말 재밌자너!')  # 문자열에 \"\" 따옴표가 포함되어있는 경우 ''로 감싸서 표현 print('\"개 짖는 소리 좀 안나게 해라\"라고 그는 외쳤다.')        3. 불린형(Boolean)      참 또는 거짓으로 나뉜다.   예: True, False (불린형의 경우 대문자로 시작함에 유의할 것)   print(True) #참 print(False) #거짓        4. 참고      print 함수 중 속성값으로 줄 수 있는 항목.          SEP: print 함수 출력 시 값 사이의 공백을 없애준다.         print(1, 3, 0, -1, sep=\"\")              출력결과        print(130-1)                       END: print 함수가 끝나도 줄바꿈이 되지 않도록 하는 기능         print(1, 3, 0, -1, end=\"\")              아래는 강의 인증샷 두번째.           오늘은 숫자, 문자, 불린형, 자료형에 대해 알아보았다. 내일은 파이썬(Python)에서 다루게 될 변수에 대해 알아보도록 하겠다.      본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.      패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW   패스트캠퍼스 [직장인 실무교육]   #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 3일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의챕터 3-2. 변수 강의를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.            2. 변수   1. 변수란?      데이터를 저장할 공간   저장한 데이터를 언제든지 변경할 수 있다.        2. 변수를 만드는 방법      변수이름 = 데이터   = 는 할당 연산자: 오른쪽의 데이터를 왼쪽의 변수에 저장        3. 변수 이름 규칙      데이터를 표현할 수 있는 이름으로 짓는다(중요).   문자부터 시작해야 한다.   대소문자는 구분한다.   _로 시작할 수 있다.   미리 예약된 키워드는 사용할 수 없다.           4. 실습      변수이름에 데이터를 저장한 뒤 출력해보자.   # 변수 # 변수이름 = 데이터  # 마스터이 챔피언 데이터를 변수에 저장 name = \"마스터이\" level = 5 health = 800 attack = 90  print(name, level, health, attack) # print(\"마스터이\", 5, 800, 90)와 같음           실행버튼을 눌러 결과를 확인한다. 저장한 데이터가 출력됨을 알 수 있다.   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter3/02.변수.py 마스터이 5 800 90           변수에 저장된 데이터를 변경하기   # 변수에 저장된 데이터를 변경하기 level = 6 health = 850 attack = 100 print(name, level, health, attack)           실행버튼을 눌러 결과를 확인한다. 기존에 저장되었던 데이터가 변경되어 있는 것을 확인할 수 있다.   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter3/02.변수.py 마스터이 6 850 100           연산자를 이용해 데이터를 변경할 수도 있다.   # 변수에 저장된 데이터를 변경하기 level = level + 1 # 5 + 1 health = health + 50 # 800 + 50 attack = attack + 10 # 90 + 10 print(name, level, health, attack)           결과를 출력해보면 데이터가 변경된 것을 확인할 수 있다.   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter3/02.변수.py 마스터이 6 850 100        다음 시간에는 더하기(+ ) 연산자 외에 곱하기, 빼기 등의 연산자, 연산식을 간단하게 표현할 수 있는 복합 연산자, True/False 등의 값을 연산하는 비교연산자 등에 대해서 배워보도록 하겠다.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-%ED%8C%A8%EC%8A%A4%ED%8A%B8%EC%BA%A0%ED%8D%BC%EC%8A%A4-%EC%BA%90%EC%8B%9C%EB%B0%B1-%EC%B1%8C%EB%A6%B0%EC%A7%80-3%EC%9D%BC%EC%B0%A8/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 4일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의챕터 3-2. 변수 강의를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.            Ch04. 연산과 연산자   1. 연산(1)   1. 연산이란?      수나 식을 일정한 규칙에 따라 계산하는 것        2. 연산의 종류      가장 많이 쓰이는 연산은 아래 네 가지.   대입연산   산술연산   비교연산   논리연산        3. 대입연산      ‘변수이름 = 데이터’   오른쪽의 데이터를 왼쪽의 변수이름에 할당한다(=: 할당연산자)        4. 산술연산                  연산자(연산기호)       설명                       +       더하기                 -       빼기                 *       곱하기                 /       나누기                 //       몫                 %       나머지                 **       제곱                5. 실습               대입 연산은 지난 시간 실습을 진행해 이번에는 생략하도록 한다.        산술연산 예시         # 1. 대입연산   # 변수이름 = 데이터        # 2. 산술연산   # - 숫자 연산   x = 5   y = 2        print(x + y)   print(x - y)   print(x * y)   print(x / y)   print(x // y) # 몫   print(x % y) #나머지   print(x ** y) # 제곱                        결과값은 아래와 같다.         7   3   10   2.5   2   1   25                   숫자 뿐만 아니라 문자열도 서로 더할 수 있다.   # - 문자열 연산 tag1 = \"#내꺼하자\" tag2 = \"#오늘부터1일\" tag3 = \"#여친생김\"  tag = tag1 + tag2 + tag3 print(tag)           연산 결과는 아래와 같다.   #내꺼하자#오늘부터#여친생김           문자열을 서로 곱할 수도 있다.   message = \"우리 모두 파이썬을 사랑합니다.\" * 5 print(message)           연산 결과 아래와 같이 문자열이 5번만큼 출력되는 것을 확인할 수 있다.   우리 모두 파이썬을 사랑합니다.우리 모두 파이썬을 사랑합니다.우리 모두 파이썬을 사랑합니다.우리 모두 파이썬을 사랑합니다.우리 모두 파이썬을 사랑합니다.           문장이 끝난 뒤 줄 바꿈을 하고 싶은 경우 줄바꿈문자 \\n 을 넣어주면 된다.   message = \"우리 모두 파이썬을 사랑합니다.\\n\" * 5 print(message)           연산결과 아래와 같이 문자열이 끝날때마다 줄이 바뀌는 것을 확인할 수 있다.   우리 모두 파이썬을 사랑합니다. 우리 모두 파이썬을 사랑합니다. 우리 모두 파이썬을 사랑합니다. 우리 모두 파이썬을 사랑합니다. 우리 모두 파이썬을 사랑합니다.           복합할당연산자   # 복합할당연산자 level = 10 # (레벨 1 증가) level = level + 1 # 이 식을 아래와같이 표현할 수 있다. level += 1 # 복합할당연산자를 사용(= level = level + 1)  health = 2000 # (체력 300 감소) health -= 300 # health = health - 300  attack = 300 # (공격력 1.5배 증가) attack *= 1.5 # attack = attack * 1.5   speed = 420 # (이동속도 50% 감소) speed /= 2 (speed = speed/2)  print(level, health, attack, speed)           출력 결과는 하기와 같다   11 1700 450 210        다음에는 비교연산, 논리연산, 멤버십연산에 대해 알아보도록 하겠다.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.           패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW        #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day4/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 5일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 4-2. 연산자 강의를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.            2. 연산(2)   1. 비교연산                  연산자(연산기호)       설명(왼쪽이 오른쪽보다)                       &gt;       크다                 &lt;       작다                 &gt;=       크거나 같다                 &lt;=       작거나 같다                 ==       같다                 !=       다르다                  조건문을 이해하기 위해 꼭 필요한 내용   예: 1 &gt; 2 ⇒ False(거짓),  1 &lt; 2 ⇒ True(참)           VScode로 비교연산자를 활용해보자.   # 1. 비교연산 print(2 &gt; 3) # False  print(15 &lt; 30) # True print(1.5 &gt;= 0) # True print(3 &lt;= 3) # True print(\"팛팛팛\" == \"팛팛팗\") # False print(\"1111111111111111\" != \"1111111111111111\") # True        2. 논리연산                           연산자       설명                       A and B       A,B 모두 참이라면 True                 A or B       A,B 중 하나라도 참이라면 True                 not A       A가 참이라면 False                  논리 연산은 두 개의 비교연산을 합칠 때 자주 사용   예: 1 &lt; 2 and 1 == 1 ⇒ 1 &lt; 2 , 1 == 1 모두 참일 경우에만 True           VScode로 비교연산자를 활용해보자.   # 2. 논리연산 print(4 &lt; 6 and 10 &gt;= 10) # True and True -&gt; True print(\"포기하지말아요\" != \"포기하지말아요\" or \"나는 할 수 있다\" == \"나는 할 수 있다\") # False or True =&gt; True print(not 5==5) # not True -&gt; False        3. 멤버십 연산                  연산자(연산기호)       설명(왼쪽이 오른쪽에)                       in       포함되어 있다                 not in       포함되어 있지 않다                  리스트 자료형을 알아야 더 잘 활용 할 수 있다.   예: “a” in “abc” ⇒ True           VScode로 비교연산자를 활용해보자.   # 3. 멤버십 연산 print(\"- 멤버십 문제\") print(\"a\" in \"abc\") # 포함되어 있다면 True print(\"d\" not in \"abc\") # 포함되어 있지 않다면 True        연산 자체는 어렵지 않은 내용이나, 다다음 시간에 배울 조건문과 같이 활용하게 됨. 다음은 입력과 자료형 변환에 대해 알아보도록 하자.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.      패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW   패스트캠퍼스 [직장인 실무교육]   #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day5/",
        "teaser": null
      },{
        "title": "[Kubernetes/NGINX] NGINX Ingress의 Sticky Session 설정이 되지 않는 이슈 해결",
        "excerpt":"     💡   TL;DR : NGINX Ingress Controller 사용 시 nginx.ingress.kubernetes.io 어노테이션을 사용해야 Sticky session 등의 설정값이 적용된다(일반 ingress.kubernetes.io 설정 적용시 설정 적용 안됨)        1. 에러 상황   컨테이너 전환 프로젝트 진행 도중 Ingress Controller를 Contour에서 NGINX-Ingress Controller로 변경 후, 시스템에 간헐적으로 접속이 되지 않는 현상이 발생했다(구체적으로는 브라우저에서 관리자에게 문의하라는 페이지가 뜨며 접속이 되지 않다가 새로고침 시 접속이 되는 현상).        해당 시스템은 Multi Pod로 구성되어있었는데(replicas = 2), 각 Pod로그를 보니 아래와 같은 SQL 에러가 발생하고 있었다.   Error querying database. Cause: com.edb.util.SQLException: FATAL: terminating connection due to administrator command        로그를 추가적으로 살펴보니 user 정보를 SELECT하는 데에서 오류가 나고 있었고, 각 파드에서 로그인 아이디 정보를 찍어주는 로그에 아래와 같은 로그가 발생하고 있었다.          Pod A 로그   2022-MM-DD_hh:mm:ss.000:loginId=null, /파일경로, clientTimezone=Asia/Seoul          Pod B 로그   2022-MM-DD_hh:mm:ss.000:loginid=canary,/파일경로, userId=canary        로그인 아이디를 한쪽에서만 받아주고 있었는데, 브라우저에서 관리자도구(F12키로 관리자 도구 기동 ⇒ Network에서 JSESSIONID 확인) 로 확인해보니 새로고침마다 다른 Pod에서 세션을 받아오는 round robin 방식으로 세션 설정이 되어있어 로그인 정보가 저장되지 않은 Pod에 접근할 때 에러가 나고있었다.        쿠버네티스 대시보드의 Ingress 설정을 확인해보니, annotation 값들이 nginx.ingress.kubernetes (NGINX ingress controller를 적용했을 때의 설정)가 아닌 ingress.kubernetes , 즉 일반 쿠버네티스 ingress 객체 설정으로 되어있어 annotation 설정이 적용이 되지 않고 있었다.        2. 해결 방법   따라서 해당 설정을 아래와 같이 nginx.ingress로 변경해 round robin 대신  sticky session을 적용했다. sticky sesison 적용 후 사용자 로그인 정보가 저장된 Pod로만 요청이 라우팅되어 에러가 해결되었다.           nginx-ingress.yaml 설정   apiVersion: netwroking.k8s.io/v1 kind: Ingress metadata:  name: nginx-ingress  namespace: web-app  annotations:   kubernetes.io/ingress.class: nginx   nginx.ingress.kuberentes.io/affinity: cookie   nginx.ingress.kuberentes.io/affinity-mode: persistent   nginx.ingress.kuberentes.io/session-cookie-expires: '172800'   nginx.ingress.kuberentes.io/session--cookie-max-age: '172800'  (이하 생략)       kubernetes.io/ingress.class: nginx : 어떤 인그레스를 쓸 것인지 설정   nginx.ingress.kuberentes.io/affinity-mode: cookie : 세션 어피니티(session affinity = sticky session) 설정 활성화. 현재 NGINX에서 사용 가능한 어피니티 타입은 cookie 하나 뿐이다.   nginx.ingress.kuberentes.io/affinity-mode: persistent : 얼마나 sticky 하게 설정할 것인지 설정. balanced (기본값) 과 persistent 두 가지가 있다. Persistent로 설정할 경우 Pod가 확장되어도 서버간 부하를 분산하지 않는다.   nginx.ingress.kuberentes.io/session-cookie-expires: '172800' : 쿠키 만료시까지의 시간(초 단위)   nginx.ingress.kuberentes.io/session--cookie-max-age: '172800' : 오래된 브라우저와 호환되는 이전 버전의 Annotation 값. Expires 쿠키를 생성함.           참고            NGINX Configuration (https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/)       NGINX Examples Sticky Sessions (https://kubernetes.github.io/ingress-nginx/examples/affinity/cookie/)          ","categories": ["DevOps"],
        "tags": ["NGINX","kubernetes","NGINXingresscontroller","nginxstickysession","stickysession설정","스티키세션설정","데브옵스엔지니어","DevOps"],
        "url": "/devops/Kubernetes-NGINX-Ingress-Sticky-Session-Issue/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 6일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 4-3. 입력과 자료형 변환 강의를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  3. 입력과 자료형 변환   1. 데이터 입력 받기      입력 함수: input()   사용자로부터 데이터를 입력 받는 함수   예시 1            아래 코드를 파이썬 인터프리터가 어떻게 해석하고 실행할까?       파이썬 인터프리터: 파이썬 소스코드를 해석 &amp; 실행             x = input()                [파이썬 코드 실행 순서]              할당연산자 (=) 오른쪽부터 실행       input 함수 실행 시, 입력을 기다린다       사용자가 데이터를 입력하고 엔터를 치면       input 함수 자리에 데이터가 들어간다.       x에 데이터가 할당된다.                        예시 2         x = input(\"입력하세요 &gt;&gt;&gt; \")                  입력하세요 &gt;&gt;&gt; : 입력을 유도하게끔 하는 안내문                    [파이썬 코드 실행 순서]              할당연산자 (=) 오른쪽부터 실행       input 함수 실행 시, 메시지를 출력하고 입력을 기다린다.       사용자가 데이터를 입력하고 엔터를 치면       input 함수 자리에 데이터가 들어간다.       x에 데이터가 할당된다.                [실습문제 4.3.1]      사용자로부터 2개의 숫자(20, 40)를 입력 받고, 더한 결과를 출력하기   먼저 푼 뒤 강의 이어 들을 것        내가 푼 결과         NumOne = input(\"첫번째 숫자를 입력하세요 &gt;&gt;&gt; \")   NumTwo = input(\"두번째 숫자를 입력하세요 &gt;&gt;&gt; \")        result = int(NumOne) + int(NumTwo)   print(result)                        강의 해설         # 실습문제 4.3.1   # 사용자로부터 두 개의 숫자를 입력 받고,   # 더한 결과를 출력하기        x = input(\"첫번째 숫자를 입력하세요 &gt;&gt;&gt;\")   y = input(\"두번째 숫자를 입력하세요 &gt;&gt;&gt;\")        result = x + y   print(result)           ⇒ 코드를 실행한 뒤 차례로 20, 40의 입력값을 넣고 엔터를 치면 “2040”라는 결과값이 출력된다.                    자료형을 확인해본다         # 자료형 확인하기 : type(x)   # str = string = 문자열   print(type(x))                  &lt;class ‘str’&gt;라는 결과값이 출력된다. 즉, x의 자료형은 문자열이다.                      # 숫자형으로 변환   # int 함수를 사용 : int(데이터)   result = int(x) + int(y)   print(result)                  x, y 값을 정수로 변환해주면 정상적으로 작동한다.                [실습문제 4.3.2]   사용자로부터 태어난 연도를 입력 받으면, 현재 나이를 출력하기      표준 입력: 태어난 연도를 입력하세요 »&gt; 1994   표준 출력: 현재 나이는 29세입니다.   내가 푼 방법   birth_year = input(\"태어난 연도를 입력하세요 &gt;&gt;&gt; \") current_year = 2022 current_age = current_year - int(birth_year)  result = \"현재 나이는\" + str(current_age) + \"세 입니다.\" print(result)      수정이 필요한 부분: 현재 나이를 계산할 때에는 현재연도 - 출생연도에 1을 더해주어야한다.                강의 해설         year = input(\"태어난 연도를 입력하세요 &gt;&gt;&gt; \")   age = 2022 - year + 1   print(\"현재나이는\", age, \"세 입니다.\")                  해당 함수 실행 시 TypeError: unsupported operator type(s) for : 'int' and 'str' 에러 발생                input으로 받은 값이 str이기 때문에 age에서 숫자 연산이 불가능               year를 정수형으로 변환한다.             // 바로 int로 감싸도 됨   year = int(input(\"태어난 연도를 입력하세요 &gt;&gt;&gt; \"))        age = 2022 - year + 1   print(\"현재나이는\", age, \"세 입니다.\")                  해당 함수 실행 및 태어난 연도를 입력하면 “현재나이는 현재나이 세 입니다”라는 결과가 나온다.                    ## 2. 정리              사용자로부터 입력받기: `input(“입력할 시 출력할 메시지”))       자료형변환: 숫자형으로 변환(int(데이터))                본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.           패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW        #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day6/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 7일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-1. 조건문 개념 강의를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  Ch05. 제어문   1. 조건문 개념   1. 제어문 사용 이유      프로그램은 기본적으로 위에서 아래로 순차적으로 실행   명령 A,B 중 한 개를 선택해 실행하고 싶거나 - 조건문   명령들을 반복해 실행하고 싶을 때 - 반복문   제어문 = 조건문 + 반복문          예시1: 치킨 or 피자? - 조건문   예시2: 유투브 영상보기 - 반복문        2. 조건문의 개념      예시: 술집이나 클럽에 입장할 때 입장 가능 여부를 출력하는 조건문                 start: 시작   age = 20: age에 20이라는 값을 저장   age &gt; 19: 조건문   입장 가능: age가 19보다 클 경우   입장 불가능: age가 19보다 크지 않을 경우   end          이 개념을 파이썬에 적용하면? if문        3. if 문 사용법      기존 비밀번호 = “1234”   입력한 비밀번호 = “1234”        만약 비밀번호를 정확히 입력했으면       ⇒ 로그인 성공           [파이썬 코드]   origin_pass = \"1234\" input_pass = \"1234\" if origin_pass == input_pass:     print(\"로그인 성공\")      origin_pass = input_pass : 비교연산자   : : if의 명령블록이 실행된다는 뜻   print(”로그인 성공\") : if문의 명령블록임을 나타내기 위해 들여쓰기.        4. 실습   1. if와 else   # 조건문 # : 조건에 따라 실행할 명령이 달라 지는 것  origin_pass = \"1234\" input_pass = input(\"패스워드를 입력하세요 &gt;&gt;&gt;\")  if input_pass == origin_pass: # 조건 A     # 조건 A가 참     print(\"로그인 성공!\")     print(\"반갑습니다.\") else:     # 조건 A가 거짓     print(\"로그인 실패!\")     print(\"비밀번호를 확인하세요.\")      else: 조건 A가 거짓일 때 하위 명령블록 실행          출력 결과   # input_pass == 1234 # 조건 A가 참 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/01.조건문개념.py 패스워드를 입력하세요 &gt;&gt;&gt;1234 로그인 성공! 반갑습니다.  # input_pass == 123 # 조건 A가 거짓 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/01.조건문개념.py 패스워드를 입력하세요 &gt;&gt;&gt;123 로그인 실패! 비밀번호를 확인하세요.       3. else if   origin_pass = \"1234\" input_pass = input(\"패스워드를 입력하세요 &gt;&gt;&gt;\")  if input_pass == origin_pass: # 조건 A     # 조건 A가 참     print(\"로그인 성공!\")     print(\"반갑습니다.\") elif input_pass == \"\":     # 조건 A 거짓, 조건 B 참     print(\"아무것도 입력하지 않았습니다.\") else:     # 조건 A가 거짓, 조건 B 거짓     print(\"로그인 실패!\")     print(\"비밀번호를 확인하세요.\")      elif = if 외의 조건을 새로 추가하고 싶을 때 사용   elif는 if 바로 뒤에 입력해야한다.          출력 결과   # 조건 A가 참 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/01.조건문개념.py 패스워드를 입력하세요 &gt;&gt;&gt;1234 로그인 성공! 반갑습니다.  # 조건 A 거짓, 조건 B 참 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/01.조건문개념.py 패스워드를 입력하세요 &gt;&gt;&gt; 아무것도 입력하지 않았습니다.  # 조건 A가 거짓, 조건 B 거짓 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/01.조건문개념.py 패스워드를 입력하세요 &gt;&gt;&gt;123 로그인 실패! 비밀번호를 확인하세요.        오늘 강의에서는 조건문 if의 개념과 간단한 사용법을 알아보았다. 다음 시간부터는 조건문 실습문제를 풀어보도록 하자.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day7/",
        "teaser": null
      },{
        "title": "[Python/VScode]MacOS zsh: no matches found 에러 해결",
        "excerpt":"     💡   zsh에서는 몇몇 특수문자를 문자열이 아닌 명령어로 인식한다.        1. 에러 상황   한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online 과정을 들으며 vscode에 코드를 작성하던 중, 아래와 같이 파이썬(Python) 코드가 실행이 되지 않는 현상이 발생했다.       (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter4/02.연산(2).py zsh: no matches found: /Users/usr/Documents/python_basic/myvenv/Chapter4/02.연산(2).py       zsh에서 파이썬 파일 경로를 찾지 못하고 있었는데, 구글링을 해보니 zsh에서 몇몇 특수문자를 문자열이 아닌 명령어로 인식해 발생한 현상이라고 한다.        2. 해결 방법   내 경우에는 괄호 () 가 명령어로 인식되어 발생한 문제라, 다음과 같이 파일명에 괄호를 제거하고 - 를 넣어주었더니 에러가 해결되었다.       (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter4/02.연산-2.py       참고로 zsh 에서 명령어로 예약된 특수문자는 다음과 같다. zsh: no matches found 에러가 발생할 경우 파일명이나 디렉토리명 등 파이썬 코드가 저장된 경로에 아래의 특수문자가 삽입되어있지 않은지 확인해보자.                      특수문자       의미                       ~       홈 디렉토리                 `       명령 대체                 #       Comment                 ()       하위 셸 시작 / 종료                 |       파이프                 {}       명령 블록                 ‘       강한 인용부호                 &lt;       입력 재지정                 /       경로명 분리                 $       변수                 &amp;       백그라운드 실행                 *?       와일드카드                 \\       문자 그대로                 []       문자 집합                 ;       명령 분리                 “       약한 인용부호                 &gt;       출력 재지정                 !       NOT          ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","파이썬에러","zsh에러","nomatchesfound에러","파이썬특수문지","파이썬","Python","vscode에러","Python에러"],
        "url": "/programming/Python-zsh-nomatchesfound-error/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 8일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-2. 조건문 실습문제(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  2. 조건문 실습문제(1)   1. 실습문제 5.1.1      회사를 그만두게 된 유진이는 유투브를 시작하게 되었다. 그리고 유투브를 통해 수익창출을 하려고 한다. 프로그램 사용자로부터 현재 구독자 수를 입력 받으면, 수익 창출이 가능한지 불가능한지 알려주는 프로그램을 작성해보자. (단, 수익창출은 구독자가 1000명 이상일 경우 가능하다)            표준 입력: 현재 구독자 수를 입력하세요 &gt;&gt;&gt; 1200       표준 출력: 수익 창출이 가능합니다!       표준 입력: 현재 구독자 수를 입력하세요 &gt;&gt;&gt; 800       표준 출력: 수익 창출이 불가능합니다!           [내 풀이]   subscriber = input(\"현재 구독자 수를 입력하세요 &gt;&gt;&gt;\")  if int(subscriber) &gt;= 1000:     print(\"수익 창출이 가능합니다!\") else:     print(\"수익 창출이 불가능합니다!\")   [강의 해설]      구독자 수 입력값을 받는 함수를 작성한다.   작성한 뒤 print 함수로 제대로 출력 되는지 확인한다.   Tip: 코드를 작성 시에는 단계적으로 동작 테스트를 하면서 작성하는 것이 좋다.   sub_count = input(\"현재 구독자 수를 입력하세요 &gt;&gt;&gt;\") print(sub_count)      input 값에 숫자를 넣으면 잘 출력되는 것을 확인할 수 있다.   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/02-2.실습문제5.1.1-해설.p y 현재 구독자 수를 입력하세요 &gt;&gt;&gt;22 22      1000명 이상일 때 “수익창출이 가능합니다!”라는 문구가 출력되는 if문을 작성해보자.   sub_count = input(\"현재 구독자 수를 입력하세요 &gt;&gt;&gt;\")  if sub_count &gt;= 1000:     print(\"수익 창출이 가능합니다!\")      출력 결과: sub_count 가 string(str) 형식이기 때문에 다음과 같은 타입 에러가 발생한다.   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/02-2.실습문제5.1.1-해설.p y 현재 구독자 수를 입력하세요 &gt;&gt;&gt;1200 Traceback (most recent call last):   File \"/Users/usr/Documents/python_basic/myvenv/Chapter5/02-2.실습문제5.1.1-해설.py\", line 5, in &lt;module&gt;     if sub_count &gt;= 1000: TypeError: '&gt;=' not supported between instances of 'str' and 'int'      sub_count 의 자료형을 int 형태로 바꿔준다.   sub_count = int(input(\"현재 구독자 수를 입력하세요 &gt;&gt;&gt;\"))  if sub_count &gt;= 1000:     print(\"수익 창출이 가능합니다!\")      1000명 이상이 아닐 경우 수익 창출이 불가능합니다! 라는 문장을 출력하는 else문 작성   sub_count = int(input(\"현재 구독자 수를 입력하세요 &gt;&gt;&gt;\"))  if sub_count &gt;= 1000:     print(\"수익 창출이 가능합니다!\") else:     print(\"수익 창출이 불가능합니다!\")   2. 실습문제5.1.2      윤행이는 평소 휴대폰을 너무 많이 사용해 공부시간을 다 빼앗기고 있었다. 이렇게 가면 얼마 남지 않는 기말고사를 망칠 게 뻔했다. 윤행이가 공부 시간을 다 채울 경우에만 휴대폰을 사용할 수 있도록 프로그램을 만들어주자.   조건            10시간 이상: 휴대폰 잠금 해제       5시간 이상: 휴대폰 30분 사용가능       나머지: 사용 불가능           표준입력 1: 공부시간을 입력하세요(시간) &gt;&gt;&gt; 10   표준출력 1: 휴대폰 잠금이 해제됩니다.   표준입력 2: 공부시간을 입력하세요(시간) &gt;&gt;&gt; 5   표준출력 2: 휴대폰을 30분간 사용 가능합니다.   표준입력 3: 공부시간을 입력하세요(시간) &gt;&gt;&gt; 2   표준출력 3: 휴대폰 사용이 불가능합니다.   [내 풀이]   study_hour = int(input(\"공부시간을 입력하세요(시간) &gt;&gt;&gt;\"))  if study_hour &gt;= 10:     print(\"휴대폰 잠금이 해제됩니다.\") elif study_hour &gt;= 5:     print(\"휴대폰을 30분간 사용 가능합니다.\") else:     print(\"휴대폰 사용이 불가능합니다.\")      결과 확인   (myvenv) ➜  python_basic /Users/jinipark/Documents/pyt hon_basic/myvenv/bin/python /Users/jinipark/Documents/ python_basic/myvenv/Chapter5/03-1.실습문제5.1.2.py 공부시간을 입력하세요(시간) &gt;&gt;&gt;10 휴대폰 잠금이 해제됩니다  (myvenv) ➜  python_basic /Users/jinipark/Documents/pyt hon_basic/myvenv/bin/python /Users/jinipark/Documents/ python_basic/myvenv/Chapter5/03-1.실습문제5.1.2.py 공부시간을 입력하세요(시간) &gt;&gt;&gt;5 휴대폰을 30분간 사용 가능합니다.  (myvenv) ➜  python_basic /Users/jinipark/Documents/pyt hon_basic/myvenv/bin/python /Users/jinipark/Documents/ python_basic/myvenv/Chapter5/03-1.실습문제5.1.2.py 공부시간을 입력하세요(시간) &gt;&gt;&gt;2 휴대폰 사용이 불가능합니다.   [강의 해설]   # 실습문제 5.1.2  study_time = int(input(\"공부시간을 입력하세요(시간) &gt;&gt;&gt;\"))  if study_time &gt;= 10:     print(\"휴대폰 잠금이 해제됩니다.\") elif study_time &gt;= 5:     print(\"휴대폰을 30분간 사용가능 합니다.\") else:     print(\"휴대폰 사용이 불가능합니다.\")      결과 확인   # 공부시간 = 10 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/03-2.실습문제5.1.2-해설.p y 공부시간을 입력하세요(시간) &gt;&gt;&gt;10 휴대폰 잠금이 해제됩니다.  # 공부시간 = 5 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/jinipark/Documents/ python_basic/myvenv/Chapter5/03-2.실습문제5.1.2-해설.p y 공부시간을 입력하세요(시간) &gt;&gt;&gt;5 휴대폰을 30분간 사용가능 합니다.  # 공부시간 = 2 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/jinipark/Documents/ python_basic/myvenv/Chapter5/03-2.실습문제5.1.2-해설.p y 공부시간을 입력하세요(시간) &gt;&gt;&gt;2 휴대폰 사용이 불가능합니다.             위의 조건식을 도식화해서 표현하자면 아래와 같다.                   본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.      패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW   #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day8/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 9일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-3. 조건문 실습문제(2)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  3. 조건문 실습문제(2)   1. 실습문제 5.1.3      현동이는 강의를 8시간 동안 들으니, 배가 너무 고파 저녁을 먹기로 하였다. 현동이가 현재 가진 금액을 통해 최대로 먹을 수 있는 음식을 출력해 주는 프로그램을 작성해 보자.          [조건] 20000원 이상 = 치킨, 10000원 이상 = 떡볶이, 2000원 이상: 편의점 김밥   표준 입력 1: 현재 가진 금액을 입력 &gt;&gt;&gt;   표준 출력 1: 오늘 저녁은... 치킨!   표준 입력 2: 현재 가진 금액을 입력 &gt;&gt;&gt;   표준 출력 2: 오늘 저녁은... 떡볶이!   표준 입력 3: 현재 가진 금액을 입력 &gt;&gt;&gt;   표준 출력 3: 오늘 저녁은... 편의점 김밥!        [내 풀이]   cash = int(input(\"현재 가진 금액을 입력 &gt;&gt;&gt;\"))  if cash &gt;= 20000:     print(\"오늘 저녁은... 치킨!\") elif cash &gt;= 10000:     print(\"오늘 저녁은... 떡볶이!\") elif cash &gt;= 2000:     print(\"오늘 저녁은... 편의점 김밥!\")          결과 출력   # 현재 금액 = 20000 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/04-1.실습문제5.1.3.py 현재 가진 금액을 입력 &gt;&gt;&gt;20000 오늘 저녁은... 치킨!  # 현재 금액 = 12000 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/04-1.실습문제5.1.3.py 현재 가진 금액을 입력 &gt;&gt;&gt;12000 오늘 저녁은... 떡볶이!  # 현재 금액 = 2000 (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr /Documents/ python_basic/myvenv/Chapter5/04-1.실습문제5.1.3.py 현재 가진 금액을 입력 &gt;&gt;&gt;2000 오늘 저녁은... 편의점 김밥!       [강의 해설]   # 실습문제 5.1.3  money = int(input(\"현재 가진 금액을 입력 &gt;&gt;&gt;\"))  if money &gt;= 20000:     print(\"오늘 저녁은... 치킨!\") elif money &gt;= 12000:     print(\"오늘 저녁은... 떡볶이!\") elif money &gt;= 2000:     print(\"오늘 저녁은... 편의점 김밥!\")      if 문 사용예            if       if - else       if - elif (else로 끝내지 않아도 됨)       if - elif - else                2. 실습문제 5.1.4      프로그램 사용자로부터 국어, 수학, 영어 성적이 입력된다. 세 과목의 평균 점수가 80점 이상이면 합격이다. 그런데 점수에 따라 함격 또는 불합격이 정해지는 프로그램에 오류가 발생했다. 80점 이상일 경우 불합격이 표시되도록 프로그램을 작성해보자 (단, 0점에서 100점 사이의 숫자를 입력하지 않으면 “잘못 입력하였습니다.”를 출력하자)          표준 입력 1: 국어 &gt;&gt;&gt; 95 , 수학 &gt;&gt;&gt; 75 , 영어 &gt;&gt;&gt; 100   표준 출력 1: 불합격   표준 입력 2: 국어 &gt;&gt;&gt; 55 , 수학 &gt;&gt;&gt; 40 , 영어 &gt;&gt;&gt; 70   표준 출력 2: 불합격   표준 입력 3: 국어 &gt;&gt;&gt; 1 , 수학 &gt;&gt;&gt; 120 , 영어 &gt;&gt;&gt; 85   표준 출력 3: 잘못 입력하였습니다.        [내 풀이]   korean = int(input(\"국어 &gt;&gt;&gt;\")) math = int(input(\"수학 &gt;&gt;&gt;\")) english = int(input(\"영어 &gt;&gt;&gt;\"))  average = (korean + math + english)/3  if not (0 &lt; korean &lt;= 100 and 0 &lt; math &lt;= 100 and 0 &lt; english &lt;= 100):     print(\"잘못 입력하였습니다.\") elif average &gt;= 80:     print(\"불합격\") elif average &lt; 80:     print(\"합격\")         결과 출력   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/05-1.실습문제5.1.4.py 국어 &gt;&gt;&gt;95 수학 &gt;&gt;&gt;75 영어 &gt;&gt;&gt;100 불합격  (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/05-1.실습문제5.1.4.py 국어 &gt;&gt;&gt;55 수학 &gt;&gt;&gt;40 영어 &gt;&gt;&gt;70 합격  (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/05-1.실습문제5.1.4.py 국어 &gt;&gt;&gt;1 수학 &gt;&gt;&gt;120 영어 &gt;&gt;&gt;85 잘못 입력하였습니다.        [강의 해설]      두 가지 방법 중 첫번째 방법을 살펴보자.   korean = int(input(\"국어 &gt;&gt;&gt;\")) math = int(input(\"수학 &gt;&gt;&gt;\")) english = int(input(\"영어 &gt;&gt;&gt;\"))  total = korean + match + english avg = total / 3  # 방법 1 if 0 &lt;= korean &lt;= 100 and 0 &lt;= math &lt;= 100 and 0 &lt;= english &lt;= 100:     print(\"입력이 정확함\") else:     print(\"잘못 입력하였습니다.\")         위 함수가 잘 작동하는지 테스트 해보자.   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/05-2.실습문제5.1.4-해설.p y 국어 &gt;&gt;&gt;-1 수학 &gt;&gt;&gt;100 영어 &gt;&gt;&gt;100 잘못 입력하였습니다.  (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/05-2.실습문제5.1.4-해설.p y 국어 &gt;&gt;&gt;120 수학 &gt;&gt;&gt;100 영어 &gt;&gt;&gt;100 잘못 입력하였습니다.  (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/05-2.실습문제5.1.4-해설.p y 국어 &gt;&gt;&gt;50 수학 &gt;&gt;&gt;60 영어 &gt;&gt;&gt;70 입력이 정확함          if 문 안에 조건문을 넣어(중첩) 80점 이상/미만일 경우 불합격/합격을 출력하자.   korean = int(input(\"국어 &gt;&gt;&gt;\")) math = int(input(\"수학 &gt;&gt;&gt;\")) english = int(input(\"영어 &gt;&gt;&gt;\"))  total = korean + math + english avg = total / 3  # 방법 1 if 0 &lt;= korean &lt;= 100 and 0 &lt;= math &lt;= 100 and 0 &lt;= english &lt;= 100:     if avg &gt;= 80:         print(\"불합격\")     else:         print(\"합격\") else:     print(\"잘못 입력하였습니다.\")           이번에는 중첩문 없이 문제를 풀어보도록 하자.   # 방법 2 if korean &lt;0 or korean &gt; 100 or math &lt;0 or math &gt; 100 or english &lt;0 or english 100:     print(\"잘못 입력하였습니다.\") elif avg &gt;= 80:     print(\"불합격\") else:     print(\"합격\")       본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day9/",
        "teaser": null
      },{
        "title": "[Linux/Ubuntu]리눅스(Linux) 시간을 한국 표준시(KST)로 변경하기",
        "excerpt":"     1. 리눅스(Linux) 시간을 한국 표준시(KST)로 변경   💡  리눅스의 기본 Timezone은 PDT/UST 이므로 KST로 재설정해주어야 한다.        깃허브 블로그(Github Pages)용으로 VMware Fusion에서 우분투(Ubuntu)를 설치하고 난 뒤, Jekyll과 Git으로 블로그에 포스팅을 진행했다. 하지만 Github에서 표시되는 commit 일시와 실제 commit 일시가 다른 현상이 발생했는데, 확인해보니 Timezone이 한국표준시가 아닌 다른 시간대로 설정되어 생긴 현상이었다.       구글링으로 찾아보니 리눅스를 설치할 때 Timezone을 설정하지 않으면 PDT/UST 등이 기본으로 설정된다고 한다.       시스템 자체에 문제가 생긴 부분은 아니지만 패스트캠퍼스에서 매일 포스팅 업로드 챌린지를 하고 있는데, 나중에 업로드 일자가 문제가 될까 싶어서 아래와 같은 방법으로 Timezone을 KST로 변경해주었다.       참고로 현재 내 환경은 아래와 같다.          MacOS Monterey 12.3.1   VMware Fusion 12.1.2   Ubuntu 20.04           date 명령어를 사용해 현재 시간을 확인한다.            나의 경우에는 PDT(태평양 표준시: Pacific Daylight Time)로 설정되어있었다.            canary@ubuntu:~/myblog/jinnypark9393.github.io$ date  Mon 18 Apr 2022 04:54:58 AM PDT                  현재 Timezone 을 확인한다.   canary@ubuntu:~/myblog/jinnypark9393.github.io$ ls -al /etc/localtime lrwxrwxrwx 1 root root 39 Apr 13 06:29 /etc/localtime -&gt; /usr/share/zoneinfo/America/Los_Angeles          Timezone을 한국표준시(KST)로 변경해준다.   canary@ubuntu:~/myblog/jinnypark9393.github.io$ sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime [sudo] password for canary:           변경된 Timezone 을 확인한다.   canary@ubuntu:~/myblog/jinnypark9393.github.io$ ls -al /etc/localtime lrwxrwxrwx 1 root root 30 Apr 18 20:56 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Seoul          date로 현재 시간이 제대로 설정되었는지 확인한다.   canary@ubuntu:~/myblog/jinnypark9393.github.io$ date Mon 18 Apr 2022 08:56:34 PM KST  ","categories": ["DevOps"],
        "tags": ["linux설정","linux","Ubuntu","Ubuntu설정","우분투시간변경","리눅스시간변경","데브옵스엔지니어","DevOps"],
        "url": "/devops/Linux-Ubuntu-Change-Timezone/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 10일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-4. 리스트 자료형 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  4. 리스트 자료형   1. 리스트를 사용하는 이유      10개의 동물 이름 데이터를 저장해야 할 때            animal1 = “사자”       animal2 = “호랑이”       …       animal10 = “강아지”           리스트를 사용하면 한줄의 코드로 작성할 수 있다.            animal = [”사자”, “호랑이”, … “강아지”]                2. 리스트를 만드는 방법      리스트명 = [데이터, 데이터, … , 데이터]   빈 리스트도 만들 수 있다: 리스트명 = []        3. 데이터 접근하기      인덱스를 이용해 몇 번째 데이터인지 알려줄 수 있다.   인덱스는 0부터 시작한다.   animals[n] ⇒ animals[0] = “사자”, animals[1] = “호랑이”        4. 데이터 조작하기      데이터 추가: 리스트.append(데이터)   데이터 할당: 리스트[인덱스] = 데이터   데이터 삭제: del 리스트[인덱스]          예: a = [1, 2, 3]            추가: a.append(4) ⇒ a = [1, 2, 3, 4]       할당: a[0] = 0 ⇒ a = [0, 2, 3, 4]       삭제: del a[1] ⇒ [0, 3, 4]                  슬라이싱: 리스트[시작:끝+1]   리스트 길이: len(리스트)   리스트 정렬: 리스트.sort()          예: b = [3, 4, 2, 1]            슬라이싱: b[1:3] ⇒ [4,2]       길이: len(b) ⇒ 4       정렬: b.sort() ⇒ [1, 2, 3, 4]                5. 실습   # 1. 리스트 만들기 # - 데이터가 있는 리스트 from operator import le  animals = [\"가물치\", \"벼메뚜기\", \"비단뱀\", \"도룡뇽\"]  #  - 데이터가 없는 리스트 empty = []  # 2. 리스트 조작하기  # - 데이터 접근하기 # 인덱스는 0 부터 시작한다. print(animals[2]) print(animals[-1]) # 뒤에서부터 첫번째  # - 데이터 추가하기 animals.append(\"고라니\") print(animals)  # - 데이터 할당하기 # 기존 데이터를 대체 animals[1] = \"청개구리\" print(animals)  # - 데이터 삭제하기 del animals[0] print(animals)  # - 리스트 슬라이싱 print(animals[1:3]) print(animals[:]) # 전체 print(animals[:3]) # 시작 인덱스부터 print(animals[1:]) # 마지막까지  # - 리스트 길이 print(len(animals))  # 리스트 정렬 # 내림차순 정렬 시 animals.sort(reverse=True) animals.sort() print(animals)       본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day10/",
        "teaser": null
      },{
        "title": "[AWS]AWS Cloud Practitioner 자격증 합격 후기 (비전공자, 독학)",
        "excerpt":"     [AWS]AWS Practitioner 자격증 합격 후기 (비전공자, 독학)   22년 1월 15일 CSPCloud Service Provider: 클라우드 사업자 중 가장 규모가 큰 AWS의 첫 단계 자격증인 Cloud Practitioner 자격증을 취득했다. 787점으로 높은 점수로 통과한 건 아니라 약간 머쓱하지만(ㅎㅎ) 공부방법과 시험 팁들을 공유해보려 한다.               1. AWS 시험 개요   AWS 자격증 시험 단계는 총 세가지로 크게 세 단계로 분류할 수 있다.              공식 사이트의 그림을 살펴보면 기초 &gt; 어소시에이트 &gt; 프로페셔널 세 단계로 분류되어있다. 이 세 단계의 자격증 외에도 각 전문 분야에 해당하는 자격증도 별도로 존재하는데, 내가 이번에 취득하게 된 건 가장 기초가 되는 Cloud Practitioner 자격증.       기본 개념을 망라하는 시험이고 시험 난이도가 크게 높지 않아 클라우드 엔지니어를 희망하는 사람 뿐만 아니라, 클라우드 관련 업계 종사자들도 충분히 볼만한 시험이라고 생각된다.        2. AWS Cloud Practitioner 시험 기본 정보           시험 비용: 100 USD       시험 응시 언어: 영어, 프랑스어, 독일어, 인도네시아어, 이탈리아어, 일본어, 한국어, 포르투갈어, 중국어, 스페인어            우리같은 비영어권 수험자들은 시험 응시언어를 선택하면 시험시간을 30분 추가로 받을 수 있다.       시험 응시언어를 한국어로 선택할 경우에는 30분 추가 시간을 할당받을 수 없다. 다만, 시험을 보는 도중에도 한국어 &amp; 영어 옵션 선택으로 문제를 두 개 언어로 볼 수 있다(하지만 나는 덤프를 영어로만 봤기 때문에 딱히 도움은 되지 않았다 ㅎㅎ).                Testing options: 테스팅 센터 혹은 온라인; Pearson VUE or PSI            문항 수: 65문제       시험 커트라인: 700점/1,000점        3. 시험 요구 수준      AWS 웹사이트에서는 AWS Cloud Pracitioner의 선수 지식으로 6개월간의 실무경험 을 들고 있는데, 이는 필요한 지식 수준을 얘기한 것이고, 증빙 제출 등이 필요한 필수 요건은 아니니 비경험자도 편하게 응시하시면 된다.          AWS Practitioner 시험은 클라우드의 기본 서비스 종류와 개념들을 이해하고 있는지 확인하는 시험으로, 시험 범위 및 출제 비중은 아래와 같다.            AWS 클라우드의 가치 설명       AWS 공동책임 모델 이해 및 설명       보안 모범사례 이해       AWS 클라우드 비용, 경제성 및 결제 관행 이해       컴퓨팅, 네트워크, 데이터베이스, 스토리지를 포함한 핵심 AWS 서비스 설명 및 포지셔닝       일반 사용 사례에 맞는 AWS서비스 식별                  시험 문제는 모두 객관식 으로, 4시선다형과 복수응답형이 혼합되어 출제된다.        4. 공부기간   나는 퇴근 후에 하루 1~2시간 내외로 공부해서 그런지 2주 가량 공부하고 시험을 쳤는데, 클라우드 서비스(특히 IaaS쪽)에 대한 기본 개념이 있는 사람이라면 덤프 위주로 빡세게 준비하면 3~4일이면 볼 듯 하다.        5. 공부 방법      Examtopics (https://www.examtopics.com)            웬만한 IT 시험이 으레 그렇듯 AWS 시험들도 모두 덤프(Dump: 기출문제라고 생각하면 편하다)가 존재한다. AWS 시험에서 가장 자주 쓰이는 덤프사이트는 Examtopics라는 웹사이트로 나는 이번 시험에서 거의 이걸로 공부했었다.       덤프사이트로 공부할 때 주의점은 사이트에 나와있는 답은 오답이 많으니 반드시 Discussion을 확인해야한다 라는 점.       참고로 해당 사이트는 페이지를 넘길때마다 캡차를 풀어줘야하는데, 일정 페이지 수가 넘어가면 로그인을 하라 거나 컨트리뷰션 권한으로 접속해야한다(유료) 라는 메시지가 뜨면서 페이지가 넘어가지 않게 된다. 이럴 때에는 구글 시크릿 모드로 접속하게 되면 페이지를 볼 수 있는데, 페이지 넘어갈 때마다 새 창을 띄우지 않으면 똑같은 메시지가 뜨니 문제를 여러 번 볼 사람은 문제를 카피해놓고 로컬에 저장해서 보는 걸 추천(나는 파일로 만들어서 저장해두고 풀었었다).       나는 덤프를 550번정도까지만 떠놓고 2~3번 정도 풀어보고 갔는데 처음 보는 문제가 25문제 이상 나왔었다(;;). 덤프로만 볼 사람들은 꼭 문제를 끝까지 보고 각 시험 메인 페이지에 떠있는 댓글들도 확인하고 갈 것. 최근 시험 본 사람들이 댓글로 후기를 남겨놓는데, 덤프 적중율은 물론이고 업데이트 된 새로운 문제들도 댓글에 남겨놓는 경우가 있어 도움이 된다.                  Youtube (https://youtu.be/3hLmDS179YE)            내가 공부했던 방법 두번째. 유데미나 다른 긴 강의는 듣고싶지 않아 대충 덤프만 보고 가려다 유투브 알고리즘에 걸려 보게 된 영상. 3시간 짜리 영상인데 간단한 실습과 함께 개념들이 정리되어있다.       물론 이 영상만으로는 시험통과하기는 어려우나 개념 잡기로는 꽤 괜찮았던 영상이라 추천. 실제로 처음 보는 문제들이 나왔을 때 이 강의에서 듣고 이해했던 개념 베이스로 많이 풀었었다(안들었으면 어쩔뻔).       영문 자막이 달려있고 발음이 꽤 깔끔해 영어에 큰 거부감이 없다면 문제가 없을 듯 하지만 영문이 너무 싫으신 분들은 아래 Udemy 강의를 보시는 게 나을 것.                  Udemy (https://www.udemy.com/ko/topic/aws-certified-cloud-practitioner/)            해외 벤더사에서 주관하는 IT 관련 자격증을 준비해본 분이라면 모를 수 없는 사이트인 유데미(Udemy). 이번에 웅진씽크빅과 전략적 파트너십을 맺게되어 한글 번역본이 꽤나 많이 나오고 있다.       Cloud Practitioner도 한국어 자막 버전이 출시되어 있으니 영어 자료를 보기 부담스러워 하시는 분들이시면 추천. 나는 Practitioner 시험인데 굳이 돈들이고 공부해야하나 라는 거만한 마음(반성합니다)으로 듣지 않았지만 들으신 분들은 도움 많이 받으신 듯 하다.       정가는 생각보다 가격대가 있는데 할인 받으면 커피 일주일 참는 정도로 너끈히 낼 수 있는 가격이다. (유데미 수강하시는 할인은 창을 켤 때마다 랜덤하게 갱신 되니 시크릿 창으로 띄워보다 할인이 적용될 때 사면 된다는 팁을 들었었던 기억이 있는데 확실하진 않음.)                  AWS 공인 교육 (https://aws.amazon.com/ko/training/digital/aws-cloud-practitioner-essentials/?cp=sec&amp;sec=prep)            AWS에서도 공인 교육 코스를 준비해놓고 있었는데 시험 후기에서 이 강의를 듣고 준비했다는 분들은 많이 않은 듯 해 나는 패스했었다.                6. 수험료 할인 방법   AWS는 제일 잘 팔리는 솔루션이라 그런지 GCP(Google Cloud Platform) 이나 Microsoft Azure 처럼 시험 할인 바우처를 호락호락하게(?) 주지는 않는 편. AWS 자격증 시험에 합격하게 되면 50% 할인 바우처가 나오게 되는데, Cloud Practitioner는 가장 초급 단계의 시험이기 때문에 이런 바우처를 거의 쓸 수 없다.       다만, 가끔 열리는 세미나에서 50% 할인 바우처를 나눠주기도 하니 잘 살펴보도록 하자. 나는 IT 자격증 AWS GCP Azure NCP 아무말 이라는 오픈카톡에서 AWS 클라우드 로드쇼 AWS 자격증 챌린지 두 개 이벤트를 알게 되어 이벤트 참여 시 나눠주는 Practitioner &amp; SAA 50% 바우처(시험 공부를 미루고 미루다 SAA 바우처는 결국 날렸다 ㅎ)를 활용해 이번 시험을 신청했었다.        7. 시험 신청과 결과 확인      시험 신청            AWS Training 웹사이트에서 (aws.training/Certification) 가능하다. 회원가입 필수.       시험 취소 &amp; 시험 일정변경은 시험 시간 24시간 전까지 가능. 기간 제한이 있는 바우처의 경우 바우처 유효기간 내에만 변경이 가능하니 참고하시길.       Pearson VUE / PSI 두 개 옵션이 있는데 나는 PSI로 봤었다. 별 이유는 없고 스케쥴이 나한테 맞는 걸로 열려있어서 선택했었음.                  시험 장소            시험은 테스팅 센터 혹은 온라인시험으로 볼 수 있는데, 내가 신청했을 때에는 테스팅 센터가 타임슬롯이 없어 온라인 시험으로 신청했었다.       온라인으로 봤을 때의 시험 준비물은 여권, 그리고 모니터가 없고 다른 사람이 들어오지 않는 조용한 방이 필요하다.                    수험 전 시험용 설치프로그램 및 시스템 호환성 체크를 진행해야하는데, 시험 당일 하려고 하면 갑작스럽게 문제가 생길 때 엄청 당황되니 시험 전날 쯤 미리 설치 및 체크를 완료해 두는 것이 좋다.           이어폰은 착용할 수 없으니 노트북 스피커를 이용해야한다.           시험 보기 전 감독관이 방 내부 및 책상 위를 체크하는데, 나는 미리 다 치워놔서 그런지 딴지를 걸거나 하지는 않고 바로 끝났다.                                  시험 결과            시험을 끝낸 뒤 설문조사를 마치면 바로 합격 여부를 확인할 수 있다.       합격 통지 메일은 당일 및 2~3일내 발송되며, 득점 내역(Score report) 및 자격증 PDF는 자격증 사이트에서 확인 및 다운로드 할 수 있다.           ","categories": ["Cloud"],
        "tags": ["AWS자격증","클라우드자격증","클라우드엔지니어","AWSCLF","AWSCloudPractitioner 데브옵스엔지니어","DevOps"],
        "url": "/cloud/AWS-Cloud-Practitioner/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 11일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-5. 리스트 자료형 실습문제를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  5. 리스트 자료형 실습문제   1. 실습문제 5.2.1      다음은 패스트 고등학교 2학년 3반 1번부터 5번까지의 1분간 팔굽혀펴기 개수이다. 데이터는 각 리스트에 저장되어있다. 각 문항을 실행한 결과를 출력해보자.            result = [33, 40, 12, 63, 52]               [내 풀이]   문항 1. 6번의 팔굽혀펴기 개수는 9개이다. 리스트의 마지막에 추가하자.   result = [33, 40, 12, 63, 52]  # 문항 1 result.append(9) print(result)          출력결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/07-1.실습문제5.2.1.py [33, 40, 12, 63, 52, 9]       문항 2. 2번은 재측정하여 50개를 하였다. 2번의 데이터를 변경해보자.   result = [33, 40, 12, 63, 52]  result[1] = 50 print(result)          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/07-1.실습문제5.2.1.py [33, 50, 12, 63, 52, 9]       문항 3. 3번부터 6번까지 데이터를 슬라이싱하자.   result = [33, 40, 12, 63, 52]  print(result[2:6])          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/07-1.실습문제5.2.1.py [12, 63, 52, 9]       문항 4. 모든 데이터를 오름차순으로 정렬하자.   result = [33, 40, 12, 63, 52]  result.sort() print(result)          출력결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/07-1.실습문제5.2.1.py [9, 12, 33, 50, 52, 63]        [강의 해설]   문항 1. 6번의 팔굽혀펴기 개수는 9개이다. 리스트의 마지막에 추가하자.   # 실습문제 5.2.1 result = [33, 40, 12, 63, 52]  # 문항 1 result.append(9) print(result)       문항 2. 2번은 재측정하여 50개를 하였다. 2번의 데이터를 변경해보자.   # 문항 2 result[1] = 50 print(result)       문항 3. 3번부터 6번까지 데이터를 슬라이싱하자.   # 문항 3 print(result[2:6])       문항 4. 모든 데이터를 오름차순으로 정렬하자.   # 문항 4 result.sort() print(result)        2. 실습문제 5.2.2      턱걸이 평균 측정 프로그램을 만들어보자. 먼저, 턱걸이 횟수를 저장할 빈 리스트를 만든다. 그리고 일주일간의 턱걸이 횟수를 입력 받아 리스트에 저장한다. 리스트에 저장된 데이터의 평균을 구해 출력한다.   표준입력            1일차 턱걸이 횟수 &gt;&gt;&gt; 20       2일차 턱걸이 횟수 &gt;&gt;&gt; 23       3일차 턱걸이 횟수 &gt;&gt;&gt; 16       4일차 턱걸이 횟수 &gt;&gt;&gt; 14       5일차 턱걸이 횟수 &gt;&gt;&gt; 24       6일차 턱걸이 횟수 &gt;&gt;&gt; 27       7일차 턱걸이 횟수 &gt;&gt;&gt; 30           표준 출력: 22        [내 풀이]   # 빈 리스트 만들기 week = []  # 반복문 사용해 1일차부터 7일차까지 값 입력받기 i = 0 for i in range(0,7):     i = i + 1     day = int(input(\"%d일차 턱걸이 횟수 &gt;&gt;&gt;\" % i))     week.append(day)     print(week)  # 리스트 요소를 모두 더한 값 구하기 total = sum(week)  # 평균값 = 리스트 요소를 모두 더한 값 / 리스트 요소 개수 # 계산된 평균값을 정수형으로 변경해준다(기본 출력 float). average = int(total/len(week)) print(int(average))          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/08-1.실습문제5.2.2.py 1일차 턱걸이 횟수 &gt;&gt;&gt;20 [20] 2일차 턱걸이 횟수 &gt;&gt;&gt;23 [20, 23] 3일차 턱걸이 횟수 &gt;&gt;&gt;16 [20, 23, 16] 4일차 턱걸이 횟수 &gt;&gt;&gt;14 [20, 23, 16, 14] 5일차 턱걸이 횟수 &gt;&gt;&gt;24 [20, 23, 16, 14, 24] 6일차 턱걸이 횟수 &gt;&gt;&gt;27 [20, 23, 16, 14, 24, 27] 7일차 턱걸이 횟수 &gt;&gt;&gt;30 [20, 23, 16, 14, 24, 27, 30] 22        [강의 해설]   # 실습 5.2.2  data = [] # 빈 리스트 생성  x = int(input(\"1일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"2일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"3일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"4일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"5일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"6일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"7일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x)  total = data[0] + data[1] + data[2] + data[3] + data[4] + data[5] + data[6] + data[7] avg = total / 7  print(avg)          위의 코드를 실행하면 아래와 같이 인덱스 에러가 발생한다.   IndexError: list index out of range          인덱스 중 범위를 벗어난 경우 발생: data[7] 삭제해준다.   # 실습 5.2.2  data = [] # 빈 리스트 생성  x = int(input(\"1일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"2일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"3일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"4일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"5일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"6일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"7일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x)  total = data[0] + data[1] + data[2] + data[3] + data[4] + data[5] + data[6] avg = total / 7  print(int(avg))          출력된 평균값이 float형이기 때문에 int로 변경해준다.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day11/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 12일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-6. 반복문 개념(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  6. 반복문 개념(1)   1. 반복문을 사용하는 이유      반복적인 작업을 코드로 작성하기 위해 사용.       data = [] # 빈 리스트 생성  # 1 ~ 7일차까지 반복 작업 x = int(input(\"1일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"2일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"3일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"4일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"5일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"6일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x) x = int(input(\"7일차 턱걸이 횟수 &gt;&gt;&gt;\")) data.append(x)  total = data[0] + data[1] + data[2] + data[3] + data[4] + data[5] + data[6] avg = total / 7  print(int(avg))          위의 코드를 반복문으로 축약해보자.   for i in range(1, 101):     x = int(input(i, \"일차 턱걸이 횟수 &gt;&gt;&gt;\"))     data.append(x)        2. 시퀀스 자료형(Sequence Data Type)      순서가 있는 자료형            리스트       문자열       range 객체       튜플, 딕셔너리                3. for 사용법   for 변수 in 시퀀스 자료:     명령문  # 예시 for a in [1, 2, 3, 4]:     print(a)          동작 방식            리스트 자료 안에 있는 첫번째 값인 1이 a에 저장       명령문을 실행: print(a) ⇒ print(1) ⇒ 1 이 출력       두번째 값인 2를 a에 저장       명령문을 실행: print(a) ⇒ print(2) ⇒ 2 가 출력       리스트에 더 이상 데이터가 없을 때까지 반복                4. range 명령어   range(10) # 0~9까지 숫자를 포함하는 range 객체를 만들어준다.        5. 실습   # 반복문 # : 반복해서 명령을 사용하고 싶을 때  # 시퀀스 자료형 # : 순서가 있는 자료형 # 1. 리스트 # 2. 문자열 # 3. range 객체 # 4. 튜플 # 5. 딕셔너리  # for 문 # - 리스트 사용 champions = [\"티모\", \"이즈리얼\", \"리신\"]  for champion in champions:     print(\"선택한 챔피언은\", champion, \"입니다.\")               리스트는 복수형태로 작성하고 변수는 단수형태로 많이 사용            출력 결과물       (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/09.반복문개념_for.py 선택한 챔피언은 티모 입니다. 선택한 챔피언은 이즈리얼 입니다. 선택한 챔피언은 리신 입니다.          문자열 사용   # - 문자열 사용 fighting_message = \"자신감을 가지자! 나에게 한계란 없다!\"  for word in fighting_message:     print(word)          결과 출력   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/09.반복문개념_for.py 자 신 감 을   가 지 자 !   나 에 게   한 계 란   없 다 !          range 객체를 사용해보자.   # - range 객체 사용 # range(10) -&gt; 0~9까지 숫자를 포함하는 Range 객체가 나온다. 0,1,2,3,4,5,6,7,8,9 for i in range(10):     print(i)          결과 출력   # (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/09.반복문개념_for.py 0 1 2 3 4 5 6 7 8 9          range 응용   # - range 객체 사용 # range(10) -&gt; 0~9까지 숫자를 포함하는 Range 객체가 나온다. 0,1,2,3,4,5,6,7,8,9 # range(시작, 끝+1, 단계) for i in range(1,10, 2):     print(i)          결과 출력   # (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/09.반복문개념_for.py 1 3 5 7 9      이번 포스팅에서는 반복문 기초 개념에 대해서 알아보았다. 다음 포스팅에서도 이어서 반복문 개념에 대해 알아보자.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day12/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 13일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-6. 반복문 개념(2)를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  7. 반복문 개념(2)   1. while 사용법      for와의 차이점은?            for문 : 반복할 횟수가 정해져 있을 때       while문: 반복할 횟수가 정해져있지 않을 때                  while 사용법   # 초기식 # while 조건식: #     반복할 명령 #     증감식  i = 0 while i &lt;10:     print(i, \"번째 다짐, 나는 할 수 있다!\")     i += 1 # 복합할당연산자 i + 1 = i      i = 0 : 반복문에 사용되는 변수의 값을 지정   while i &lt; 10: : 반복에 대한 조건 체크. 이 식이 false가 될 때까지 반복.   증감식 : 반복하는 작업을 위해 변수값 증가.        2. 무한루프와 break   # while True: #    반복할 명령 #    if 조건식: #        break  while True:     x = input(\"종료하려면 exit을 입력하세요 &gt;&gt;&gt;\")     if x == \"exit\":         break       조건식 대신 불리언(Boolean) 값을 불러온다.   참일 경우 break를 만나기 전까지 명령을 계속 반복한다. (가장 가까운 반복문만 빠져나오게 됨)        3. 실습   # while # : 보통 반복횟수가 정해지지 않았을 때 사용한다.  i = 5 # 초기식 while i &lt; 9: # 조건식     print(i, \"번째 다짐, 나는 할 수 있다!\")     i += 1 # 증감식          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/10.반복문개념_while.py 5 번째 다짐, 나는 할 수 있다! 6 번째 다짐, 나는 할 수 있다! 7 번째 다짐, 나는 할 수 있다! 8 번째 다짐, 나는 할 수 있다!      # while # : 보통 반복횟수가 정해지지 않았을 때 사용한다.  i = 0 # 초기식 while i &lt; 10: # 조건식     print(i, \"번째 다짐, 나는 할 수 있다!\")     i += 2 # 증감식          결과 출력   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/10.반복문개념_while.py 0 번째 다짐, 나는 할 수 있다! 2 번째 다짐, 나는 할 수 있다! 4 번째 다짐, 나는 할 수 있다! 6 번째 다짐, 나는 할 수 있다! 8 번째 다짐, 나는 할 수 있다!       # 무한루프 # : 조건식에 True를 넣어서 항상 반복되게 만든 것.  while True:     x = input(\"종료하려면 exit을 입력하세요 &gt;&gt;&gt;\")     if x == \"exit\":         break          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/10.반복문개념_while.py 종료하려면 exit을 입력하세요 &gt;&gt;&gt;exid 종료하려면 exit을 입력하세요 &gt;&gt;&gt;a 종료하려면 exit을 입력하세요 &gt;&gt;&gt;b 종료하려면 exit을 입력하세요 &gt;&gt;&gt;c 종료하려면 exit을 입력하세요 &gt;&gt;&gt;d 종료하려면 exit을 입력하세요 &gt;&gt;&gt;e 종료하려면 exit을 입력하세요 &gt;&gt;&gt;f 종료하려면 exit을 입력하세요 &gt;&gt;&gt;exit       이번 포스팅에서는 반복문 개념에 대해서 알아보았다. 다음 포스팅에서는 반복문 실습문제를 풀어보도록 하자.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day13/",
        "teaser": null
      },{
        "title": "[Python]패스트캠퍼스 캐시백 챌린지 14일차",
        "excerpt":"     오늘도 어제에 이어서 “한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online” 의 챕터 5-6. 반복문 실습문제(1)을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.        아래는 공부 인증 사진.                  8. 반복문 실습문제(1)   1. 실습문제 5.3.1      구구단 출력 프로그램을 만들어보자. 프로그램 사용자로부터 출력할 단을 입력 받고, 해당 구구단을 출력하는 프로그램이다.   표준입력: 몇 단을 출력할까요? &gt;&gt;&gt; 5   표준출력            5 * 1 = 5       5 * 2 = 10       …       5 * 9 =45               [내 풀이]   # 단 입력 받기 # 입력값 * 1 ~ 9 까지 반복 곱셈  multiple = int(input(\"몇 단을 출력할까요? &gt;&gt;&gt; \"))  i = 1 while i &lt; 10:     print(multiple, \"*\", i, \"=\", multiple * i)     i += 1          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/11.실습문제5.3.1.py 몇 단을 출력할까요? &gt;&gt;&gt; 5 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45       [강의 해설]      for ~ in 구문과 range를 이용해 함수를 작성해보자.   # 바뀌는 부분을 잘 살펴보자. # 실습문제 5.3.1 # 구구단 출력하기  x = int(input(\"몇 단을 출력할까요? &gt;&gt;&gt;\"))  for i in range(10):     print(i)          출력 확인   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/11.실습문제5.3.1-해설.py 몇 단을 출력할까요? &gt;&gt;&gt;1 0 1 2 3 4 5 6 7 8 9      0 ~ 9 까지가 출력된다.          Range의 시작값(=1) 을 넣어준다.   # 실습문제 5.3.1 # 구구단 출력하기  x = int(input(\"몇 단을 출력할까요? &gt;&gt;&gt;\"))  for i in range(1, 10):     print(i)          출력 확인   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/11.실습문제5.3.1-해설.py 몇 단을 출력할까요? &gt;&gt;&gt;1 1 2 3 4 5 6 7 8 9      1 ~ 9 까지가 출력된다.          구구단 모양으로 출력해주자.   # 실습문제 5.3.1 # 구구단 출력하기  x = int(input(\"몇 단을 출력할까요? &gt;&gt;&gt;\"))  for i in range(1, 10):     print(x, \"*\", i, \"=\", x*i)          출력 확인   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/11.실습문제5.3.1-해설.py 몇 단을 출력할까요? &gt;&gt;&gt;5 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45        2. 실습문제 5.3.2      패스트게임즈에 인턴으로 근무하게 된 종현. 사수에게 과제로 게임 메뉴 만들기를 받았다. 과제 내용은 다음과 같았다.   과제            숫자 1 입력: “게임을 시작합니다” 출력       숫자 2 입력: “실시간 랭킹” 출력       숫자 3 입력: “게임을 종료합니다” 출력 후 프로그램 종료       단, 3을 입력할때까지 프로그램은 계속 실행된다. 1 ~ 3 외 다른 숫자를 입력한 경우 “다시 입력해주세요”를 출력               [내  풀이]   # while True 사용 # if elif else 사용  while True:     x = int(input(\"[메뉴를 입력하세요]\\n 1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;\"))     if x == 1:         print(\"-&gt;게임을 시작합니다\")     elif x == 2:         print(\"-&gt;실시간 랭킹\")     elif x == 3:         print(\"-&gt;게임을 종료합니다\")         break     else:         print(\"-&gt;다시 입력해 주세요\")      파이썬 문자열 줄바꿈 ⇒ \\n 문자 삽입          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/12-1.실습문제5.3.2.py [메뉴를 입력하세요]  1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;1 -&gt;게임을 시작합니다 [메뉴를 입력하세요]  1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;2 -&gt;실시간 랭킹 [메뉴를 입력하세요]  1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;4 -&gt;다시 입력해 주세요 [메뉴를 입력하세요]  1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;5 -&gt;다시 입력해 주세요 [메뉴를 입력하세요]  1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;3 -&gt;게임을 종료합니다       [강의 해설]   # 몇 번 반복 될 지 모를 때 = while # 무한 반복 =&gt; while True: # 반복문 탈출 =&gt; break # 조건문 =&gt; while 문 안에 작성  # 실습문제 5.3.2 # 게임 메뉴 개발하기  while True:     print(\"[메뉴를 입력하세요]\")     select = int(input(\"1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;\"))      if select == 1:         print(\"-&gt; 게임을 시작합니다\")     elif select == 2:         print(\"-&gt; 실시간 랭킹\")     elif select == 3:         print(\"-&gt; 게임을 종료합니다\")         break     else:         print(\"-&gt; 다시 입력해 주세요\")          출력 결과   (myvenv) ➜  python_basic /Users/usr/Documents/pyt hon_basic/myvenv/bin/python /Users/usr/Documents/ python_basic/myvenv/Chapter5/12-2.실습문제5.3.2-해설.p y [메뉴를 입력하세요] 1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;1 -&gt; 게임을 시작합니다 [메뉴를 입력하세요] 1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;2 -&gt; 실시간 랭킹 [메뉴를 입력하세요] 1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;4 -&gt; 다시 입력해 주세요 [메뉴를 입력하세요] 1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;5 -&gt; 다시 입력해 주세요 [메뉴를 입력하세요] 1. 게임시작 2. 랭킹보기 3. 게임종료 &gt;&gt;&gt;3 -&gt; 게임을 종료합니다       이번 포스팅에서는 반복문 실습문제를 풀어보았다. 다음 포스팅에서는 반복문 실습문제(2)를 풀어보도록 하자.        본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.          패스트캠퍼스 강의 등록하기: https://bit.ly/3L3avNW       #패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online  ","categories": ["Programming"],
        "tags": ["패스트캠퍼스","패캠챌린지","직장인인강","직장인자기계발","패스트캠퍼스후기","캐시백챌린지","캐시백","환급챌린지","한번에끝내는파이썬웹개발초격차패키지Online"],
        "url": "/programming/Python-Day14/",
        "teaser": null
      }]
