<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-16T05:44:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">release: canary</title><subtitle>어쩌다 데브옵스 엔지니어가 된 문과생의 기록용 블로그</subtitle><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 29일차</title><link href="http://localhost:4000/programming/Python-Day29/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 29일차" /><published>2022-05-16T00:00:00+09:00</published><updated>2022-05-16T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day29</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day29/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 10-1. 파일입출력 기본을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-16-Python-Photo/2022-05-16-Python-Photo1.jpg" alt="2022-05-16-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-16-Python-Photo/2022-05-16-Python-Photo2.jpg" alt="2022-05-16-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="01-파일입출력-기본">01. 파일입출력 기본</h1>

<h2 id="1-파일-입출력을-사용하는-이유">1. 파일 입출력을 사용하는 이유</h2>

<ul>
  <li>앞선 수업에서 사용자로부터 데이터를 입력 받을 때 사용하는 함수: <code class="language-plaintext highlighter-rouge">input()</code></li>
  <li>데이터를 표시: <code class="language-plaintext highlighter-rouge">print()</code></li>
  <li>프로그램 외부파일에 있는 데이터를 가져와야하거나 프로그램에서 만든 유의미한 데이터를 저장해야할 때에는 ⇒ 파일형태로 데이터를 읽고 저장해야함</li>
</ul>

<p><br /></p>

<h3 id="파일-입출력을-사용하는-이유"><strong>[파일 입출력을 사용하는 이유]</strong></h3>

<ul>
  <li><strong>파일로부터 데이터를 읽어와서</strong> 프로그램에 사용하기 위해</li>
  <li>프로그램에서 만든 데이터를 <strong>파일 형태로 저장하기 위해</strong></li>
</ul>

<p><br /><br /></p>

<h2 id="2-파일-열기-모드">2. 파일 열기 모드</h2>

<ul>
  <li>w: 쓰기 모드 (write)</li>
  <li>a: 추가 모드 (append)</li>
  <li>r: 읽기 모드 (read)</li>
</ul>

<p><br /></p>

<h3 id="파일-입출력을-할-때-필요한-과정-파일-열기-작업-닫기">[파일 입출력을 할 때 필요한 과정: 파일 열기, 작업, 닫기]</h3>

<p><img src="/assets/images/2022-05-16-Python-Photo/2022-05-16-Python-Photo3.png" alt="2022-05-16-Python-Photo3" /></p>

<p><br /></p>

<h3 id="1-파일-쓰기">1. 파일 쓰기</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">파일객체</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"파일이름"</span><span class="p">,</span> <span class="s">"파일모드"</span><span class="p">)</span>
<span class="n">파일객체</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">데이터</span><span class="p">)</span>
<span class="n">파일객체</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># 예시 1
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"data.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"1.스타트코딩과 함께 파이썬 공부"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>open 함수: data.txt 파일을 객체 형태로 가져와 file이라는 변수에 담아준다.</li>
  <li>write 함수: 데이터를 파일객체에 쓴다.</li>
  <li>close 함수: 파일을 닫아준다.</li>
</ul>

<p><br /></p>

<h3 id="2-파일-추가">2. 파일 추가</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">파일객체</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"파일이름"</span><span class="p">,</span> <span class="s">"파일모드"</span><span class="p">)</span>
<span class="n">파일객체</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">데이터</span><span class="p">)</span>
<span class="n">파일객체</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># 예시 1
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"data.txt"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"2.비전공자도 정말 쉽게 배울 수 있습니다."</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>open 함수: data.txt 파일을 객체 형태로 가져와 file이라는 변수에 담아준다.</li>
  <li>write 함수: 데이터를 파일객체에 쓴다.</li>
  <li>close 함수: 파일을 닫아준다.</li>
  <li><code class="language-plaintext highlighter-rouge">w 모드</code> &amp; <code class="language-plaintext highlighter-rouge">a 모드</code> 차이점
    <ul>
      <li><code class="language-plaintext highlighter-rouge">w 모드</code> : 덮어쓰기(기존에 데이터가 있더라도 새로 데이터를 덮어쓴다)</li>
      <li><code class="language-plaintext highlighter-rouge">a 모드</code> : 이어쓰기</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="3-파일-읽기">3. 파일 읽기</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">파일객체</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"파일이름"</span><span class="p">,</span> <span class="s">"파일모드"</span><span class="p">)</span>
<span class="n">변수</span> <span class="o">=</span> <span class="n">파일객체</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">데이터</span><span class="p">)</span>
<span class="n">파일객체</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># 예시 1
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"data.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>open 함수: data.txt 파일을 객체 형태로 가져와 file이라는 변수에 담아준다.</li>
  <li>read 함수: data.txt 파일에 있는 데이터 전체를 가져온다.</li>
  <li>close 함수: 파일을 닫아준다.</li>
</ul>

<p><br /><br /></p>

<h2 id="3-실습">3. 실습</h2>

<h3 id="1-파일-쓰기-1">1. 파일 쓰기</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 파일 쓰기
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"data.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"1. 스타트코딩과 함께 파이썬 공부"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>파일을 실행하면 <code class="language-plaintext highlighter-rouge">PYTHON_BASIC</code> 폴더에 data.txt 가 생성된다.</li>
  <li>
    <p>경로를 설정하지 않았기 때문에 root 디렉터리 바로 아래에 파일이 생성된 것.</p>

    <p><img src="/assets/images/2022-05-16-Python-Photo/2022-05-16-Python-Photo4.png" alt="2022-05-16-Python-Photo4" /></p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>data.txt 파일을 open 할 때 경로를 지정해주면 된다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 파일 쓰기
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./myvenv/Chapter10/data.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"1. 스타트코딩과 함께 파이썬 공부"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>
    <p>기존에 생성한 data.txt 파일을 삭제한 뒤, 다시 파일입출력.py 파일을 실행해주면 Chapter10 하위에 data.txt 파일이 생성된다.</p>

    <p><img src="/assets/images/2022-05-16-Python-Photo/2022-05-16-Python-Photo5.png" alt="2022-05-16-Python-Photo5" /></p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>만약 생성된 data.txt 파일이 깨질 경우, encoding 방법을 설정해주면 깨지지 않는다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 파일 쓰기
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./myvenv/Chapter10/data.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"1. 스타트코딩과 함께 파이썬 공부"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="2-파일-추가-1">2. 파일 추가</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 2. 파일 추가
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./myvenv/Chapter10/data.txt"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"2. 비전공자도 정말 쉽게 배울 수 있습니다."</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">1.</span> <span class="n">스타트코딩과</span> <span class="n">함께</span> <span class="n">파이썬</span> <span class="n">공부2</span><span class="p">.</span> <span class="n">비전공자도</span> <span class="n">정말</span> <span class="n">쉽게</span> <span class="n">배울</span> <span class="n">수</span> <span class="n">있습니다</span><span class="p">.</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>1 과 2 사이에 행을 바꾸고 싶은 경우 문장 시작하는 부분에 \n을 입력해주면 된다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 2. 파일 추가
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./myvenv/Chapter10/data.txt"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">2. 비전공자도 정말 쉽게 배울 수 있습니다."</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">1.</span> <span class="n">스타트코딩과</span> <span class="n">함께</span> <span class="n">파이썬</span> <span class="n">공부</span>
<span class="mf">2.</span> <span class="n">비전공자도</span> <span class="n">정말</span> <span class="n">쉽게</span> <span class="n">배울</span> <span class="n">수</span> <span class="n">있습니다</span><span class="p">.</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="3-파일-읽기-1">3. 파일 읽기</h3>

<ul>
  <li>파일 전체 읽기</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. 파일 읽기
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./myvenv/Chapter10/data.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span>

<span class="c1"># 3.1. 파일 전체 읽기
</span><span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter10</span><span class="o">/</span><span class="mf">01.</span><span class="n">파일입출력</span><span class="p">.</span><span class="n">py</span>
<span class="mf">1.</span> <span class="n">스타트코딩과</span> <span class="n">함께</span> <span class="n">파이썬</span> <span class="n">공부</span>
<span class="mf">2.</span> <span class="n">비전공자도</span> <span class="n">정말</span> <span class="n">쉽게</span> <span class="n">배울</span> <span class="n">수</span> <span class="n">있습니다</span><span class="p">.</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>파일 한 줄 읽기</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. 파일 읽기
</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./myvenv/Chapter10/data.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span>

<span class="c1"># 3.2. 파일 한 줄 읽기
</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">data</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<ul>
  <li>파일의 끝이 어디인지를 알 수 없기 때문에 파일의 끝을 알려주는 함수가 필요</li>
  <li>데이터가 공백이었을 경우 무한반복문을 빠져나오도록 작성</li>
</ul>

<p><br /></p>

<ul>
  <li>실행결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter10</span><span class="o">/</span><span class="mf">01.</span><span class="n">파일입출력</span><span class="p">.</span><span class="n">py</span>
<span class="mf">1.</span> <span class="n">스타트코딩과</span> <span class="n">함께</span> <span class="n">파이썬</span> <span class="n">공부</span>

<span class="mf">2.</span> <span class="n">비전공자도</span> <span class="n">정말</span> <span class="n">쉽게</span> <span class="n">배울</span> <span class="n">수</span> <span class="n">있습니다</span><span class="p">.</span>
</code></pre></div></div>

<ul>
  <li>print 문이 줄바꿈을 실행하기 때문에 줄이 띄어져 출력(없애려면 print 문에 end=””를 추가하자)</li>
</ul>

<p><br /><br /></p>

<p>이번 포스팅에서는 파일입출력 기본에 대해 알아보았다. 다음 포스팅에서는 csv파일 입출력에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 29일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 1 - kubeadm으로 클러스터 업그레이드</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-1/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 1 - kubeadm으로 클러스터 업그레이드" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-1</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-1/"><![CDATA[<p><br /><br /></p>

<p>유데미(Udemy) 에서 구입한 CKA 강의 수강을 완료하고 마지막 연습문제를 풀고 있는데, 챕터별 연습문제와는 다르게 답안이 제공되지 않아 기록을 위해 문제 풀이 과정을 블로그에 올려두려 한다.</p>

<p><br /></p>

<p>참고로 아래의 문제 요건은 편의를 위해 한국어로 번역한 것이고, 강의에서 제공하는 시험 및 실제 시험은 100% 영어로 출제된다.</p>

<p><br /><br /></p>

<h1 id="1-kubeadm-으로-클러스터-업그레이드-하기">1. Kubeadm 으로 클러스터 업그레이드 하기</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li>쿠버네티스 버전을 현재 <code class="language-plaintext highlighter-rouge">1.19</code> 버전에서 <code class="language-plaintext highlighter-rouge">1.20.0</code> 로 업그레이드(<code class="language-plaintext highlighter-rouge">kubeadm</code> 툴을 이용)</li>
  <li>업그레이드는 마스터 노드부터 한번에 한 노드씩 이루어져야 한다.</li>
  <li>다운타임(downtime)을 최소화하기위해, 각 노드를 업그레이드 하기 전 <code class="language-plaintext highlighter-rouge">gold-nginx</code> 디플로이먼트가 대체 노드로 스케줄링 되어야한다.</li>
  <li><code class="language-plaintext highlighter-rouge">controlplane</code> 노드를 먼저 업그레이드</li>
  <li><code class="language-plaintext highlighter-rouge">node01</code> 노드를 업그레이드 전 드레인(drain)</li>
  <li><code class="language-plaintext highlighter-rouge">gold-nginx</code> 디플로이먼트들의 파드는 <code class="language-plaintext highlighter-rouge">controlplane</code> 에 스케줄링 되어야한다.</li>
  <li>채점 포인트
    <ul>
      <li>클러스터가 업그레이드 되었는가?</li>
      <li>‘gold-nginx’의 파드들이 컨트롤플레인에 스케줄링 되었는가?</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li>쿠버네티스 공식문서에서 ‘클러스터 업그레이드’를 검색 &gt; <a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">kubeadm 클러스터 업그레이드 공식문서</a> 접속</li>
  <li>문제 요건대로 쿠버네티스 1.19버전에서 1.20.0 버전으로 업그레이드 하는 문서로 이동</li>
  <li>문서에 나와있는 대로 apt update로 패키지 관리자 업데이트</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# apt update
Hit:1 https://packages.cloud.google.com/apt kubernetes-xenial InRelease         
Hit:2 https://download.docker.com/linux/ubuntu bionic InRelease                 
Hit:3 http://security.ubuntu.com/ubuntu bionic-security InRelease               
Hit:4 http://archive.ubuntu.com/ubuntu bionic InRelease                         
Hit:5 http://archive.ubuntu.com/ubuntu bionic-updates InRelease
Hit:6 http://archive.ubuntu.com/ubuntu bionic-backports InRelease
Reading package lists... Done
Building dependency tree       
Reading state information... Done
74 packages can be upgraded. Run <span class="s1">'apt list --upgradable'</span> to see them.
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>apt-cache madison kubeadm으로 kubeadm으로 업그레이드 버전정보를 확인 (문제에서는 1.20.0으로 지정되어있어 생략 가능)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# apt-cache madison kubeadm
   kubeadm |  1.24.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.3-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.2-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.1-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.9-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.7-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.3-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.2-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.1-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.21.12-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.21.11-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.21.10-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.9-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.7-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.3-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.2-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.1-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.15-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.14-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.13-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.12-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.11-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.10-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.20.9-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.20.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.20.7-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
<span class="o">(</span>이하 생략<span class="o">)</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="1-마스터-노드컨트롤-플레인-업그레이드">1. <strong>마스터 노드(컨트롤 플레인) 업그레이드<a href="https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#%EC%BB%A8%ED%8A%B8%EB%A1%A4-%ED%94%8C%EB%A0%88%EC%9D%B8-%EB%85%B8%EB%93%9C-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C"></a></strong></h3>

<ul>
  <li>쿠버네티스 공식문서에서 업그레이드 명령어를 복사하고, kubeadm의 전체 버전명을 정확하게 수정한뒤 붙여넣기 한다(<code class="language-plaintext highlighter-rouge">kubeadm=1.20.x-00</code> ⇒ <code class="language-plaintext highlighter-rouge">kubeadm=1.20.0-00</code>).</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubeadm <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubeadm</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubeadm
</code></pre></div></div>

<ul>
  <li><strong>Tip: 현재 controlplane에서 작업하고있는지 반드시 확인 후 업그레이드 작업을 시작한다.</strong></li>
</ul>

<p><br /></p>

<ul>
  <li>다운로드 하려는 버전이 잘 다운로드 되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubeadm version
kubeadm version: &amp;version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"20"</span>, GitVersion:<span class="s2">"v1.20.0"</span>, GitCommit:<span class="s2">"af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38"</span>, GitTreeState:<span class="s2">"clean"</span>, BuildDate:<span class="s2">"2020-12-08T17:57:36Z"</span>, GoVersion:<span class="s2">"go1.15.5"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>업그레이드 계획을 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubeadm upgrade plan
<span class="o">[</span>upgrade/config] Making sure the configuration is correct:
<span class="o">[</span>upgrade/config] Reading configuration from the cluster...
<span class="o">[</span>upgrade/config] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks.
<span class="o">[</span>upgrade] Running cluster health checks
<span class="o">[</span>upgrade] Fetching available versions to upgrade to
<span class="o">[</span>upgrade/versions] Cluster version: v1.19.0
<span class="o">[</span>upgrade/versions] kubeadm version: v1.20.0
I0515 01:44:55.808176   12296 version.go:251] remote version is much newer: v1.24.0<span class="p">;</span> falling back to: stable-1.20
<span class="o">[</span>upgrade/versions] Latest stable version: v1.20.15
<span class="o">[</span>upgrade/versions] Latest stable version: v1.20.15
<span class="o">[</span>upgrade/versions] Latest version <span class="k">in </span>the v1.19 series: v1.19.16
<span class="o">[</span>upgrade/versions] Latest version <span class="k">in </span>the v1.19 series: v1.19.16

Components that must be upgraded manually after you have upgraded the control plane with <span class="s1">'kubeadm upgrade apply'</span>:
COMPONENT   CURRENT       AVAILABLE
kubelet     2 x v1.19.0   v1.19.16

Upgrade to the latest version <span class="k">in </span>the v1.19 series:

COMPONENT                 CURRENT   AVAILABLE
kube-apiserver            v1.19.0   v1.19.16
kube-controller-manager   v1.19.0   v1.19.16
kube-scheduler            v1.19.0   v1.19.16
kube-proxy                v1.19.0   v1.19.16
CoreDNS                   1.7.0     1.7.0
etcd                      3.4.9-1   3.4.9-1

You can now apply the upgrade by executing the following <span class="nb">command</span>:

        kubeadm upgrade apply v1.19.16

_____________________________________________________________________

Components that must be upgraded manually after you have upgraded the control plane with <span class="s1">'kubeadm upgrade apply'</span>:
COMPONENT   CURRENT       AVAILABLE
kubelet     2 x v1.19.0   v1.20.15

Upgrade to the latest stable version:

COMPONENT                 CURRENT   AVAILABLE
kube-apiserver            v1.19.0   v1.20.15
kube-controller-manager   v1.19.0   v1.20.15
kube-scheduler            v1.19.0   v1.20.15
kube-proxy                v1.19.0   v1.20.15
CoreDNS                   1.7.0     1.7.0
etcd                      3.4.9-1   3.4.13-0

You can now apply the upgrade by executing the following <span class="nb">command</span>:

        kubeadm upgrade apply v1.20.15

Note: Before you can perform this upgrade, you have to update kubeadm to v1.20.15.

_____________________________________________________________________

The table below shows the current state of component configs as understood by this version of kubeadm.
Configs that have a <span class="s2">"yes"</span> mark <span class="k">in </span>the <span class="s2">"MANUAL UPGRADE REQUIRED"</span> column require manual config upgrade or
resetting to kubeadm defaults before a successful upgrade can be performed. The version to manually
upgrade to is denoted <span class="k">in </span>the <span class="s2">"PREFERRED VERSION"</span> column.

API GROUP                 CURRENT VERSION   PREFERRED VERSION   MANUAL UPGRADE REQUIRED
kubeproxy.config.k8s.io   v1alpha1          v1alpha1            no
kubelet.config.k8s.io     v1beta1           v1beta1             no
_____________________________________________________________________
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>kubeadm 업그레이드 명령어(<code class="language-plaintext highlighter-rouge">sudo kubeadm upgrade apply v1.20.x</code> )를 복사한 뒤 올바른 버전(<code class="language-plaintext highlighter-rouge">sudo kubeadm upgrade apply v1.20.0</code>)으로 변경한 후 붙여넣기한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm upgrade apply v1.20.0 <span class="nt">-y</span>
</code></pre></div></div>

<ul>
  <li><strong>Tip: 업그레이드 명령어 뒤에 -y옵션을 주어 추가 다운로드에 대해 모두 Yes로 반응하도록 설정하면 편리</strong></li>
  <li><strong>Tipe: 업그레이드 완료 후 반드시 아래와 같이 SUCCESS 메시지가 출력되었는지 확인 한다.</strong></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>upgrade/successful] SUCCESS! Your cluster was upgraded to <span class="s2">"v1.20.0"</span><span class="nb">.</span> Enjoy!

<span class="o">[</span>upgrade/kubelet] Now that your control plane is upgraded, please proceed with upgrading your kubelets <span class="k">if </span>you haven<span class="s1">'t already done so.
</span></code></pre></div></div>

<p><br /></p>

<ul>
  <li>컨트롤 플레인 노드를 drain(모든 pod를 해당 노드에서 unscheduling)한다.
    <ul>
      <li>명령어 복사(<code class="language-plaintext highlighter-rouge">kubectl drain &lt;node-to-drain&gt; --ignore-daemonsets</code>) 후 대상 노드를 수정한 뒤 붙여넣기 한다.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl drain controlplane <span class="nt">--ignore-daemonsets</span>
node/controlplane cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/kube-proxy-hpgrg, kube-system/weave-net-mp6bh
evicting pod admin2406/deploy3-5b6cff588b-5kxdh
evicting pod admin2406/deploy1-5799f5869d-jpgfz
evicting pod admin2406/deploy2-64885b458-jmvd5
evicting pod kube-system/coredns-74ff55c5b-j7k25
evicting pod admin2406/deploy5-78b86b74f-9rxj7
evicting pod default/gold-nginx-847f89b5b-cfrr8
evicting pod kube-system/coredns-74ff55c5b-58v24
evicting pod admin2406/deploy4-7869d88d64-xdcx9
I0515 01:54:52.043205   22973 request.go:645] Throttling request took 1.005358262s, request: GET:https://controlplane:6443/api/v1/namespaces/kube-system/pods/coredns-74ff55c5b-j7k25
pod/deploy2-64885b458-jmvd5 evicted
pod/deploy1-5799f5869d-jpgfz evicted
pod/deploy4-7869d88d64-xdcx9 evicted
pod/gold-nginx-847f89b5b-cfrr8 evicted
pod/coredns-74ff55c5b-58v24 evicted
pod/deploy5-78b86b74f-9rxj7 evicted
pod/coredns-74ff55c5b-j7k25 evicted
pod/deploy3-5b6cff588b-5kxdh evicted
node/controlplane evicted
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>쿠버네티스 공식문서에서 kubelet과 kubectl 업그레이드 명령어를 복사한 뒤, 각각 올바른 버전으로 수정 후 명령어를 실행한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubelet kubectl <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubelet</span><span class="o">=</span>1.20.0-00 <span class="nv">kubectl</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubelet kubectl
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>아래 명령어를 사용해 kubelet을 다시 시작한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart kubelet
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>uncordon 명령어(대상 노드이름으로 수정)를 이용해 노드에 파드를 다시 스케줄링한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl uncordon controlplane
node/controlplane uncordoned
</code></pre></div></div>

<p><br /></p>

<h3 id="2-워커-노드-업그레이드"><strong>2. 워커 노드 업그레이드<a href="https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#%EC%9B%8C%EC%BB%A4-%EB%85%B8%EB%93%9C-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C"></a></strong></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get nodes</code> 명령어(아래 예시에서는 축약어 사용)로 대상 노드를 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get nodes 
NAME           STATUS   ROLES                  AGE    VERSION
controlplane   Ready    control-plane,master   104m   v1.20.0
node01         Ready    &lt;none&gt;                 103m   v1.19.0
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>ssh를 이용해 node01로 접속한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# ssh node01
Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 5.4.0-1072-gcp x86_64<span class="o">)</span>

 <span class="k">*</span> Documentation:  https://help.ubuntu.com
 <span class="k">*</span> Management:     https://landscape.canonical.com
 <span class="k">*</span> Support:        https://ubuntu.com/advantage
This system has been minimized by removing packages and content that are
not required on a system that <span class="nb">users </span><span class="k">do </span>not log into.

To restore this content, you can run the <span class="s1">'unminimize'</span> command.
root@node01:~#
</code></pre></div></div>

<ul>
  <li>controlplane에서 node01로 잘 접속되었는지 확인한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>마스터노드 업그레이드와 같은 요령으로 kubeadm 버전을 업데이트한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubeadm <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubeadm</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubeadm
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>kubeadm 업그레이드 명령어를 호출해 로컬 kubelet 구성을 업그레이드한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node01:~# <span class="nb">sudo </span>kubeadm upgrade node
<span class="o">[</span>upgrade] Reading configuration from the cluster...
<span class="o">[</span>upgrade] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks
<span class="o">[</span>preflight] Skipping prepull. Not a control plane node.
<span class="o">[</span>upgrade] Skipping phase. Not a control plane node.
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>upgrade] The configuration <span class="k">for </span>this node was successfully updated!
<span class="o">[</span>upgrade] Now you should go ahead and upgrade the kubelet package using your package manager.
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>exit 명령어로 마스터 노드로 돌아간 뒤, 워커노드를 drain한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node01:~# <span class="nb">exit
logout
</span>Connection to node01 closed.
root@controlplane:~# kubectl drain node01 <span class="nt">--ignore-daemonsets</span>
node/node01 cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/kube-proxy-rp74d, kube-system/weave-net-n5989
node/node01 drained
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>ssh로 워커노드(node01)로 재접속해 kubelet, kubectl을 업그레이드한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubelet kubectl <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubelet</span><span class="o">=</span>1.20.0-00 <span class="nv">kubectl</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubelet kubectl
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>kubelet을 재시작한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node01:~# <span class="nb">sudo </span>systemctl daemon-reload
root@node01:~# <span class="nb">sudo </span>systemctl restart kubelet
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>exit 명령어로 마스터노드로 돌아가 워커노드(node01)에 uncordon 명령어를 실행해준다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl uncordon node01
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get nodes</code> (예시에서는 축약어 사용)명령어를 사용해 v1.20.0버전으로 업데이트가 잘 수행되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get nodes 
NAME           STATUS   ROLES                  AGE    VERSION
controlplane   Ready    control-plane,master   112m   v1.20.0
node01         Ready    &lt;none&gt;                 111m   v1.20.0
</code></pre></div></div>

<ul>
  <li>문제에서 제시되었던 파드(POD)가 controlplane에 스케줄링 되어있는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get pod gold-nginx-847f89b5b-dcdkr <span class="nt">-o</span> wide
NAME                         READY   STATUS    RESTARTS   AGE   IP          NODE           NOMINATED NODE   READINESS GATES
gold-nginx-847f89b5b-dcdkr   1/1     Running   0          17m   10.50.0.3   controlplane   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p><br /></p>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>kubeadm 클러스터 업그레이드: <a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/</a>
    <ul>
      <li><a href="https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[클러스터를 업그레이드 할 경우에는 마스터노드, 워커노드 순으로 각각 업그레이드 한다]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 2 - JSON PATH 사용하기</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-2/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 2 - JSON PATH 사용하기" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-2</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-2/"><![CDATA[<p><br /><br /></p>

<h1 id="2-json-path-사용하기">2. JSON PATH 사용하기</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li>다음 포맷에 맞춰 <code class="language-plaintext highlighter-rouge">admin2406</code> 네임스페이스의 모든 디플로이먼트를 출력</li>
  <li><code class="language-plaintext highlighter-rouge">DEPLOYMENT CONTAINER_IMAGE READY_REPLICAS NAMESPACE&lt;deployment name&gt; &lt;container image used&gt; &lt;ready replica count&gt; &lt;Namespace&gt;</code>.</li>
  <li>예시: <code class="language-plaintext highlighter-rouge">DEPLOYMENT CONTAINER_IMAGE READY_REPLICAS NAMESPACEdeploy0 nginx:alpine 1 admin2406</code></li>
  <li>데이터들은 <code class="language-plaintext highlighter-rouge">deployment name</code>을 기준으로 오름차순으로 정렬</li>
  <li>채점 기준: 제시된 작업이 완료되었는가?</li>
</ul>

<p><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get deployment -n admin2406</code> 으로 대상 디플로이먼트들을 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get deployments.apps <span class="nt">-n</span> admin2406        
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
deploy1   1/1     1            1           48m
deploy2   1/1     1            1           48m
deploy3   1/1     1            1           48m
deploy4   1/1     1            1           48m
deploy5   1/1     1            1           48m
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get deployment -n admin2406 deploy1 -o json</code> 으로 JSON 파일 구조를 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get deployments.apps <span class="nt">-n</span> admin2406 deploy1 <span class="nt">-o</span> json
<span class="o">{</span>
    <span class="s2">"apiVersion"</span>: <span class="s2">"apps/v1"</span>,
    <span class="s2">"kind"</span>: <span class="s2">"Deployment"</span>,
    <span class="s2">"metadata"</span>: <span class="o">{</span>
        <span class="s2">"annotations"</span>: <span class="o">{</span>
            <span class="s2">"deployment.kubernetes.io/revision"</span>: <span class="s2">"1"</span>
        <span class="o">}</span>,
        <span class="s2">"creationTimestamp"</span>: <span class="s2">"2022-05-15T01:28:00Z"</span>,
        <span class="s2">"generation"</span>: 1,
        <span class="s2">"labels"</span>: <span class="o">{</span>
            <span class="s2">"app"</span>: <span class="s2">"deploy1"</span>
        <span class="o">}</span>,
        <span class="s2">"managedFields"</span>: <span class="o">[</span>
            <span class="o">{</span>
                <span class="s2">"apiVersion"</span>: <span class="s2">"apps/v1"</span>,
                <span class="s2">"fieldsType"</span>: <span class="s2">"FieldsV1"</span>,
                <span class="s2">"fieldsV1"</span>: <span class="o">{</span>
                    <span class="s2">"f:metadata"</span>: <span class="o">{</span>
                        <span class="s2">"f:labels"</span>: <span class="o">{</span>
                            <span class="s2">"."</span>: <span class="o">{}</span>,
                            <span class="s2">"f:app"</span>: <span class="o">{}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>,
                    <span class="s2">"f:spec"</span>: <span class="o">{</span>
                        <span class="s2">"f:progressDeadlineSeconds"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:replicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:revisionHistoryLimit"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:selector"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:strategy"</span>: <span class="o">{</span>
                            <span class="s2">"f:rollingUpdate"</span>: <span class="o">{</span>
                                <span class="s2">"."</span>: <span class="o">{}</span>,
                                <span class="s2">"f:maxSurge"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:maxUnavailable"</span>: <span class="o">{}</span>
                            <span class="o">}</span>,
                            <span class="s2">"f:type"</span>: <span class="o">{}</span>
                        <span class="o">}</span>,
                        <span class="s2">"f:template"</span>: <span class="o">{</span>
                            <span class="s2">"f:metadata"</span>: <span class="o">{</span>
                                <span class="s2">"f:labels"</span>: <span class="o">{</span>
                                    <span class="s2">"."</span>: <span class="o">{}</span>,
                                    <span class="s2">"f:app"</span>: <span class="o">{}</span>
                                <span class="o">}</span>
                            <span class="o">}</span>,
                            <span class="s2">"f:spec"</span>: <span class="o">{</span>
                                <span class="s2">"f:containers"</span>: <span class="o">{</span>
                                    <span class="s2">"k:{</span><span class="se">\"</span><span class="s2">name</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">nginx</span><span class="se">\"</span><span class="s2">}"</span>: <span class="o">{</span>
                                        <span class="s2">"."</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:image"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:imagePullPolicy"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:name"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:resources"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:terminationMessagePath"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:terminationMessagePolicy"</span>: <span class="o">{}</span>
                                    <span class="o">}</span>
                                <span class="o">}</span>,
                                <span class="s2">"f:dnsPolicy"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:restartPolicy"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:schedulerName"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:securityContext"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:terminationGracePeriodSeconds"</span>: <span class="o">{}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>,
                <span class="s2">"manager"</span>: <span class="s2">"kubectl-create"</span>,
                <span class="s2">"operation"</span>: <span class="s2">"Update"</span>,
                <span class="s2">"time"</span>: <span class="s2">"2022-05-15T01:28:00Z"</span>
            <span class="o">}</span>,
            <span class="o">{</span>
                <span class="s2">"apiVersion"</span>: <span class="s2">"apps/v1"</span>,
                <span class="s2">"fieldsType"</span>: <span class="s2">"FieldsV1"</span>,
                <span class="s2">"fieldsV1"</span>: <span class="o">{</span>
                    <span class="s2">"f:metadata"</span>: <span class="o">{</span>
                        <span class="s2">"f:annotations"</span>: <span class="o">{</span>
                            <span class="s2">"."</span>: <span class="o">{}</span>,
                            <span class="s2">"f:deployment.kubernetes.io/revision"</span>: <span class="o">{}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>,
                    <span class="s2">"f:status"</span>: <span class="o">{</span>
                        <span class="s2">"f:availableReplicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:conditions"</span>: <span class="o">{</span>
                            <span class="s2">"."</span>: <span class="o">{}</span>,
                            <span class="s2">"k:{</span><span class="se">\"</span><span class="s2">type</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Available</span><span class="se">\"</span><span class="s2">}"</span>: <span class="o">{</span>
                                <span class="s2">"."</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastTransitionTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastUpdateTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:message"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:reason"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:status"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:type"</span>: <span class="o">{}</span>
                            <span class="o">}</span>,
                            <span class="s2">"k:{</span><span class="se">\"</span><span class="s2">type</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Progressing</span><span class="se">\"</span><span class="s2">}"</span>: <span class="o">{</span>
                                <span class="s2">"."</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastTransitionTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastUpdateTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:message"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:reason"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:status"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:type"</span>: <span class="o">{}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>,
                        <span class="s2">"f:observedGeneration"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:readyReplicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:replicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:updatedReplicas"</span>: <span class="o">{}</span>
                    <span class="o">}</span>
                <span class="o">}</span>,
                <span class="s2">"manager"</span>: <span class="s2">"kube-controller-manager"</span>,
                <span class="s2">"operation"</span>: <span class="s2">"Update"</span>,
                <span class="s2">"time"</span>: <span class="s2">"2022-05-15T01:59:02Z"</span>
            <span class="o">}</span>
        <span class="o">]</span>,
        <span class="s2">"name"</span>: <span class="s2">"deploy1"</span>,
        <span class="s2">"namespace"</span>: <span class="s2">"admin2406"</span>,
        <span class="s2">"resourceVersion"</span>: <span class="s2">"15003"</span>,
        <span class="s2">"uid"</span>: <span class="s2">"09e6b6df-f757-4558-a6a9-1ce8bd1138b7"</span>
    <span class="o">}</span>,
    <span class="s2">"spec"</span>: <span class="o">{</span>
        <span class="s2">"progressDeadlineSeconds"</span>: 600,
        <span class="s2">"replicas"</span>: 1,
        <span class="s2">"revisionHistoryLimit"</span>: 10,
        <span class="s2">"selector"</span>: <span class="o">{</span>
            <span class="s2">"matchLabels"</span>: <span class="o">{</span>
                <span class="s2">"app"</span>: <span class="s2">"deploy1"</span>
            <span class="o">}</span>
        <span class="o">}</span>,
        <span class="s2">"strategy"</span>: <span class="o">{</span>
            <span class="s2">"rollingUpdate"</span>: <span class="o">{</span>
                <span class="s2">"maxSurge"</span>: <span class="s2">"25%"</span>,
                <span class="s2">"maxUnavailable"</span>: <span class="s2">"25%"</span>
            <span class="o">}</span>,
            <span class="s2">"type"</span>: <span class="s2">"RollingUpdate"</span>
        <span class="o">}</span>,
        <span class="s2">"template"</span>: <span class="o">{</span>
            <span class="s2">"metadata"</span>: <span class="o">{</span>
                <span class="s2">"creationTimestamp"</span>: null,
                <span class="s2">"labels"</span>: <span class="o">{</span>
                    <span class="s2">"app"</span>: <span class="s2">"deploy1"</span>
                <span class="o">}</span>
            <span class="o">}</span>,
            <span class="s2">"spec"</span>: <span class="o">{</span>
                <span class="s2">"containers"</span>: <span class="o">[</span>
                    <span class="o">{</span>
                        <span class="s2">"image"</span>: <span class="s2">"nginx"</span>,
                        <span class="s2">"imagePullPolicy"</span>: <span class="s2">"Always"</span>,
                        <span class="s2">"name"</span>: <span class="s2">"nginx"</span>,
                        <span class="s2">"resources"</span>: <span class="o">{}</span>,
                        <span class="s2">"terminationMessagePath"</span>: <span class="s2">"/dev/termination-log"</span>,
                        <span class="s2">"terminationMessagePolicy"</span>: <span class="s2">"File"</span>
                    <span class="o">}</span>
                <span class="o">]</span>,
                <span class="s2">"dnsPolicy"</span>: <span class="s2">"ClusterFirst"</span>,
                <span class="s2">"restartPolicy"</span>: <span class="s2">"Always"</span>,
                <span class="s2">"schedulerName"</span>: <span class="s2">"default-scheduler"</span>,
                <span class="s2">"securityContext"</span>: <span class="o">{}</span>,
                <span class="s2">"terminationGracePeriodSeconds"</span>: 30
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>,
    <span class="s2">"status"</span>: <span class="o">{</span>
        <span class="s2">"availableReplicas"</span>: 1,
        <span class="s2">"conditions"</span>: <span class="o">[</span>
            <span class="o">{</span>
                <span class="s2">"lastTransitionTime"</span>: <span class="s2">"2022-05-15T01:28:00Z"</span>,
                <span class="s2">"lastUpdateTime"</span>: <span class="s2">"2022-05-15T01:28:18Z"</span>,
                <span class="s2">"message"</span>: <span class="s2">"ReplicaSet </span><span class="se">\"</span><span class="s2">deploy1-5799f5869d</span><span class="se">\"</span><span class="s2"> has successfully progressed."</span>,
                <span class="s2">"reason"</span>: <span class="s2">"NewReplicaSetAvailable"</span>,
                <span class="s2">"status"</span>: <span class="s2">"True"</span>,
                <span class="s2">"type"</span>: <span class="s2">"Progressing"</span>
            <span class="o">}</span>,
            <span class="o">{</span>
                <span class="s2">"lastTransitionTime"</span>: <span class="s2">"2022-05-15T01:59:02Z"</span>,
                <span class="s2">"lastUpdateTime"</span>: <span class="s2">"2022-05-15T01:59:02Z"</span>,
                <span class="s2">"message"</span>: <span class="s2">"Deployment has minimum availability."</span>,
                <span class="s2">"reason"</span>: <span class="s2">"MinimumReplicasAvailable"</span>,
                <span class="s2">"status"</span>: <span class="s2">"True"</span>,
                <span class="s2">"type"</span>: <span class="s2">"Available"</span>
            <span class="o">}</span>
        <span class="o">]</span>,
        <span class="s2">"observedGeneration"</span>: 1,
        <span class="s2">"readyReplicas"</span>: 1,
        <span class="s2">"replicas"</span>: 1,
        <span class="s2">"updatedReplicas"</span>: 1
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>custom-column을 이용한 간단한 쿼리문을 작성한 뒤 잘 작동하는지 테스트해본다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name
DEPLOYMENT
deploy1
deploy2
deploy3
deploy4
deploy5
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>위에서 출력했던 json 포맷을 잘 참고하여 나머지 열에 대한 쿼리도 작성해준다.
    <ul>
      <li>Tip: 열과 열을 구분하기 위해서는 <code class="language-plaintext highlighter-rouge">,</code> (콤마)를 사용한다.</li>
      <li>Tip: 각 항목이 잘 출력되었는지 확인하기 위해 kubectl get deployment 명령어를 잘 활용한다(예: CONTAINER_IMAGE가 잘 출력되었는지 확인 <code class="language-plaintext highlighter-rouge">kubectl get deployments -n admin2406</code>)</li>
      <li>Tip: 요소가 딕셔너리가 아닌 리스트 형태일 경우(예: containers) 반드시 출력할 리스트 요소를 지정해주어야한다(예: containers ⇒ (X), containers[0] ⇒ (O), containers[*] ⇒ (O)</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[<span class="k">*</span><span class="o">]</span>.image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace
DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy1      nginx             1                admin2406
deploy2      nginx:alpine      1                admin2406
deploy3      nginx:1.16        1                admin2406
deploy4      nginx:1.17        1                admin2406
deploy5      nginx:latest      1                admin2406
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--sort-by=</code> 옵션으로 리스트를 문제 요건대로 정렬한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[<span class="k">*</span><span class="o">]</span>.image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace <span class="nt">--sort-by</span><span class="o">=</span>.metadata.name
DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy1      nginx             1                admin2406
deploy2      nginx:alpine      1                admin2406
deploy3      nginx:1.16        1                admin2406
deploy4      nginx:1.17        1                admin2406
deploy5      nginx:latest      1                admin2406
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>문제 요건대로 <code class="language-plaintext highlighter-rouge">/opt/admin2406_data</code> 에 쿼리 결과를 저장한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[<span class="k">*</span><span class="o">]</span>.image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace <span class="nt">--sort-by</span><span class="o">=</span>.metadata.name <span class="o">&gt;</span> /opt/admin2406_data
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>데이터가 잘 저장되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# <span class="nb">cat</span> /opt/admin2406_data
DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy1      nginx             1                admin2406
deploy2      nginx:alpine      1                admin2406
deploy3      nginx:1.16        1                admin2406
deploy4      nginx:1.17        1                admin2406
deploy5      nginx:latest      1                admin2406
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>kubectl 치트 시트 - custom-column: <a href="https://kubernetes.io/ko/docs/reference/kubectl/cheatsheet/">https://kubernetes.io/ko/docs/reference/kubectl/cheatsheet/</a></li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[JSON PATH를 사용하는 문제의 경우, custom-column을 이용하면 편리하다]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 3 - KubeConfig 관련 이슈 트러블 슈팅</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-3/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 3 - KubeConfig 관련 이슈 트러블 슈팅" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-3</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-3/"><![CDATA[<p><br /><br /></p>

<h1 id="3-kubeconfig-트러블-슈팅">3. KubeConfig 트러블 슈팅</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/root/CKA</code> 경로에 <code class="language-plaintext highlighter-rouge">admin.kubeconfig</code> kubeconfig 파일이 생성되었으나 무언가 잘못되었다. 트러블 슈팅 후 고칠 것</li>
  <li>채점 기준
    <ul>
      <li>/root/CKA/admin.kubeconfig 고치기</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li>kubeconfig 파일을 살펴보자.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# <span class="nb">cd</span> /root/CKA
root@controlplane:~/CKA# <span class="nb">ls</span> <span class="nt">-al</span>
total 16
drwxr-xr-x 2 root root 4096 May 15 04:49 <span class="nb">.</span>
drwx------ 1 root root 4096 May 15 04:44 ..
<span class="nt">-rw-------</span> 1 root root 5564 May 15 04:49 admin.kubeconfig
root@controlplane:~/CKA# <span class="nb">cat </span>admin.kubeconfig 
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: <span class="o">[</span>encrypted ca]
    server: https://controlplane:4380
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: <span class="o">{}</span>
<span class="nb">users</span>:
- name: kubernetes-admin
  user:
    client-certificate-data: <span class="o">[</span>encrypted-certification]
    client-key-data: <span class="o">[</span>encrypted-key]
</code></pre></div></div>

<p><br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~/CKA# k config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://controlplane:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: <span class="o">{}</span>
<span class="nb">users</span>:
- name: kubernetes-admin
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
</code></pre></div></div>

<h2 id="참고-url">[참고 URL]</h2>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[(수정중)]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 4 - 디플로이먼트(Deployment) 생성 및 이미지 업데이트</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-4/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 4 - 디플로이먼트(Deployment) 생성 및 이미지 업데이트" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-4</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-4/"><![CDATA[<p><br /><br /></p>

<h1 id="4-디플로이먼트deployment-생성-및-이미지-업데이트">4. 디플로이먼트(Deployment) 생성 및 이미지 업데이트</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">default</code> 네임스페이스에 <code class="language-plaintext highlighter-rouge">nginx:1.16</code> 이미지를 사용하는 신규 디플로이먼트 <code class="language-plaintext highlighter-rouge">nginx-deploy</code>를 생성해야한다. 레플리카 수는 1.</li>
  <li>그 뒤, 디플로이먼트의 버전을 롤링 업데이트(Rolling Update)로 <code class="language-plaintext highlighter-rouge">1.17</code>로 업데이트</li>
  <li>채점기준
    <ul>
      <li>이미지: nginx:1.16</li>
      <li>작업: 디플로이먼트의 버전을 1.17로 업그레이드</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li>쿠버네티스 공식 문서의 kubectl cheatsheet 페이지 참조해 디플로이먼트 리소스 생성</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl create deployment nginx-deploy <span class="nt">--image</span><span class="o">=</span>nginx:1.16 <span class="nt">--replicas</span><span class="o">=</span>1
deployment.apps/nginx-deploy created
NAME           READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR
gold-nginx     1/1     1            1           20m   nginx        nginx:latest   <span class="nv">app</span><span class="o">=</span>gold-nginx
nginx-deploy   1/1     1            1           37s   nginx        nginx:1.16     <span class="nv">app</span><span class="o">=</span>nginx-deploy
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>같은 페이지의 리소스 업데이트 탭을 참조해 이미지 업데이트
    <ul>
      <li>Tip: 이미지를 업데이트할 때에는 <code class="language-plaintext highlighter-rouge">kubectl set image &lt;리소스종류&gt;/&lt;리소스 이름&gt; &lt;컨테이너명&gt;=&lt;이미지:버전&gt;</code> 명령어를 사용하면 이미지가 롤링업데이트 된다.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl <span class="nb">set </span>image deployment/nginx-deploy <span class="nv">nginx</span><span class="o">=</span>nginx:1.17
deployment.apps/nginx-deploy image updated
root@controlplane:~# k get deployments.apps <span class="nt">-o</span> wide
NAME           READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES         SELECTOR
gold-nginx     1/1     1            1           24m     nginx        nginx:latest   <span class="nv">app</span><span class="o">=</span>gold-nginx
nginx-deploy   1/1     1            1           4m10s   nginx        nginx:1.17     <span class="nv">app</span><span class="o">=</span>nginx-deploy
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>이미지 업데이트: <a href="https://kubernetes.io/ko/docs/reference/kubectl/cheatsheet/#%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8">https://kubernetes.io/ko/docs/reference/kubectl/cheatsheet/#리소스-업데이트</a></li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[이미 생성된 디플로이먼트의 이미지를 업데이트하려면 kubectl set image 명령어를 사용한다]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 5 - 디플로이먼트 관련 이슈 트러블슈팅</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-5/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 5 - 디플로이먼트 관련 이슈 트러블슈팅" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-5</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-5/"><![CDATA[<p><br /><br /></p>

<h1 id="5-디플로이먼트-관련-이슈-트러블슈팅">5. 디플로이먼트 관련 이슈 트러블슈팅</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">alpha</code> 네임스페이스의 <code class="language-plaintext highlighter-rouge">alpha-mysql</code> 디플로이먼트(Deployment)가 배포되었으나, 파드(POD)가 동작하지 않는 이슈를 해결해야 한다.</li>
  <li>해당 디플로이먼트는 <code class="language-plaintext highlighter-rouge">/var/lib/mysql</code> 경로에 마운트 된 <code class="language-plaintext highlighter-rouge">alpha-pv</code> 퍼시스턴트 볼륨(Persistent Volume)을 사용해야하며, root 비밀번호를 공백으로 만들기 위해 <code class="language-plaintext highlighter-rouge">MYSQL_ALLOW_EMPTY_PASSWORD=1</code> 환경변수를 설정해야한다.</li>
  <li>중요: 퍼시스턴트 볼륨을 교체하지 말 것</li>
  <li>채점 기준: 트러블 슈팅하여 이슈 해결</li>
</ul>

<p><br /><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k describe deployments.apps <span class="nt">-n</span> alpha alpha-mysql 
Name:                   alpha-mysql
Namespace:              alpha
CreationTimestamp:      Sun, 15 May 2022 04:44:26 +0000
Labels:                 <span class="nv">app</span><span class="o">=</span>alpha-mysql
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               <span class="nv">app</span><span class="o">=</span>alpha-mysql
Replicas:               1 desired | 1 updated | 1 total | 0 available | 1 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  <span class="nv">app</span><span class="o">=</span>alpha-mysql
  Containers:
   mysql:
    Image:      mysql:5.6
    Port:       3306/TCP
    Host Port:  0/TCP
    Environment:
      MYSQL_ALLOW_EMPTY_PASSWORD:  1
    Mounts:
      /var/lib/mysql from mysql-data <span class="o">(</span>rw<span class="o">)</span>
  Volumes:
   mysql-data:
    Type:       PersistentVolumeClaim <span class="o">(</span>a reference to a PersistentVolumeClaim <span class="k">in </span>the same namespace<span class="o">)</span>
    ClaimName:  mysql-alpha-pvc
    ReadOnly:   <span class="nb">false
</span>Conditions:
  Type           Status  Reason
  <span class="nt">----</span>           <span class="nt">------</span>  <span class="nt">------</span>
  Available      False   MinimumReplicasUnavailable
  Progressing    False   ProgressDeadlineExceeded
OldReplicaSets:  &lt;none&gt;
NewReplicaSet:   alpha-mysql-6cc9f6bb7c <span class="o">(</span>1/1 replicas created<span class="o">)</span>
Events:
  Type    Reason             Age   From                   Message
  <span class="nt">----</span>    <span class="nt">------</span>             <span class="nt">----</span>  <span class="nt">----</span>                   <span class="nt">-------</span>
  Normal  ScalingReplicaSet  27m   deployment-controller  Scaled up replica <span class="nb">set </span>alpha-mysql-6cc9f6bb7c to 1
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="참고-url">[참고 URL]</h2>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[(수정중)]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 6 - ETCD 백업파일 생성하기</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-6/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 6 - ETCD 백업파일 생성하기" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-6</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-6/"><![CDATA[<p><br /><br /></p>

<h1 id="6-etcd-백업파일-생성하기">6. ETCD 백업파일 생성하기</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li>ETCD 백업을 <code class="language-plaintext highlighter-rouge">controlplane</code> 의 <code class="language-plaintext highlighter-rouge">/opt/etcd-backup.db</code>에 생성한다.</li>
  <li>채점기준: 트러블 슈팅으로 이슈 해결</li>
</ul>

<p><br /><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl describe pod etcd -n kube-system</code> 명령어를 사용해 etcd 파드 정보를 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:/opt# k describe pod etcd <span class="nt">-n</span> kube-system 
Name:                 etcd-controlplane
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Node:                 controlplane/10.4.57.3
Start Time:           Sun, 15 May 2022 04:14:46 +0000
Labels:               <span class="nv">component</span><span class="o">=</span>etcd
                      <span class="nv">tier</span><span class="o">=</span>control-plane
Annotations:          kubeadm.kubernetes.io/etcd.advertise-client-urls: https://10.4.57.3:2379
                      kubernetes.io/config.hash: 722e84fe51d881b86833db89a526d572
                      kubernetes.io/config.mirror: 722e84fe51d881b86833db89a526d572
                      kubernetes.io/config.seen: 2022-05-15T04:14:44.965341411Z
                      kubernetes.io/config.source: file
Status:               Running
IP:                   10.4.57.3
IPs:
  IP:           10.4.57.3
Controlled By:  Node/controlplane
Containers:
  etcd:
    Container ID:  docker://08595528da5102b7b25f6498f97630b6b0bcef22c4f5e2ad93156112cffa63dd
    Image:         k8s.gcr.io/etcd:3.4.9-1
    Image ID:      docker-pullable://k8s.gcr.io/etcd@sha256:735f090b15d5efc576da1602d8c678bf39a7605c0718ed915daec8f2297db2ff
    Port:          &lt;none&gt;
    Host Port:     &lt;none&gt;
    Command:
      etcd
      <span class="nt">--advertise-client-urls</span><span class="o">=</span>https://10.4.57.3:2379
      <span class="nt">--cert-file</span><span class="o">=</span>/etc/kubernetes/pki/etcd/server.crt
      <span class="nt">--client-cert-auth</span><span class="o">=</span><span class="nb">true</span>
      <span class="nt">--data-dir</span><span class="o">=</span>/var/lib/etcd
      <span class="nt">--initial-advertise-peer-urls</span><span class="o">=</span>https://10.4.57.3:2380
      <span class="nt">--initial-cluster</span><span class="o">=</span><span class="nv">controlplane</span><span class="o">=</span>https://10.4.57.3:2380
      <span class="nt">--key-file</span><span class="o">=</span>/etc/kubernetes/pki/etcd/server.key
      <span class="nt">--listen-client-urls</span><span class="o">=</span>https://127.0.0.1:2379,https://10.4.57.3:2379
      <span class="nt">--listen-metrics-urls</span><span class="o">=</span>http://127.0.0.1:2381
      <span class="nt">--listen-peer-urls</span><span class="o">=</span>https://10.4.57.3:2380
      <span class="nt">--name</span><span class="o">=</span>controlplane
      <span class="nt">--peer-cert-file</span><span class="o">=</span>/etc/kubernetes/pki/etcd/peer.crt
      <span class="nt">--peer-client-cert-auth</span><span class="o">=</span><span class="nb">true</span>
      <span class="nt">--peer-key-file</span><span class="o">=</span>/etc/kubernetes/pki/etcd/peer.key
      <span class="nt">--peer-trusted-ca-file</span><span class="o">=</span>/etc/kubernetes/pki/etcd/ca.crt
      <span class="nt">--snapshot-count</span><span class="o">=</span>10000
      <span class="nt">--trusted-ca-file</span><span class="o">=</span>/etc/kubernetes/pki/etcd/ca.crt
    State:          Running
      Started:      Sun, 15 May 2022 04:14:31 +0000
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://127.0.0.1:2381/health <span class="nv">delay</span><span class="o">=</span>10s <span class="nb">timeout</span><span class="o">=</span>15s <span class="nv">period</span><span class="o">=</span>10s <span class="c">#success=1 #failure=8</span>
    Startup:        http-get http://127.0.0.1:2381/health <span class="nv">delay</span><span class="o">=</span>10s <span class="nb">timeout</span><span class="o">=</span>15s <span class="nv">period</span><span class="o">=</span>10s <span class="c">#success=1 #failure=24</span>
    Environment:    &lt;none&gt;
    Mounts:
      /etc/kubernetes/pki/etcd from etcd-certs <span class="o">(</span>rw<span class="o">)</span>
      /var/lib/etcd from etcd-data <span class="o">(</span>rw<span class="o">)</span>
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  etcd-certs:
    Type:          HostPath <span class="o">(</span>bare host directory volume<span class="o">)</span>
    Path:          /etc/kubernetes/pki/etcd
    HostPathType:  DirectoryOrCreate
  etcd-data:
    Type:          HostPath <span class="o">(</span>bare host directory volume<span class="o">)</span>
    Path:          /var/lib/etcd
    HostPathType:  DirectoryOrCreate
QoS Class:         BestEffort
Node-Selectors:    &lt;none&gt;
Tolerations:       :NoExecuteop<span class="o">=</span>Exists
Events:            &lt;none&gt;
</code></pre></div></div>

<ul>
  <li>위의 etcd 파드(POD)의 정보를 참조하여 백업 명령어를 작성한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:/opt# <span class="nv">ETCDCTL_API</span><span class="o">=</span>3 etcdctl <span class="nt">--endpoints</span><span class="o">=</span>https://127.0.0.1:2379 <span class="se">\</span>
<span class="o">&gt;</span>   <span class="nt">--cacert</span><span class="o">=</span>/etc/kubernetes/pki/etcd/ca.crt <span class="nt">--cert</span><span class="o">=</span>/etc/kubernetes/pki/etcd/server.crt <span class="nt">--key</span><span class="o">=</span>/etc/kubernetes/pki/etcd/server.key <span class="se">\</span>
<span class="o">&gt;</span>   snapshot save /opt/etcd-backup.db
Snapshot saved at /opt/etcd-backup.db
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--endpoints</code> : listen-client-urls 참조</li>
  <li><code class="language-plaintext highlighter-rouge">--cacert</code> : trusted-ca-file 참조</li>
  <li><code class="language-plaintext highlighter-rouge">--cert</code> : cert-file 참조</li>
  <li><code class="language-plaintext highlighter-rouge">--key</code> : key-file 참조</li>
</ul>

<p><br /></p>

<ul>
  <li>백업파일이 잘 생성되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:/opt# <span class="nv">ETCDCTL_API</span><span class="o">=</span>3 etcdctl <span class="nt">--write-out</span><span class="o">=</span>table snapshot status /opt/etcd-backup.db
+----------+----------+------------+------------+
|   HASH   | REVISION | TOTAL KEYS | TOTAL SIZE |
+----------+----------+------------+------------+
| aca19208 |    10592 |       1317 |     2.8 MB |
+----------+----------+------------+------------+
</code></pre></div></div>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>etcd backup: <a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster">https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster</a></li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[ETCD를 백업하기 위해서는 etcd의 파드(POD) 참조]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 7 - Secret이 마운트된 Pod 생성하기</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-7/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 7 - Secret이 마운트된 Pod 생성하기" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-7</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-7/"><![CDATA[<p><br /><br /></p>

<h1 id="7-secret이-마운트된-pod-생성하기">7. Secret이 마운트된 Pod 생성하기</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">admin1401</code> 네임스페이스에 <code class="language-plaintext highlighter-rouge">busybox</code>이미지를 가지고 <code class="language-plaintext highlighter-rouge">secret-1401</code>라는 파드를 생성</li>
  <li>파드 내 컨테이너명은 반드시 <code class="language-plaintext highlighter-rouge">secret-admin</code> 여야함</li>
  <li><code class="language-plaintext highlighter-rouge">4800</code>초동안 sleep하는 명령어 실행</li>
  <li>컨테이너에 마운트 되는 시크릿 볼륨은 <code class="language-plaintext highlighter-rouge">read-only</code> 여야 하며,</li>
  <li>컨테이너는 <code class="language-plaintext highlighter-rouge">/etc/secret-volume</code> 경로에 시크릿 볼륨을 마운트해야한다.</li>
  <li>시크릿 이름은 <code class="language-plaintext highlighter-rouge">dotfile-secret</code></li>
  <li>채점 기준: 파드가 올바르게 생성되었는가?</li>
</ul>

<p><br /><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li>kubectl 명령어로 pod의 yaml 파일을 생성해준다.
    <ul>
      <li>Tip:  <code class="language-plaintext highlighter-rouge">--dry-run</code> 옵션을 사용해 파드를 생성하지 않고 매니페스트 파일만 생성한다.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k run <span class="nt">-n</span> admin1401 <span class="nt">--image</span><span class="o">=</span>busybox secret-1401 <span class="nt">--dry-run</span><span class="o">=</span>client <span class="nt">-o</span> yaml <span class="nt">--command</span> <span class="nt">--</span> <span class="nb">sleep </span>4800 <span class="o">&gt;</span> pod.yaml
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>생성한 매니페스트 파일(yaml)을 편집한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# vi pod.yaml
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: secret-1401
  name: secret-1401
  namespace: admin1401
spec:
  containers:
  - <span class="nb">command</span>:
    - <span class="nb">sleep</span>
    - <span class="s2">"4800"</span>
    image: busybox
    name: secret-1401
  dnsPolicy: ClusterFirst
  restartPolicy: Always
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>문제 요건에 맞게 pod의 yaml 파일을 수정한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: secret-1401
  name: secret-1401
  namespace: admin1401
spec:
  containers:
  - <span class="nb">command</span>:
    - <span class="nb">sleep</span>
    - <span class="s2">"4800"</span>
    image: busybox
    name: secret-admin
    volumeMounts:
    - name: secret-volume
      readOnly: <span class="nb">true
      </span>mountPath: <span class="s2">"/etc/secret-volume"</span>
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
  - name: secret-volume
    secret:
      secretName: dotfile-secret
</code></pre></div></div>

<ul>
  <li>파드의 컨테이너명을 <code class="language-plaintext highlighter-rouge">secret-admin</code> 으로 수정한다.</li>
  <li>쿠버네티스 공식 문서의 Secret 문서를 참고하여 Secret Volume과 VolumeMounts 구문을 추가한다.</li>
</ul>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl create -f &lt;yaml파일명&gt;</code> 명령어를 사용해 파드를 생성한 뒤, 잘 생성되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl create <span class="nt">-f</span> pod.yaml 
pod/secret-1401 created
root@controlplane:~# kubectl get pods <span class="nt">-n</span> admin1401
NAME          READY   STATUS    RESTARTS   AGE
secret-1401   1/1     Running   0          12s
</code></pre></div></div>

<p><br /></p>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>kubectl reference: <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run</a></li>
  <li>Secret: <a href="https://kubernetes.io/ko/docs/concepts/configuration/secret/#%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80-ssh-%ED%82%A4%EA%B0%80-%EC%9E%88%EB%8A%94-%ED%8C%8C%EB%93%9C">https://kubernetes.io/ko/docs/concepts/configuration/secret/#사용-사례-ssh-키가-있는-파드</a></li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[명령형 커맨드로 파드(POD) YAML를 생성한 뒤 수정한다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 28일차</title><link href="http://localhost:4000/programming/Python-Day28/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 28일차" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day28</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day28/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 9-3. 패키지를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo1.jpg" alt="2022-05-15-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo2.jpg" alt="2022-05-15-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="03-패키지">03. 패키지</h1>

<h2 id="1-패키지의-개념">1. 패키지의 개념</h2>

<ul>
  <li>관련있는 모듈을 <strong>하나의 폴더</strong>로 구성해 놓은 것.</li>
</ul>

<p><br /><br /></p>

<h2 id="2-패키지-만들고-사용하기">2. 패키지 만들고, 사용하기</h2>

<ul>
  <li>디렉토리(=폴더) 구조</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="n">startcoding</span> <span class="o">/</span> 
    <span class="n">unit</span> <span class="o">/</span>
        <span class="n">__init__</span><span class="p">.</span><span class="n">py</span>
        <span class="n">character</span><span class="p">.</span><span class="n">py</span>
        <span class="n">item</span><span class="p">.</span><span class="n">py</span>
        <span class="n">monster</span><span class="p">.</span><span class="n">py</span>
    <span class="n">main</span><span class="p">.</span><span class="n">py</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>VScode로 이동해 Chapter9 폴더 밑에 startcoding, startcoding 하위에 unit 폴더를 생성 및 위 디렉토리 구조대로 파일생성
    <ul>
      <li>Tip: unit 폴더 생성 시 <code class="language-plaintext highlighter-rouge">startcoding/unit</code> 이라는 컴팩트폴더 형식으로 폴더가 표시되는데, 이를 해제하려면 <code class="language-plaintext highlighter-rouge">File &gt; Preference &gt; Settings</code> (MacOS의 경우 <code class="language-plaintext highlighter-rouge">Code &gt; Preference &gt; Settings</code> ) 에 들어가 <code class="language-plaintext highlighter-rouge">compact</code> 라고 검색한 뒤, <code class="language-plaintext highlighter-rouge">Explorer: Compact Folders</code> 라는 항목의 체크박스를 해제해주면 폴더가 트리형식으로 표시된다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>디렉토리 및 파일 생성이 완료되면 이런 형태가 된다.</p>

    <p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo3.png" alt="2022-05-15-Python-Photo3" /></p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>unit 패키지 안의 모듈부터 작성해보자. 먼저 <code class="language-plaintext highlighter-rouge">character.py</code>를 아주 간단하게 Print 문으로만 구성해 작성해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"this is a character module"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>item, monster 모듈도 동일 요령으로 작성하자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"this is a item module"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"this is a monster module"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>이렇게 작성한 위 모듈들을 main.py에서 불러오자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. import 패키지.모듈
</span><span class="kn">import</span> <span class="nn">unit.character</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>“unit.character” is not accessed: Import “unit.character” could not be resolved Pylance(reportMissingImports) 라는 에러메시지가 발생
    <ul>
      <li>startcoding이라는 새로운 폴더를 만들었기 때문</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">File &gt; Preference &gt; Settings</code> (MacOS의 경우 <code class="language-plaintext highlighter-rouge">Code &gt; Preference &gt; Settings</code> ) 에서 아래 빨간색 박스로 표시한 아이콘을 클릭</p>

        <p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo4.png" alt="2022-05-15-Python-Photo4" /></p>
      </li>
    </ul>

    <p><br /></p>

    <ul>
      <li>settings.json 파일에서 “python.analysis.extraPaths” 에 startcoding으로 향하는 경로를 추가한다.</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">{</span>
      <span class="s">"python.pythonPath"</span><span class="p">:</span> <span class="s">"/anaconda3/bin/python"</span><span class="p">,</span>
      <span class="s">"editor.unicodeHighlight.allowedCharacters"</span><span class="p">:</span> <span class="p">{</span>
          <span class="s">" "</span><span class="p">:</span> <span class="n">true</span>
      <span class="p">},</span>
      <span class="s">"python.analysis.extraPaths"</span><span class="p">:</span> <span class="p">[</span><span class="s">"./myvenv/Chapter9"</span><span class="p">,</span> <span class="s">"./myvenv/Chapter9/startcoding"</span><span class="p">],</span>
      <span class="s">"liveSassCompile.settings.formats"</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span>
              <span class="s">"format"</span><span class="p">:</span> <span class="s">"expanded"</span><span class="p">,</span>
              <span class="s">"extensionName"</span><span class="p">:</span> <span class="s">".css"</span><span class="p">,</span>
              <span class="s">"savePath"</span><span class="p">:</span> <span class="s">"/assets/css/"</span>
          <span class="p">}</span>
      <span class="p">],</span>
      <span class="s">"pasteImage.basePath"</span><span class="p">:</span> <span class="s">"${currentFileDir}/images/"</span><span class="p">,</span>
      <span class="s">"pasteImage.prefix"</span><span class="p">:</span> <span class="s">"./"</span><span class="p">,</span>
      <span class="s">"liveServer.settings.donotShowInfoMsg"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"editor.fontSize"</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
      <span class="s">"window.zoomLevel"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="s">"explorer.compactFolders"</span><span class="p">:</span> <span class="n">false</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /><br /></p>

<h3 id="1-import-패키지모듈-방식">1. import 패키지.모듈 방식</h3>

<ul>
  <li>이어서 main.py 에서 import 를 이용해 character 모듈을 호출해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. import 패키지.모듈
</span><span class="kn">import</span> <span class="nn">unit.character</span>
<span class="n">unit</span><span class="p">.</span><span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과: unit.character의 test 함수가 잘 실행되는 것을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">character</span> <span class="n">module</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="2-from-패키지-import-모듈-방식-사용빈도-높음">2. from 패키지 import 모듈 방식 (사용빈도 높음)</h3>

<ul>
  <li>이번에는 from 패키지 import 모듈 구문을 이용해 모듈을 불러와보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 2. from 패키지 import 모듈
</span><span class="kn">from</span> <span class="nn">unit</span> <span class="kn">import</span> <span class="n">item</span>
<span class="n">item</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">item</span> <span class="n">module</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="3-from-패키지-import--방식">3. from 패키지 import * 방식</h3>

<ul>
  <li>from 패키지 import * 방식을 이용해 패키지의 모든 모듈을 불러올 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. import 패키지 import *
# : 패키지 안의 모든 모듈 가져오기
</span><span class="kn">from</span> <span class="nn">unit</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">*</code> (Asterisk): ‘모든’ 이라는 뜻</li>
  <li>character 모듈을 불러올 수 없음 ⇒ <code class="language-plaintext highlighter-rouge">__init__</code> 파일을 수정해야한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>init 모듈을 수정해주자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">character</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">monster</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.</code> : 현재 위치를 뜻한다.</li>
  <li>현재위치의 character, item, monster 모듈을 init 모듈에 import 한다 라는 뜻.</li>
</ul>

<p><br /></p>

<ul>
  <li>다시 main.py 로 돌아가 character, item, monster 모듈의 함수들을 불러와보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. import 패키지 import *
# : 패키지 안의 모든 모듈 가져오기
</span><span class="kn">from</span> <span class="nn">unit</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">item</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">monster</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과: 각 모듈의 test 함수가 잘 실행됨을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">character</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">item</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">monster</span> <span class="n">module</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="4-import-패키지-방식">4. import 패키지 방식</h3>

<ul>
  <li>import 패키지 방식을 사용해 패키지 전체를 불러와 사용할 수 있다.</li>
  <li>참고: 이 방식도 3 방식의 init 모듈 수정 절차가 필요하다.</li>
  <li>main.py 에서 import unit 으로 unit 패키지 전체를 불러온 뒤, 각 모듈의 함수를 호출한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 4. import 패키지
# : 패키지 자체를 import 
</span><span class="kn">import</span> <span class="nn">unit</span>
<span class="n">unit</span><span class="p">.</span><span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">unit</span><span class="p">.</span><span class="n">item</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">unit</span><span class="p">.</span><span class="n">monster</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과: 각 모듈의 함수가 잘 동작함을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">character</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">item</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">monster</span> <span class="n">module</span>
</code></pre></div></div>
<p><br /><br /></p>

<p>이번 포스팅에서는 패키지에 대해 알아보았다. 다음 포스팅에서는 파일입출력 기본에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 28일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Algorithm]그림으로 배우는 알고리즘 제 2장: 변수와 배열</title><link href="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2/" rel="alternate" type="text/html" title="[Algorithm]그림으로 배우는 알고리즘 제 2장: 변수와 배열" /><published>2022-05-14T00:00:00+09:00</published><updated>2022-05-14T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2</id><content type="html" xml:base="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2/"><![CDATA[<p><br /><br /></p>

<h1 id="6-데이터는-다양한-정보이다">6. 데이터는 다양한 정보이다</h1>

<ul>
  <li>알고리즘 = 데이터 + 처리</li>
  <li>데이터: 다양한 정보</li>
</ul>

<p><br /></p>

<ul>
  <li>예시 1: 고기감자 요리
    <ul>
      <li>데이터: 고기감자 재료</li>
      <li>처리: 요리 방법</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>예시 2: 최대공약수 구하기
    <ul>
      <li>데이터(필요한 정보)
        <ul>
          <li>최대 공약수를 구하는 2개의 정수 값</li>
          <li>구한 최대 공약수(정수 값)</li>
        </ul>
      </li>
      <li>처리: 최대공약수를 구하는 방법 순서</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>예시 3: 정보의 순서 정하기
    <ul>
      <li>데이터(필요한 정보)
        <ul>
          <li>정렬할 값이 담긴 열</li>
          <li>정렬 값의 개수</li>
          <li>정렬된 결과가 담긴 열</li>
        </ul>
      </li>
      <li>처리: 정보의 순서를 정하는 방법/순서</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h1 id="7-모든-데이터에는-타입이-있다">7. 모든 데이터에는 타입이 있다</h1>

<ul>
  <li>데이터 타입: 다양한 정보(데이터)를 그룹화한 것</li>
  <li>많이 사용되는 기본 데이터 타입(5가지)
    <ul>
      <li><strong>정수 타입(int)</strong>: 정수(소수점이 없는 값)를 처리하기 위한 데이터 타입</li>
      <li><strong>실수 타입(float)</strong>: 실수(소수점을 포함한 값)를 처리하기 위한 데이터 타입</li>
      <li><strong>문자 타입</strong>: 문자를 처리하기 위한 데이터 타입</li>
      <li><strong>문자열 타입(string)</strong>: 문자열을 처리하기 위한 데이터 타입</li>
      <li><strong>논리 타입(boolean)</strong>: ‘참’, ‘거짓’을 다루기 위한 데이터 타입</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Algorithm" /><category term="알고리즘공부" /><category term="그림으로배우는알고리즘" /><category term="비전공자개발자공부" /><category term="데브옵스엔지니어" /><category term="파이썬알고리즘" /><category term="알고리즘책추천" /><category term="데이터타입" /><summary type="html"><![CDATA[데이터는 다양한 정보이며, 데이터에는 타입이 있다]]></summary></entry></feed>