<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-14T10:14:03+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">release: canary</title><subtitle>어쩌다 데브옵스 엔지니어가 된 문과생의 기록용 블로그</subtitle><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><entry><title type="html">[Algorithm]그림으로 배우는 알고리즘 제 2장: 변수와 배열</title><link href="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2/" rel="alternate" type="text/html" title="[Algorithm]그림으로 배우는 알고리즘 제 2장: 변수와 배열" /><published>2022-05-14T00:00:00+09:00</published><updated>2022-05-14T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2</id><content type="html" xml:base="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2/"><![CDATA[<p><br /><br /></p>

<h1 id="6-데이터는-다양한-정보이다">6. 데이터는 다양한 정보이다</h1>

<ul>
  <li>알고리즘 = 데이터 + 처리</li>
  <li>데이터: 다양한 정보</li>
</ul>

<p><br /></p>

<ul>
  <li>예시 1: 고기감자 요리
    <ul>
      <li>데이터: 고기감자 재료</li>
      <li>처리: 요리 방법</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>예시 2: 최대공약수 구하기
    <ul>
      <li>데이터(필요한 정보)
        <ul>
          <li>최대 공약수를 구하는 2개의 정수 값</li>
          <li>구한 최대 공약수(정수 값)</li>
        </ul>
      </li>
      <li>처리: 최대공약수를 구하는 방법 순서</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>예시 3: 정보의 순서 정하기
    <ul>
      <li>데이터(필요한 정보)
        <ul>
          <li>정렬할 값이 담긴 열</li>
          <li>정렬 값의 개수</li>
          <li>정렬된 결과가 담긴 열</li>
        </ul>
      </li>
      <li>처리: 정보의 순서를 정하는 방법/순서</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h1 id="7-모든-데이터에는-타입이-있다">7. 모든 데이터에는 타입이 있다</h1>

<ul>
  <li>데이터 타입: 다양한 정보(데이터)를 그룹화한 것</li>
  <li>많이 사용되는 기본 데이터 타입(5가지)
    <ul>
      <li><strong>정수 타입(int)</strong>: 정수(소수점이 없는 값)를 처리하기 위한 데이터 타입</li>
      <li><strong>실수 타입(float)</strong>: 실수(소수점을 포함한 값)를 처리하기 위한 데이터 타입</li>
      <li><strong>문자 타입</strong>: 문자를 처리하기 위한 데이터 타입</li>
      <li><strong>문자열 타입(string)</strong>: 문자열을 처리하기 위한 데이터 타입</li>
      <li><strong>논리 타입(boolean)</strong>: ‘참’, ‘거짓’을 다루기 위한 데이터 타입</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Algorithm" /><category term="알고리즘공부" /><category term="그림으로배우는알고리즘" /><category term="비전공자개발자공부" /><category term="데브옵스엔지니어" /><category term="파이썬알고리즘" /><category term="알고리즘책추천" /><category term="데이터타입" /><summary type="html"><![CDATA[데이터는 다양한 정보이며, 데이터에는 타입이 있다]]></summary></entry><entry><title type="html">[Algorithm]그림으로 배우는 알고리즘 제 1장: 알고리즘이란</title><link href="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day1/" rel="alternate" type="text/html" title="[Algorithm]그림으로 배우는 알고리즘 제 1장: 알고리즘이란" /><published>2022-05-13T00:00:00+09:00</published><updated>2022-05-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day1</id><content type="html" xml:base="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day1/"><![CDATA[<p><br /><br /></p>

<p>최근 파이썬 공부를 하면서 개발자 유투브 영상 등을 틈날때마다 보고있는데 다들 입을모아 알고리즘을 꼭 공부해야한다, 코딩테스트를 위해서 뿐만 아니라 개발자로써 커리어를 쌓기 위해 꼭 필요하다라는 얘기를 들어 매일 조금씩이라도 공부하기 위해 책을 읽으며 기록하려고 한다.</p>

<p><br /></p>

<p>내가 아직 프로그래밍 언어에 대한 이해도가 깊지 않기 때문에, 특정 언어에 얽매이지 않고, 또한 아침 출근 직후 시간에 짬내서 읽기 괜찮은 분량의 책을 찾았는데 이 책이 딱 그 조건에 부합해서 선택해보았다.</p>

<p><br /></p>

<p>앞으로 평일에는 하루에 4페이지 정도 읽고 내용을 간단하게 요약해서 블로그에 올리려고 한다.</p>

<p><br /><br /></p>

<h1 id="제-1장-알고리즘이란">제 1장. 알고리즘이란</h1>

<h2 id="1-음식-요리법은-알고리즘">1. 음식 요리법은 알고리즘</h2>

<ul>
  <li>알고리즘(Algorithm); 컴퓨터를 이용해 주어진 <strong>과제</strong>를 해결하기 위한 처리 절차
    <ul>
      <li>과제의 예
        <ul>
          <li>최대 공약수를 구한다</li>
          <li>정보의 순서를 정해 나열</li>
          <li>원하는 정보 검색</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>현실세게의 다양한 과제의 해결에도 알고리즘의 개념이 사용된다</p>
  </li>
  <li>
    <p>예: 음식 요리법</p>
    <ul>
      <li>치킨카레 만들기 ⇒ 과제</li>
      <li>알고리즘
        <ul>
          <li>요리 재료 종류와 양을 정의</li>
          <li>시간별로 요리 절차가 적혀있다</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="2-알고리즘은-선인들의-지혜">2. 알고리즘은 선인들의 지혜</h2>

<ul>
  <li>음식 요리법 중 나쁜 요리법은 사용하는 사람이 적어질 것이고, 음식을 맛있게, 쉽게, 빠르게 만들 수 있는 좋은 요리법은 사용하는 사람이 많아질 것 ⇒ 알고리즘도 마찬가지</li>
</ul>

<p><br /></p>

<ul>
  <li>알고리즘의 경우에도 <strong>보다 효율적으로, 보다 범용적으로, 보다 빠르게 처리를 할 수 있도록 알고리즘을 개선</strong>하게 된다.</li>
</ul>

<p><br /><br /></p>

<h2 id="3-알고리즘을-이해하는-것은-게임을-잘-하게-되는-것">3. 알고리즘을 이해하는 것은 게임을 잘 하게 되는 것</h2>

<ul>
  <li>알고리즘의 학습은 게임의 공략법과 같이 더 나은 프로그램을 만들기 위한 방법
    <ul>
      <li>알고리즘은 효율적인 프로그래밍을 위해 반드시 학습해야한다.</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="4-알고리즘에는-정당성과-정지성이-있어야한다">4. 알고리즘에는 ‘정당성’과 ‘정지성’이 있어야한다</h2>

<p>알고리즘은 다음의 두 가지 조건을 충족해야 한다.</p>

<p><br /></p>

<h3 id="1-정당성">1. 정당성</h3>

<ul>
  <li>주어진 과제에 대해 올바른 결과를 반환해야 한다(입력값이 지정된 조건과 일치한다면 ).</li>
  <li>정당성을 증명하는 방법: <strong>단정문(Assertion)</strong>
    <ul>
      <li>알고리즘의 실행순서 중 임의의 위치에서 충족해야하는 조건이 성립하는지(올바르게 동작하는지) 체크</li>
      <li>단계별 동작을 확인해 알고리즘 전체의 정당성을 체크할 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="2-정지성">2. 정지성</h3>

<ul>
  <li>어떠한 조건의 입력값이 주어지더라도 정해진 시간 내 반드시 정상적인 종료를 보장</li>
  <li>영원히 처리를 반복해 답을 내지 않는 처리(무한 루프)는 알고리즘이 아님</li>
  <li>정지성을 증명하는 방법: 반복 처리의 종료조건 체크에 사용되는 변수를 관찰해 정해진 횟수만큼 반복하면 반드시 정지하는 것을 증명</li>
</ul>

<p><br /></p>

<h2 id="5-알고리즘에는-다양한-종류가-있다">5. 알고리즘에는 다양한 종류가 있다</h2>

<ul>
  <li>중요한 알고리즘의 종류
    <ul>
      <li>기술 계산</li>
      <li>정렬</li>
      <li>검색</li>
      <li>문자열 패턴 매칭</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="1-기술계산">1. 기술계산</h3>

<ul>
  <li>기술계산을 위한 알고리즘</li>
  <li>기술계산의 예
    <ul>
      <li>유클리드 호제법(최대공약수)</li>
      <li>가우스 소거법(방정식)</li>
      <li>사다리꼴의 법칙(정적분)</li>
      <li>데이크스트라 알고리즘(최적 경로)</li>
      <li>에라토스테네스의 체(소수)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="2-정렬sort">2. 정렬(Sort)</h3>

<ul>
  <li>1줄로 늘어선 데이터를 작은순서(오름차순) 또는 큰 순서(내림차순)로 정렬하는 알고리즘</li>
  <li>정렬의 예
    <ul>
      <li>단순 선택 정렬</li>
      <li>단순 교환 정렬 (버블 정렬)</li>
      <li>단순 삽입 정렬</li>
      <li>셸 정렬</li>
      <li>병합 정렬</li>
      <li>퀵 정렬</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="3-검색search">3. 검색(Search)</h3>

<ul>
  <li>많은 양의 데이터 중 원하는 데이터를 찾는 알고리즘</li>
  <li>검색의 예
    <ul>
      <li>선형검색 (리니어 서치: Linear Search)</li>
      <li>이진 검색 (바이너리 서치: Binary Search)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="4-문자열-패턴-매칭">4. 문자열 패턴 매칭</h3>

<ul>
  <li>문자열 중 지정 문자열의 패턴(부분 문자열)과 일치하는 부분을 찾는 알고리즘</li>
  <li>문자열 패턴 매칭의 예
    <ul>
      <li>단순 문자열 일치</li>
      <li>KMP 알고리즘</li>
      <li>BM 알고리즘</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="5-구조적-프로그래밍">5. 구조적 프로그래밍</h2>

<ul>
  <li>프로그램을 효율적으로 작성, 설계상 오류 최소화하기위한 방법론</li>
  <li>구조적 프로그래밍에서 사용하는 프로세스 흐름
    <ul>
      <li>순차구조: 작성 순서대로 순차 실행</li>
      <li>선택구조: 조건에 따라. 수행할 작업의 흐름 변경</li>
      <li>반복구조: 조건이 일치하는동안 일정과정 반복 실행</li>
    </ul>
  </li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Algorithm" /><category term="알고리즘공부" /><category term="그림으로배우는알고리즘" /><category term="비전공자개발자공부" /><category term="데브옵스엔지니어" /><category term="파이썬알고리즘" /><category term="알고리즘책추천" /><summary type="html"><![CDATA[알고리즘이란 컴퓨터를 이용해 주어진 과제를 해결하기 위한 처리 절차이다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 26일차</title><link href="http://localhost:4000/programming/Python-Day26/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 26일차" /><published>2022-05-13T00:00:00+09:00</published><updated>2022-05-13T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day26</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day26/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 9-1. 모듈을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-13-Python-Photo/2022-05-13-Python-Photo1.jpg" alt="2022-05-13-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-13-Python-Photo/2022-05-13-Python-Photo2.jpg" alt="2022-05-13-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="01-모듈">01. 모듈</h1>

<h2 id="1-모듈을-사용하는-이유">1. 모듈을 사용하는 이유</h2>

<ul>
  <li>프로그램을 기능별로 파일을 나누어 유지보수 등 관리를 편하게 할 수 있기 때문</li>
</ul>

<p><br /><br /></p>

<h2 id="2-모듈의-개념">2. 모듈의 개념</h2>

<ul>
  <li>한 개의 완성된 프로그램 파일</li>
</ul>

<p><br /><br /></p>

<h2 id="3-파이썬-기본-모듈-사용방법">3. 파이썬 기본 모듈 사용방법</h2>

<ul>
  <li>파이썬의 기본 모듈을 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">모듈이름</span>
<span class="n">모듈이름</span><span class="p">.</span><span class="n">변수</span>
<span class="n">모듈이름</span><span class="p">.</span><span class="n">함수</span><span class="p">()</span>

<span class="c1"># 예시 1
</span><span class="kn">import</span> <span class="nn">math</span>
<span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">ceil</span><span class="p">(</span><span class="mf">5.7</span><span class="p">))</span> <span class="c1"># 올림 함수
</span>
<span class="c1"># 예시 2: 뒤의 메소드, 변수 이름으로 그대로 작성할 수 있게 하는 방법
</span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">pi</span><span class="p">,</span> <span class="n">ceil</span>
<span class="k">print</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">ceil</span><span class="p">(</span><span class="mf">5.7</span><span class="p">))</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="4-파이썬-외부-모듈-사용방법">4. 파이썬 외부 모듈 사용방법</h2>

<ul>
  <li>파이썬 외부의 모듈을 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">모듈이름</span>

<span class="n">pip</span> <span class="n">install</span> <span class="n">pyautogui</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="5-모듈-만들기-실습">5. 모듈 만들기 실습</h2>

<h3 id="1-내장모듈">1. 내장모듈</h3>

<ul>
  <li>내장모듈: 파이썬 설치 시 자동으로 설치되는 모듈</li>
  <li>파이썬 내장 모듈을 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 내장 모듈
# : 파이썬 설치 시 자동으로 설치되는 모듈
</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">pi</span><span class="p">,</span> <span class="n">ceil</span> <span class="k">as</span> <span class="n">c</span>
<span class="k">print</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mf">5.7</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>from math import pi를 쓰면 math.pi라고 쓰지 않고 pi만 써도 모듈이 실행된다.</li>
  <li>모듈을 간단한 이름으로 변경하여 사용하고 싶은 경우 <code class="language-plaintext highlighter-rouge">as</code> 뒤에 사용하고 싶은 이름을 작성하면 적용된다.</li>
</ul>

<p><br /><br /></p>

<h3 id="2-외부-모듈">2. 외부 모듈</h3>

<ul>
  <li>pyautogui 공식 홈페이지 Documentation 페이지에 접속한다.
    <ul>
      <li>홈페이지에 나와있는대로 <code class="language-plaintext highlighter-rouge">pip install pyautogui</code> 명령어를 터미널 창에 입력한다.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">pyautogui</span>
<span class="n">Collecting</span> <span class="n">pyautogui</span>
  <span class="n">Downloading</span> <span class="n">PyAutoGUI</span><span class="o">-</span><span class="mf">0.9</span><span class="p">.</span><span class="mf">53.</span><span class="n">tar</span><span class="p">.</span><span class="n">gz</span> <span class="p">(</span><span class="mi">59</span> <span class="n">kB</span><span class="p">)</span>
     <span class="err">━━━━━━━━━━━━━</span> <span class="mf">59.0</span><span class="o">/</span><span class="mf">59.0</span> <span class="n">KB</span> <span class="mf">987.7</span> <span class="n">kB</span><span class="o">/</span><span class="n">s</span> <span class="n">eta</span> <span class="mi">0</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
  <span class="n">Preparing</span> <span class="n">metadata</span> <span class="p">(</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span><span class="p">)</span> <span class="p">...</span> <span class="n">done</span>
<span class="n">Collecting</span> <span class="n">pymsgbox</span>
  <span class="n">Downloading</span> <span class="n">PyMsgBox</span><span class="o">-</span><span class="mf">1.0</span><span class="p">.</span><span class="mf">9.</span><span class="n">tar</span><span class="p">.</span><span class="n">gz</span> <span class="p">(</span><span class="mi">18</span> <span class="n">kB</span><span class="p">)</span>
<span class="p">...</span>
<span class="p">(</span><span class="n">생략</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>설치가 완료되면 import 로 pyautogui를 불러온다(별칭 pg로 설정).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 외부 모듈
# : 다른 사람이 만든 파이썬 파일을 pipfh 설치해서 사용
# pyautogui (공식 홈페이지: https://pyautogui.readthedocs.io/en/latest/)
</span><span class="kn">import</span> <span class="nn">pyautogui</span> <span class="k">as</span> <span class="n">pg</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>pyautogui 홈페이지(<a href="https://pyautogui.readthedocs.io/en/latest/">https://pyautogui.readthedocs.io/en/latest/</a>)에서 Example 중 하나를 실행해보자
    <ul>
      <li>**<code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;** pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  *# Use tweening/easing function to move mouse over 2 seconds.*</code></li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pg</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># 화면의 500 * 500 위치에 마우스를 2초간 이동하라는 명령어
</span></code></pre></div></div>

<ul>
  <li>실행결과: 마우스를 건드리지 않아도 자동으로 500*500 위치로 이동한다.</li>
  <li>MacOS의 경우 vscode가 컴퓨터 시스템을 제어할 수 있도록 권한을 부여해야 실행이 가능하다.</li>
</ul>

<p><br /><br /></p>

<p>이번 포스팅에서는 모듈에 대해 알아보았다. 다음 포스팅에서는 파이썬 모듈을 만들어보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 26일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 25일차</title><link href="http://localhost:4000/programming/Python-Day25/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 25일차" /><published>2022-05-12T00:00:00+09:00</published><updated>2022-05-12T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day25</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day25/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 8-5. 클래스 실습문제를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-12-Python-Photo/2022-05-12-Python-Photo1.jpg" alt="2022-05-12-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-12-Python-Photo/2022-05-12-Python-Photo2.jpg" alt="2022-05-12-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="05-클래스-실습문제">05. 클래스 실습문제</h1>

<h2 id="1-실습문제-811">1. 실습문제 8.1.1</h2>

<ul>
  <li>영철은 스타트게임즈 회사에 개발자로 취직을 하게 되었다. 지난 주 회의 결과로 신작 MMORPG 게임의 아이템 구성안을 만들었다.
    <ul>
      <li>아이템 공통: 이름, 가격, 무게, 판매하기, 버리기</li>
      <li>장비 아이템: 착용효과, 착용하기</li>
      <li>소모품 아이템: 사용효과, 사용하기</li>
      <li>(단, 버리기는 버릴 수 있는 아이템만 가능하가)</li>
    </ul>
  </li>
  <li>
    <p>구성안을 토대로 클래스 다이어그램을 설계하였다.</p>

    <p><img src="/assets/images/2022-05-12-Python-Photo/2022-05-12-Python-Photo3.png" alt="2022-05-12-Python-Photo3" /></p>
  </li>
  <li>
    <p>구성안과 설계도를 보고 클래스를 코드로 완성해보자.</p>

    <p>(메서드 구현은 자유롭게 한다)</p>
  </li>
</ul>

<p><br /><br /></p>

<h3 id="내-풀이">[내 풀이]</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 부모: Item
#  - 속성: 이름(name), 가격(price), 무게(weight)
#  - 메서드: 판매하기(sale), 버리기(discard)
# 자식 1: WearableItem
#  - 속성: 착용효과(effect)
#  - 메서드: 착용하기(wear)
# 자식 2: Usable item
#  - 속성: 사용효과(effect)
#  - 메서드: 사용하기(use)
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 얻었습니다. 아이템 가격은 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">원, 무게는 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">weight</span><span class="si">}</span><span class="s"> 입니다."</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">sell</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">원에 판매했습니다."</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 버렸습니다."</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 버릴 수 없습니다."</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">WearableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 아이템을 착용했습니다."</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="p">(</span><span class="s">"공격력이 +200 상승했습니다."</span><span class="p">,</span> <span class="s">"속도가 +100 상승했습니다."</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 아이템을 사용했습니다."</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="p">(</span><span class="s">"체력이 +100 상승했습니다."</span><span class="p">)</span>

<span class="n">sword</span> <span class="o">=</span> <span class="n">WearableItem</span><span class="p">(</span><span class="s">"검"</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">sword</span><span class="p">.</span><span class="n">sell</span><span class="p">()</span>
<span class="n">sword</span><span class="p">.</span><span class="n">discard</span><span class="p">()</span>

<span class="n">medicine</span> <span class="o">=</span> <span class="n">UsableItem</span><span class="p">(</span><span class="s">"medicine"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">medicine</span><span class="p">.</span><span class="n">use</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>착용, 사용효과는 아이템마다 상이하므로 변수로 빼주어야한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>실행결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">1.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="p">.</span><span class="n">py</span>
<span class="n">검</span> <span class="n">아이템을</span> <span class="n">얻었습니다</span><span class="p">.</span> <span class="n">아이템</span> <span class="n">가격은</span> <span class="mi">10000</span><span class="n">원</span><span class="p">,</span> <span class="n">무게는</span> <span class="mi">10</span> <span class="n">입니다</span><span class="p">.</span>
<span class="n">검</span> <span class="n">아이템을</span> <span class="mi">10000</span><span class="n">원에</span> <span class="n">판매했습니다</span><span class="p">.</span>
<span class="n">검</span> <span class="n">아이템을</span> <span class="n">버릴</span> <span class="n">수</span> <span class="n">없습니다</span><span class="p">.</span>
<span class="n">medicine</span> <span class="n">아이템을</span> <span class="n">얻었습니다</span><span class="p">.</span> <span class="n">아이템</span> <span class="n">가격은</span> <span class="mi">1000</span><span class="n">원</span><span class="p">,</span> <span class="n">무게는</span> <span class="mf">0.5</span> <span class="n">입니다</span><span class="p">.</span>
<span class="p">[</span><span class="n">medicine</span><span class="p">]</span> <span class="n">아이템을</span> <span class="n">사용했습니다</span><span class="p">.</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="강의-해설">[강의 해설]</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스 생성
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
    
    <span class="k">def</span> <span class="nf">sale</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 판매가격은 [</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">]입니다.]"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 버렸습니다.]"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 버릴 수 없습니다."</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">WearbleItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 착용했습니다. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># 인스턴스 생성
</span><span class="n">sword</span> <span class="o">=</span> <span class="n">WearbleItem</span><span class="p">(</span><span class="s">"이가닌자의검"</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="s">"체력 5000 증가, 마력 5000 증가"</span><span class="p">)</span>
<span class="n">sword</span><span class="p">.</span><span class="n">wear</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">2.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="o">-</span><span class="n">해설</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">이가닌자의검</span><span class="p">]</span> <span class="n">착용했습니다</span><span class="p">.</span> <span class="n">체력</span> <span class="mi">5000</span> <span class="n">증가</span><span class="p">,</span> <span class="n">마력</span> <span class="mi">5000</span> <span class="n">증가</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>부모클래스의 메서드도 잘 상속받아왔는지 확인해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스 생성
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
    
    <span class="k">def</span> <span class="nf">sale</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 판매가격은 [</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">]입니다.]"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 버렸습니다.]"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 버릴 수 없습니다."</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">WearbleItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 착용했습니다. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># 인스턴스 생성
</span><span class="n">sword</span> <span class="o">=</span> <span class="n">WearbleItem</span><span class="p">(</span><span class="s">"이가닌자의검"</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="s">"체력 5000 증가, 마력 5000 증가"</span><span class="p">)</span>
<span class="n">sword</span><span class="p">.</span><span class="n">wear</span><span class="p">()</span>
<span class="n">sword</span><span class="p">.</span><span class="n">sale</span><span class="p">()</span>
<span class="n">sword</span><span class="p">.</span><span class="n">discard</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">2.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="o">-</span><span class="n">해설</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">이가닌자의검</span><span class="p">]</span> <span class="n">착용했습니다</span><span class="p">.</span> <span class="n">체력</span> <span class="mi">5000</span> <span class="n">증가</span><span class="p">,</span> <span class="n">마력</span> <span class="mi">5000</span> <span class="n">증가</span>
<span class="p">[</span><span class="n">이가닌자의검</span> <span class="n">판매가격은</span> <span class="p">[</span><span class="mi">30000</span><span class="p">]</span><span class="n">입니다</span><span class="p">.]</span>
<span class="p">[</span><span class="n">이가닌자의검</span> <span class="n">버렸습니다</span><span class="p">.]</span>
</code></pre></div></div>

<ul>
  <li>부모클래스의 메서드인 sale, discard 모두 실행 가능함을 알 수 있다.</li>
</ul>

<p><br /></p>

<ul>
  <li>UsableItem &amp; 버릴 수 없는 아이템을 생성해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스 생성
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
    
    <span class="k">def</span> <span class="nf">sale</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 판매가격은 [</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">]입니다.]"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 버렸습니다.]"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 버릴 수 없습니다."</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">WearbleItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 착용했습니다. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># 인스턴스 생성
</span><span class="n">potion</span> <span class="o">=</span> <span class="n">UsableItem</span><span class="p">(</span><span class="s">"신비한투명물약"</span><span class="p">,</span> <span class="mi">150000</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="s">"투명효과 300초 지속"</span><span class="p">)</span>
<span class="n">potion</span><span class="p">.</span><span class="n">discard</span><span class="p">()</span>
<span class="n">potion</span><span class="p">.</span><span class="n">sale</span><span class="p">()</span>
<span class="n">potion</span><span class="p">.</span><span class="n">use</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">2.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="o">-</span><span class="n">해설</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">신비한투명물약</span><span class="p">]</span> <span class="n">버릴</span> <span class="n">수</span> <span class="n">없습니다</span><span class="p">.</span>
<span class="p">[</span><span class="n">신비한투명물약</span> <span class="n">판매가격은</span> <span class="p">[</span><span class="mi">150000</span><span class="p">]</span><span class="n">입니다</span><span class="p">.]</span>
<span class="p">[</span><span class="n">신비한투명물약</span><span class="p">].</span> <span class="n">투명효과</span> <span class="mi">300</span><span class="n">초</span> <span class="n">지속</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 실습문제를 풀어보았다. 다음 포스팅에서는 모듈에 대해서 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 25일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Kubernetes]Pod의 /etc/hosts 파일에 DNS 추가하는 방법(HostAlias)</title><link href="http://localhost:4000/devops/Kubernetes-Pod-Etc-Hosts-Hostalias/" rel="alternate" type="text/html" title="[Kubernetes]Pod의 /etc/hosts 파일에 DNS 추가하는 방법(HostAlias)" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-Pod-Etc-Hosts-Hostalias</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-Pod-Etc-Hosts-Hostalias/"><![CDATA[<p><br /><br /></p>

<p><em>💡  Pod의 /etc/hosts 파일에 DNS를 추가하기 위해서는 Deployment의 hostalias 옵션을 사용한다.</em></p>

<p><br /></p>

<h1 id="1-배경-상황">1. 배경 상황</h1>

<p><br /></p>

<p>프로젝트 진행 중 인프라팀에서 NAS의 연결 주소를 내부 private IP로 변경하기위해서 파드 내 컨테이너의 /etc/hosts 파일을 변경해달라는 요청을 받았다.</p>

<p><br /><br /></p>

<h1 id="2-설정-방법">2. 설정 방법</h1>

<p><br /></p>

<p>Pod의 /etc/hosts 파일을 변경하기 위해서는 Pod(Pod가 Deployment에 의해 생성되었을 경우에는 Deployment) YAML 파일의 hostAlias 항목에 도메인, 그리고 도메인과 맵핑할 ip를 기입해주면 된다.</p>

<p><br /></p>

<p><strong>※ 컨테이너 내부의 호스트 파일을 수동으로 변경하면 안된다. 컨테이너는 휘발성이기 때문에, 컨테이너 종료 시 변경사항이 손실된다.</strong></p>

<p><br /></p>

<ul>
  <li>Deployment에 등록할 경우</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
 <span class="na">name</span><span class="pi">:</span> <span class="s">web-app</span>
 <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
 <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
 <span class="na">selector</span><span class="pi">:</span>
  <span class="na">matchLabels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
 <span class="na">template</span><span class="pi">:</span>
   <span class="na">metadata</span><span class="pi">:</span>
     <span class="na">labels</span><span class="pi">:</span>
       <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
   <span class="na">spec</span><span class="pi">:</span>
     <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
     <span class="na">hostAliases</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">ip</span><span class="pi">:</span> <span class="s2">"</span><span class="s">127.0.0.1"</span>
       <span class="na">hostnames</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s2">"</span><span class="s">foo.local"</span>
     <span class="na">containers</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cat-hosts</span>
       <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
       <span class="na">command</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s">cat</span>
       <span class="na">args</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s2">"</span><span class="s">/etc/hosts"</span>
</code></pre></div></div>

<ul>
  <li>spec.template.hostAliases.ip ⇒ /etc/hosts 파일에 등록할 ip</li>
  <li>spec.template.hostAliases.hostnames ⇒ /etc/hosts 파일에 등록할 호스트명</li>
</ul>

<p><br /></p>

<ul>
  <li>Pod에 등록할 경우</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
 <span class="na">name</span><span class="pi">:</span> <span class="s">web-app</span>
 <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
 <span class="na">labels</span><span class="pi">:</span>
   <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
  <span class="na">hostAliases</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">ip</span><span class="pi">:</span> <span class="s2">"</span><span class="s">127.0.0.1"</span>
    <span class="na">hostnames</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">foo.local"</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cat-hosts</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
    <span class="na">command</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cat</span>
    <span class="na">args</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">/etc/hosts"</span>
</code></pre></div></div>

<ul>
  <li>spec.hostAliases.ip ⇒ /etc/hosts 파일에 등록할 ip</li>
  <li>spec.hostAliases.hostnames ⇒ /etc/hosts 파일에 등록할 호스트명</li>
</ul>

<p><br /><br /></p>

<h1 id="3-참고-자료">3. 참고 자료</h1>

<ul>
  <li>Kubernetes 공식문서: <a href="http://kubernetes.io/ko/docs/tasks/network/customize-hosts-file-for-pods">kubernetes.io/ko/docs/tasks/network/customize-hosts-file-for-pods</a></li>
</ul>

<p><br /></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스네트워킹" /><category term="hostalias" /><category term="kuberneteshostalias" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[Pod의 /etc/hosts 파일에 DNS를 추가하기 위해서는 Deployment의 hostalias 옵션을 사용한다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 24일차</title><link href="http://localhost:4000/programming/Python-Day24/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 24일차" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day24</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day24/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 8-4. 오버라이딩, 클래스변수를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-11-Python-Photo/2022-05-11-Python-Photo1.jpg" alt="2022-05-11-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-11-Python-Photo/2022-05-11-Python-Photo2.jpg" alt="2022-05-11-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="01-오버라이딩-클래스-변수">01. 오버라이딩, 클래스 변수</h1>

<h2 id="1-rpg-게임-업데이트예시">1. RPG 게임 업데이트(예시)</h2>

<h3 id="1-생성자-오버라이딩">1. 생성자 오버라이딩</h3>

<ul>
  <li>요건
    <ul>
      <li>드래곤 클래스에 인스턴스 속성으로 3개의 스킬을 추가</li>
      <li>드래곤이 스킬을 사용하면 속성 중 하나가 무작위로 사용</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>어떻게 속성을 추가할까?
    <ul>
      <li>Monster class에 속성 추가 ⇒ 다른 자식클래스에도 해당 속성이 추가됨 (X)</li>
      <li>생성자 자체를 오버라이딩하자!</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>    
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>부모 클래스의 함수를 그대로 복사 붙여넣기 해도 되지만, 매번 붙여넣기 하기는 너무 번거롭다</li>
</ul>

<p><br /></p>

<ul>
  <li>super 함수를 사용하자.
    <ul>
      <li>super().<strong>init</strong>(): 부모클래스의 <code class="language-plaintext highlighter-rouge">__init__</code> 함수를 불러온다.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>추가 매개변수인 skill의 함수를 선언해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="n">skill</span>
        
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Dragon을 호출할 때, 스킬을 추가해서 호출한다.
    <ul>
      <li>스킬은 불변하므로, 리스트가 아닌 튜플이 적절</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="n">skill</span>
        
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>스킬은 불변한데, 호출할 때 매번 넣어주면 중복이 발생한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="n">skill</span>
        
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">dragon1</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>
<span class="n">dragon2</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">7000</span><span class="p">,</span> <span class="mi">700</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>
<span class="n">dragon3</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>

<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>튜플을 속성 자체에 직접 대입</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>

</code></pre></div></div>

<p><br /></p>

<ul>
  <li>skill ⇒ skills 로 바꾸고 skill 메서드를 생성</li>
  <li>random.randint를 사용해 스킬을 랜덤으로 불러오기 (import random)</li>
  <li>dragon.skill()로 스킬을 사용해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상속
# : 클래스들에 중복된 코드를 제거하고 유지보수를
#    편하게 하기 위해 사용
</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Wolf</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Shark</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 헤엄치기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skills</span> <span class="o">=</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">skill</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 스킬 사용 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">wolf</span> <span class="o">=</span> <span class="n">Wolf</span><span class="p">(</span><span class="s">"울프"</span><span class="p">,</span> <span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">wolf</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>

<span class="n">shark</span> <span class="o">=</span> <span class="n">Shark</span><span class="p">(</span><span class="s">"샤크"</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">shark</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">skill</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과: 코드를 실행할 때마다 다른 스킬을 사용하는 것을 확인할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">05.</span><span class="n">오버라이딩클래스변수</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">울프</span><span class="p">]</span> <span class="n">지상에서</span> <span class="n">이동하기</span>
<span class="p">[</span><span class="n">샤크</span><span class="p">]</span> <span class="n">헤엄치기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">날기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">스킬</span> <span class="n">사용</span> <span class="n">날개치기</span>
<span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">05.</span><span class="n">오버라이딩클래스변수</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">울프</span><span class="p">]</span> <span class="n">지상에서</span> <span class="n">이동하기</span>
<span class="p">[</span><span class="n">샤크</span><span class="p">]</span> <span class="n">헤엄치기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">날기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">스킬</span> <span class="n">사용</span> <span class="n">불뿜기</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="2-클래스-변수">2. 클래스 변수</h3>

<ul>
  <li>전체 Monster의 개수를 최대 1000 마리로 제한 ⇒ 클래스 변수 사용해야함</li>
  <li>Monster 하위에 max_num = 1000을 정의</li>
  <li>Monster 를 생성(<code class="language-plaintext highlighter-rouge">__init__</code> ) 할때마다 1000에서 1씩 빼주기 ⇒ <code class="language-plaintext highlighter-rouge">Monster.max_num -= 1</code>
    <ul>
      <li>self 가 아님에 주의!</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상속
# : 클래스들에 중복된 코드를 제거하고 유지보수를
#    편하게 하기 위해 사용
</span>
<span class="c1"># 클래스 변수
# : 인스턴스들이 모두 공유하는 변수
</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="n">max_num</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
        <span class="n">Monster</span><span class="p">.</span><span class="n">max_num</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Wolf</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Shark</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 헤엄치기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skills</span> <span class="o">=</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">skill</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 스킬 사용 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">wolf</span> <span class="o">=</span> <span class="n">Wolf</span><span class="p">(</span><span class="s">"울프"</span><span class="p">,</span> <span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">wolf</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">wolf</span><span class="p">.</span><span class="n">max_num</span><span class="p">)</span>

<span class="n">shark</span> <span class="o">=</span> <span class="n">Shark</span><span class="p">(</span><span class="s">"샤크"</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">shark</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">shark</span><span class="p">.</span><span class="n">max_num</span><span class="p">)</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">skill</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">dragon</span><span class="p">.</span><span class="n">max_num</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과: max_num 을 모든 클래스에서 공유하는 것을 확인할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">05.</span><span class="n">오버라이딩클래스변수</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">울프</span><span class="p">]</span> <span class="n">지상에서</span> <span class="n">이동하기</span>
<span class="mi">999</span>
<span class="p">[</span><span class="n">샤크</span><span class="p">]</span> <span class="n">헤엄치기</span>
<span class="mi">998</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">날기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">스킬</span> <span class="n">사용</span> <span class="n">꼬리치기</span>
<span class="mi">997</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 오버라이딩, 클래스 변수의 개념에 대해 알아보았다. 다음 포스팅에서는 실습문제를 풀어보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 24일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 23일차</title><link href="http://localhost:4000/programming/Python-Day23/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 23일차" /><published>2022-05-10T00:00:00+09:00</published><updated>2022-05-10T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day23</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day23/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 8-3. 상속을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-10-Python-Photo/2022-05-10-Python-Photo1.jpg" alt="2022-05-10-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-10-Python-Photo/2022-05-10-Python-Photo2.jpg" alt="2022-05-10-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="03-상속">03. 상속</h1>

<h2 id="1-상속의-개념">1. 상속의 개념</h2>

<ul>
  <li>자식클래스는 부모클래스의 속성과 메서드를 그대로 가져올 수 있다.</li>
</ul>

<p><img src="/assets/images/2022-05-10-Python-Photo/2022-05-10-Python-Photo3.png" alt="2022-05-10-Python-Photo3" /></p>

<p><br /></p>

<ul>
  <li>상속이 필요한 이유: 클래스를 하나하나 설정하게 될 경우 관리포인트가 너무 많아진다.</li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>예시</p>

    <p><img src="/assets/images/2022-05-10-Python-Photo/2022-05-10-Python-Photo4.png" alt="2022-05-10-Python-Photo3" /></p>
  </li>
  <li>
    <p>‘몬스터’ 관련코드가 중복으로 발생 ⇒ 중복을 없애 효율적으로 만드는 방법은?</p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>세 클래스의 공통된 부분을 합쳐 ‘몬스터’라는 클래스를 생성한 뒤 상속하여 중복을 없애 코드를 간결하게 작성할 수 있다.</li>
</ul>

<p><img src="/assets/images/2022-05-10-Python-Photo/2022-05-10-Python-Photo5.png" alt="2022-05-10-Python-Photo3" /></p>

<p><br /><br /></p>

<h2 id="2-상속-사용-방법">2. 상속 사용 방법</h2>

<ul>
  <li>위 예시를 코드로 작성해보자.</li>
  <li>먼저, 부모클래스를 정의해보자</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"지상에서 이동하기"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>속성
    <ul>
      <li>이름</li>
      <li>체력</li>
      <li>공격력</li>
    </ul>
  </li>
  <li>메서드
    <ul>
      <li>이동하기</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>자식클래스 정의(<code class="language-plaintext highlighter-rouge">__init__</code> 는 생략 가능)</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Wolf</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">pass</span> <span class="c1"># 상속 받은 메서드만 사용
</span>
<span class="k">class</span> <span class="nc">Shark</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"헤엄치기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"날기"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>속성 (Monster 로부터 상속받은)
    <ul>
      <li>이름</li>
      <li>체력</li>
      <li>공격력</li>
    </ul>
  </li>
  <li>메서드 오버라이딩: 메서드 재 정의
    <ul>
      <li>헤엄치기</li>
      <li>날기</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="3-실습">3. 실습</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상속
# : 클래스들에 중복된 코드를 제거하고 유지보수를
#    편하게 하기 위해 사용
</span>
<span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Wolf</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Shark</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 헤엄치기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">wolf</span> <span class="o">=</span> <span class="n">Wolf</span><span class="p">(</span><span class="s">"울프"</span><span class="p">,</span> <span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">wolf</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>

<span class="n">shark</span> <span class="o">=</span> <span class="n">Shark</span><span class="p">(</span><span class="s">"샤크"</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">shark</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span><span class="mi">800</span><span class="p">)</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 상속의 개념에 대해 알아보았다. 다음 포스팅에서는 오버라이딩, 클래스 변수에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 23일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 22일차</title><link href="http://localhost:4000/programming/Python-Day22/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 22일차" /><published>2022-05-09T00:00:00+09:00</published><updated>2022-05-09T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day22</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day22/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 8-2. 생성자를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-09-Python-Photo/2022-05-09-Python-Photo1.jpg" alt="2022-05-09-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-09-Python-Photo/2022-05-09-Python-Photo2.jpg" alt="2022-05-09-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="1-생성자">1. 생성자</h1>

<h2 id="1-클래스와-객체의-개념">1. 클래스와 객체의 개념</h2>

<ul>
  <li>
    <p>클래스 = 속성 + 메서드(method)</p>

    <p><img src="/assets/images/2022-05-09-Python-Photo/2022-05-09-Python-Photo3.png" alt="2022-05-09-Python-Photo3" /></p>

    <ul>
      <li>속성: 특징들을 나타낸 것</li>
      <li>메서드: 동작들을 나타낸 것</li>
    </ul>

    <p><br /></p>
  </li>
</ul>

<h2 id="2-속성-추가하기">2. 속성 추가하기</h2>

<ul>
  <li>
    <p>Monster 클래스에 속성을 추가해보자.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
          <span class="k">print</span><span class="p">(</span><span class="s">"나는 몬스터다"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 체력
2. 공격력
3. 이동속도
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">speed</span>

<span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span> <span class="c1">#인스턴스 생성 시점
</span><span class="n">wolf</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">350</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">__init__</code> : 인스턴스를 만들 때 반드시, 가장먼저 호출되는 메서드</li>
  <li>goblin 인스턴스를 생성할때, 800, 120, 300는 <code class="language-plaintext highlighter-rouge">__init__</code> 메서드의 인자(argument)로 들어가게 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">self</code> : 인스턴스 자기자신을 뜻함. 매개변수 아님.</li>
</ul>

<p><br /><br /></p>

<h2 id="3-메서드-추가하기">3. 메서드 추가하기</h2>

<ul>
  <li>
    <p>Monster 클래스에 메서드를 추가해보자.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">speed</span>
    
  <span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
  <span class="n">wolf</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">350</span><span class="p">)</span>
</code></pre></div>    </div>

    <ol>
      <li>체력 감소하기</li>
      <li>체력 가져오기</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>추가 메서드를 적용하면 아래와 같다.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">speed</span>
      <span class="k">def</span> <span class="nf">decrease_health</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">-=</span> <span class="n">num</span>
      <span class="k">def</span> <span class="nf">get_health</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
          <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">health</span>
    
  <span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
    
  <span class="n">goblin</span><span class="p">.</span><span class="n">decrease_health</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">gobling</span><span class="p">.</span><span class="n">get_health</span><span class="p">())</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="4-실습">4. 실습</h2>

<ul>
  <li>
    <p>위에서 배운 내용을 실제 vscode에 입력해보자.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 생성자
</span>  <span class="c1"># : 인스턴스를 만들 때 호출되는 메서드
</span>    
  <span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">speed</span>
      <span class="k">def</span> <span class="nf">decrease_health</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
          <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">-=</span> <span class="n">num</span>
      <span class="k">def</span> <span class="nf">get_health</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
          <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">health</span>
    
  <span class="c1"># 고블린 인스턴스 생성
</span>  <span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
  <span class="n">goblin</span><span class="p">.</span><span class="n">decrease_health</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="n">goblin</span><span class="p">.</span><span class="n">get_health</span><span class="p">())</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li>
    <p>출력 결과</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">03.</span><span class="n">생성자</span><span class="p">.</span><span class="n">py</span>
<span class="mi">700</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>늑대 인스턴스를 추가로 생성해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 생성자
# : 인스턴스를 만들 때 호출되는 메서드
</span>
<span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">speed</span>
    <span class="k">def</span> <span class="nf">decrease_health</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">-=</span> <span class="n">num</span>
    <span class="k">def</span> <span class="nf">get_health</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">health</span>

<span class="c1"># 고블린 인스턴스 생성
</span><span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
<span class="n">goblin</span><span class="p">.</span><span class="n">decrease_health</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">goblin</span><span class="p">.</span><span class="n">get_health</span><span class="p">())</span>

<span class="c1"># 늑대 인스턴스 생성
</span><span class="n">wolf</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">350</span><span class="p">)</span>
<span class="n">wolf</span><span class="p">.</span><span class="n">decrease_health</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">wolf</span><span class="p">.</span><span class="n">get_health</span><span class="p">())</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">03.</span><span class="n">생성자</span><span class="p">.</span><span class="n">py</span>
<span class="mi">700</span>
<span class="mi">500</span>
</code></pre></div></div>

<ul>
  <li>늑대 인스턴스에 health = 1500, attack = 200, speed = 350이 할당</li>
  <li>decrease_health 함수로 health가 1000이 감소</li>
  <li>get_health 함수로 현재 health값 저장 및 print로 출력</li>
</ul>

<p><br /><br /></p>

<p>이번 포스팅에서는 생성자의 개념에 대해 알아보았다. 다음 포스팅에서는 상속에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 22일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 21일차</title><link href="http://localhost:4000/programming/Python-Day21/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 21일차" /><published>2022-05-08T00:00:00+09:00</published><updated>2022-05-08T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day21</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day21/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 7-2. 딕셔너리를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-08-Python-Photo/2022-05-08-Python-Photo1.jpg" alt="2022-05-08-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-08-Python-Photo/2022-05-08-Python-Photo2.jpg" alt="2022-05-08-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="1-클래스와-객체">1. 클래스와 객체</h1>

<h2 id="1-클래스와-객체의-개념">1. 클래스와 객체의 개념</h2>

<ul>
  <li>클래스: 객체를 만들기 위한 <strong>설계도</strong></li>
  <li>객체: 설계도로부터 만들어낸 <strong>제품</strong></li>
</ul>

<p><br /></p>

<ul>
  <li>실습</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스를 사용하는 이유
</span><span class="n">champion1_name</span> <span class="o">=</span> <span class="s">"이즈리얼"</span>
<span class="n">champion1_health</span> <span class="o">=</span> <span class="mi">700</span>
<span class="n">champion1_attack</span> <span class="o">=</span> <span class="mi">90</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">champion1_name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>

<span class="n">champion2_name</span> <span class="o">=</span> <span class="s">"리신"</span>
<span class="n">champion2_health</span> <span class="o">=</span> <span class="mi">800</span>
<span class="n">champion2_attack</span> <span class="o">=</span> <span class="mi">95</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">champion2_name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">basic_attack</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> 기본공격 </span><span class="si">{</span><span class="n">attack</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">basic_attack</span><span class="p">(</span><span class="n">champion1_name</span><span class="p">,</span> <span class="n">champion1_attack</span><span class="p">)</span>
<span class="n">basic_attack</span><span class="p">(</span><span class="n">champion2_name</span><span class="p">,</span> <span class="n">champion2_attack</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">01.</span><span class="n">클래스개념</span><span class="p">.</span><span class="n">py</span>
<span class="n">이즈리얼님</span> <span class="n">소환사의</span> <span class="n">협곡에</span> <span class="n">오신것을</span> <span class="n">환영합니다</span><span class="p">.</span>
<span class="n">리신님</span> <span class="n">소환사의</span> <span class="n">협곡에</span> <span class="n">오신것을</span> <span class="n">환영합니다</span><span class="p">.</span>
<span class="n">이즈리얼</span> <span class="n">기본공격</span> <span class="mi">90</span>
<span class="n">리신</span> <span class="n">기본공격</span> <span class="mi">95</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>위의 프로그램을 클래스로 만들어보자</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"=============클래스를 사용한 경우============="</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Champion</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">basic_attack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 기본공격 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">attack</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">ezreal</span> <span class="o">=</span> <span class="n">Champion</span><span class="p">(</span><span class="s">"이즈리얼"</span><span class="p">,</span> <span class="mi">700</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
<span class="n">leesin</span> <span class="o">=</span> <span class="n">Champion</span><span class="p">(</span><span class="s">"리신"</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">95</span><span class="p">)</span>
<span class="n">ezreal</span><span class="p">.</span><span class="n">basic_attack</span><span class="p">()</span>
<span class="n">leesin</span><span class="p">.</span><span class="n">basic_attack</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>챔피언을 하나 더 추가해야하는 경우: <strong>클래스 미사용</strong></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스를 사용하는 이유
</span><span class="n">champion1_name</span> <span class="o">=</span> <span class="s">"이즈리얼"</span>
<span class="n">champion1_health</span> <span class="o">=</span> <span class="mi">700</span>
<span class="n">champion1_attack</span> <span class="o">=</span> <span class="mi">90</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">champion1_name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>

<span class="n">champion2_name</span> <span class="o">=</span> <span class="s">"리신"</span>
<span class="n">champion2_health</span> <span class="o">=</span> <span class="mi">800</span>
<span class="n">champion2_attack</span> <span class="o">=</span> <span class="mi">95</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">champion2_name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>

<span class="c1">#### 추가 및 수정이 필요한 부분 ####
</span><span class="n">champion3_name</span> <span class="o">=</span> <span class="s">"야스오"</span>
<span class="n">champion3_health</span> <span class="o">=</span> <span class="mi">750</span>
<span class="n">champion3_attack</span> <span class="o">=</span> <span class="mi">92</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">champion3_name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>
<span class="c1">#### /추가 및 수정이 필요한 부분 ####
</span>
<span class="k">def</span> <span class="nf">basic_attack</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> 기본공격 </span><span class="si">{</span><span class="n">attack</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">basic_attack</span><span class="p">(</span><span class="n">champion1_name</span><span class="p">,</span> <span class="n">champion1_attack</span><span class="p">)</span>
<span class="n">basic_attack</span><span class="p">(</span><span class="n">champion2_name</span><span class="p">,</span> <span class="n">champion2_attack</span><span class="p">)</span>
<span class="n">basic_attack</span><span class="p">(</span><span class="n">champion3_name</span><span class="p">,</span> <span class="n">champion3_attack</span><span class="p">)</span> <span class="c1">#### 추가 및 수정이 필요한 부분
</span></code></pre></div></div>

<p><br /></p>

<ul>
  <li>챔피언을 하나 더 추가해야하는 경우: <strong>클래스 사용</strong></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"=============클래스를 사용한 경우============="</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Champion</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">님 소환사의 협곡에 오신것을 환영합니다."</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">basic_attack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 기본공격 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">attack</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">ezreal</span> <span class="o">=</span> <span class="n">Champion</span><span class="p">(</span><span class="s">"이즈리얼"</span><span class="p">,</span> <span class="mi">700</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
<span class="n">leesin</span> <span class="o">=</span> <span class="n">Champion</span><span class="p">(</span><span class="s">"리신"</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">95</span><span class="p">)</span>
<span class="n">yasuo</span> <span class="o">=</span> <span class="n">Champion</span><span class="p">(</span><span class="s">"야스오"</span><span class="p">,</span> <span class="mi">750</span><span class="p">,</span> <span class="mi">92</span><span class="p">)</span> <span class="c1"># 추가 및 수정이 필요한 부분
</span>
<span class="n">ezreal</span><span class="p">.</span><span class="n">basic_attack</span><span class="p">()</span>
<span class="n">leesin</span><span class="p">.</span><span class="n">basic_attack</span><span class="p">()</span>
<span class="n">yasuo</span><span class="p">.</span><span class="n">basic_attack</span><span class="p">()</span> <span class="c1"># 추가 및 수정이 필요한 부분
</span></code></pre></div></div>

<p><br /></p>

<ul>
  <li>
    <p>클래스를 사용하면 단 두줄만 수정하면 된다 ⇒ 객체를 많이 생산해내야 할 수 록 클래스 사용이 효율적</p>
  </li>
  <li>
    <p>클래스 = 속성 + 메서드(method)</p>

    <p><img src="/assets/images/2022-05-08-Python-Photo/2022-05-08-Python-Photo3.png" alt="2022-05-08-Python-Photo3" /></p>

    <ul>
      <li>속성: 특징들을 나타낸 것</li>
      <li>메서드: 동작들을 나타낸 것</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="2-클래스-만들기">2. 클래스 만들기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">클래스이름</span>
    <span class="k">def</span> <span class="nf">메서드이름</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
       <span class="n">명령블록</span>

<span class="c1"># 예시
</span><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"나는 몬스터다"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>만든 클래스를 호출하기</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 호출하기
</span><span class="n">인스턴스</span> <span class="o">=</span> <span class="n">클래스이름</span><span class="p">()</span>
<span class="n">인스턴스</span><span class="p">.</span><span class="n">메서드</span><span class="p">()</span>

<span class="c1"># 예시
</span><span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">()</span>
<span class="n">goblin</span><span class="p">.</span><span class="n">say</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>인스턴스: 클래스와 연관지어 표현할 때 자주 사용하는 표현(객체와 유사)</li>
</ul>

<p><br /><br /></p>

<h2 id="3-실습">3. 실습</h2>

<ul>
  <li>파이썬에서는 자료형도 클래스다</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"나는 몬스터다!"</span><span class="p">)</span>

<span class="n">goblin</span> <span class="o">=</span> <span class="n">Monster</span><span class="p">()</span>
<span class="n">goblin</span><span class="p">.</span><span class="n">say</span><span class="p">()</span>

<span class="c1"># 파이썬에서는 자료형도 클래스다
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">b</span> <span class="o">=</span> <span class="s">"문자열객체"</span>
<span class="n">c</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>결과 출력</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">jinipark</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">jinipark</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">02.</span><span class="n">클래스만들기</span><span class="p">.</span><span class="n">py</span>
<span class="n">나는</span> <span class="n">몬스터다</span><span class="err">!</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">int</span><span class="s">'&gt;
&lt;class '</span><span class="nb">str</span><span class="s">'&gt;
&lt;class '</span><span class="nb">bool</span><span class="s">'&gt;
</span></code></pre></div></div>

<p><br /></p>

<ul>
  <li>각 자료형이 class로 출력되는 것을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">__dir__</span><span class="p">())</span>
</code></pre></div></div>

<ul>
  <li>문자열 객체에 대해 생성할 수 있는 메서드 확인</li>
</ul>

<p><br /></p>

<ul>
  <li>출력 확인</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="p">[</span><span class="s">'__new__'</span><span class="p">,</span> <span class="s">'__repr__'</span><span class="p">,</span> <span class="s">'__hash__'</span><span class="p">,</span> <span class="s">'__str__'</span><span class="p">,</span> <span class="s">'__getattribute__'</span><span class="p">,</span> <span class="s">'__lt__'</span><span class="p">,</span> <span class="s">'__le__'</span><span class="p">,</span> <span class="s">'__eq__'</span><span class="p">,</span> <span class="s">'__ne__'</span><span class="p">,</span> <span class="s">'__gt__'</span><span class="p">,</span> <span class="s">'__ge__'</span><span class="p">,</span> <span class="s">'__iter__'</span><span class="p">,</span> <span class="s">'__mod__'</span><span class="p">,</span> <span class="s">'__rmod__'</span><span class="p">,</span> <span class="s">'__len__'</span><span class="p">,</span> <span class="s">'__getitem__'</span><span class="p">,</span> <span class="s">'__add__'</span><span class="p">,</span> <span class="s">'__mul__'</span><span class="p">,</span> <span class="s">'__rmul__'</span><span class="p">,</span> <span class="s">'__contains__'</span><span class="p">,</span> <span class="s">'encode'</span><span class="p">,</span> <span class="s">'replace'</span><span class="p">,</span> <span class="s">'split'</span><span class="p">,</span> <span class="s">'rsplit'</span><span class="p">,</span> <span class="s">'join'</span><span class="p">,</span> <span class="s">'capitalize'</span><span class="p">,</span> <span class="s">'casefold'</span><span class="p">,</span> <span class="s">'title'</span><span class="p">,</span> <span class="s">'center'</span><span class="p">,</span> <span class="s">'count'</span><span class="p">,</span> <span class="s">'expandtabs'</span><span class="p">,</span> <span class="s">'find'</span><span class="p">,</span> <span class="s">'partition'</span><span class="p">,</span> <span class="s">'index'</span><span class="p">,</span> <span class="s">'ljust'</span><span class="p">,</span> <span class="s">'lower'</span><span class="p">,</span> <span class="s">'lstrip'</span><span class="p">,</span> <span class="s">'rfind'</span><span class="p">,</span> <span class="s">'rindex'</span><span class="p">,</span> <span class="s">'rjust'</span><span class="p">,</span> <span class="s">'rstrip'</span><span class="p">,</span> <span class="s">'rpartition'</span><span class="p">,</span> <span class="s">'splitlines'</span><span class="p">,</span> <span class="s">'strip'</span><span class="p">,</span> <span class="s">'swapcase'</span><span class="p">,</span> <span class="s">'translate'</span><span class="p">,</span> <span class="s">'upper'</span><span class="p">,</span> <span class="s">'startswith'</span><span class="p">,</span> <span class="s">'endswith'</span><span class="p">,</span> <span class="s">'removeprefix'</span><span class="p">,</span> <span class="s">'removesuffix'</span><span class="p">,</span> <span class="s">'isascii'</span><span class="p">,</span> <span class="s">'islower'</span><span class="p">,</span> <span class="s">'isupper'</span><span class="p">,</span> <span class="s">'istitle'</span><span class="p">,</span> <span class="s">'isspace'</span><span class="p">,</span> <span class="s">'isdecimal'</span><span class="p">,</span> <span class="s">'isdigit'</span><span class="p">,</span> <span class="s">'isnumeric'</span><span class="p">,</span> <span class="s">'isalpha'</span><span class="p">,</span> <span class="s">'isalnum'</span><span class="p">,</span> <span class="s">'isidentifier'</span><span class="p">,</span> <span class="s">'isprintable'</span><span class="p">,</span> <span class="s">'zfill'</span><span class="p">,</span> <span class="s">'format'</span><span class="p">,</span> <span class="s">'format_map'</span><span class="p">,</span> <span class="s">'__format__'</span><span class="p">,</span> <span class="s">'maketrans'</span><span class="p">,</span> <span class="s">'__sizeof__'</span><span class="p">,</span> <span class="s">'__getnewargs__'</span><span class="p">,</span> <span class="s">'__doc__'</span><span class="p">,</span> <span class="s">'__setattr__'</span><span class="p">,</span> <span class="s">'__delattr__'</span><span class="p">,</span> <span class="s">'__init__'</span><span class="p">,</span> <span class="s">'__reduce_ex__'</span><span class="p">,</span> <span class="s">'__reduce__'</span><span class="p">,</span> <span class="s">'__subclasshook__'</span><span class="p">,</span> <span class="s">'__init_subclass__'</span><span class="p">,</span> <span class="s">'__dir__'</span><span class="p">,</span> <span class="s">'__class__'</span><span class="p">]</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 클래스와 객체의 개념에 대해 알아보았다. 다음 포스팅에서는 생성자에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 21일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 20일차</title><link href="http://localhost:4000/programming/Python-Day20/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 20일차" /><published>2022-05-07T00:00:00+09:00</published><updated>2022-05-07T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day20</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day20/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 7-2. 딕셔너리를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-07-Python-Photo/2022-05-07-Python-Photo1.jpg" alt="2022-05-07-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-07-Python-Photo/2022-05-07-Python-Photo2.jpg" alt="2022-05-07-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="02-딕셔너리">02. 딕셔너리</h1>

<h2 id="1-딕셔너리의-특징">1. 딕셔너리의 특징</h2>

<ul>
  <li>시퀀스 자료형</li>
  <li>키와 데이터를 가지고 있는 사전형 자료형</li>
  <li>사전형태의 자료를 만들 때 편리</li>
</ul>

<p><br /><br /></p>

<h2 id="2-딕셔너리-만들기">2. 딕셔너리 만들기</h2>

<ul>
  <li>딕셔너리를 만들어보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">딕셔너리</span> <span class="o">=</span> <span class="p">{</span><span class="n">키1</span> <span class="p">:</span> <span class="n">데이터1</span><span class="p">,</span> <span class="n">키2</span> <span class="p">:</span> <span class="n">데이터2</span><span class="p">}</span>

<span class="c1"># 예시
</span><span class="n">stock</span> <span class="o">=</span> <span class="p">{</span><span class="s">"삼성전자"</span> <span class="p">:</span> <span class="mi">82000</span><span class="p">,</span> <span class="s">"LG전자"</span> <span class="p">:</span> <span class="mi">150000</span><span class="p">}</span>

<span class="c1"># 예시2: 리스트와 튜플도 들어갈 수 있다.
</span><span class="n">stock</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"삼성전자"</span> <span class="p">:</span> <span class="p">[</span><span class="mi">81000</span><span class="p">,</span> <span class="mi">81500</span><span class="p">,</span> <span class="mi">82000</span><span class="p">,</span> <span class="mi">81500</span><span class="p">,</span> <span class="mi">82000</span><span class="p">],</span>
    <span class="s">"LG전자"</span> <span class="p">:</span> <span class="p">(</span><span class="mi">150000</span><span class="p">,</span> <span class="mi">149000</span><span class="p">,</span> <span class="mi">148000</span><span class="p">,</span> <span class="mi">151000</span><span class="p">,</span> <span class="mi">152000</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="3-딕셔너리-접근하기">3. 딕셔너리 접근하기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">딕셔너리</span><span class="p">[</span><span class="s">"키"</span><span class="p">]</span>

<span class="c1"># 예시
</span><span class="n">stock</span><span class="p">[</span><span class="s">"삼성전자"</span><span class="p">]</span> 
</code></pre></div></div>
<ul>
  <li>결과로는 85000이 출력된다.</li>
</ul>

<p><br /><br /></p>

<h2 id="4-딕셔너리-할당하기-삭제하기">4. 딕셔너리 할당하기, 삭제하기</h2>

<ul>
  <li>딕셔너리를 할당, 삭제해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 할당하기
</span><span class="n">딕셔너리</span><span class="p">[</span><span class="s">"키"</span><span class="p">]</span> <span class="o">=</span> <span class="n">데이터</span>

<span class="c1"># 예시
</span><span class="n">stock</span><span class="p">[</span><span class="s">"삼성전자"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">85000</span>

<span class="c1"># 삭제하기
</span><span class="k">del</span> <span class="n">딕셔너리</span><span class="p">[</span><span class="s">"키"</span><span class="p">]</span>

<span class="c1"># 예시
</span><span class="k">del</span> <span class="n">stock</span><span class="p">[</span><span class="s">"삼성전자"</span><span class="p">]</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="5-딕셔너리-함수">5. 딕셔너리 함수</h2>

<ul>
  <li>딕셔너리 함수를 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stock</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"삼성전자"</span> <span class="p">:</span> <span class="mi">82000</span><span class="p">,</span>
    <span class="s">"SK하이닉스"</span> <span class="p">:</span> <span class="mi">123000</span><span class="p">,</span>
    <span class="s">"NAVER"</span> <span class="p">:</span> <span class="mi">370000</span><span class="p">,</span>
    <span class="s">"카카오"</span> <span class="p">:</span> <span class="mi">133000</span>
<span class="p">}</span>

<span class="c1"># 키와 데이터 쌍을 가져오기
</span><span class="n">stock</span><span class="p">.</span><span class="n">items</span><span class="p">()</span>

<span class="c1"># 키 값을 가져오기
</span><span class="n">stock</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span>

<span class="c1"># 데이터를 가져오기
</span><span class="n">stock</span><span class="p">.</span><span class="n">values</span><span class="p">()</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="6-실습">6. 실습</h2>

<ul>
  <li>위에서 배운 내용들을 vscode로 실습해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 딕셔너리
# : 사전형태의 자료형
</span>
<span class="n">stock_a</span> <span class="o">=</span> <span class="p">{</span><span class="s">"삼성전자"</span> <span class="p">:</span> <span class="mi">82000</span><span class="p">,</span> <span class="s">"LG전자"</span> <span class="p">:</span> <span class="mi">150000</span><span class="p">}</span>

<span class="n">stock_b</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"삼성전자"</span> <span class="p">:</span> <span class="p">[</span><span class="mi">81000</span><span class="p">,</span> <span class="mi">81500</span><span class="p">,</span> <span class="mi">82000</span><span class="p">,</span> <span class="mi">81500</span><span class="p">,</span> <span class="mi">82000</span><span class="p">],</span>
    <span class="s">"LG전자"</span> <span class="p">:</span> <span class="p">(</span><span class="mi">150000</span><span class="p">,</span> <span class="mi">149000</span><span class="p">,</span> <span class="mi">148000</span><span class="p">,</span> <span class="mi">151000</span><span class="p">,</span> <span class="mi">152000</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1"># 중첩 딕셔너리
</span><span class="n">stock_c</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"삼성전자"</span> <span class="p">:</span> <span class="p">{</span>
        <span class="s">"현재가"</span> <span class="p">:</span> <span class="mi">82000</span><span class="p">,</span>
        <span class="s">"보유수량"</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="s">"매수단가"</span> <span class="p">:</span> <span class="mi">81000</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">print</span><span class="p">(</span><span class="n">stock_a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">stock_b</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">stock_c</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Tip: alt + shift + 방향키를 이용해 한 줄을 쉽게 복사할 수 있다.</li>
</ul>

<p><br /></p>

<ul>
  <li>출력 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter7</span><span class="o">/</span><span class="mf">02.</span><span class="n">딕셔너리</span><span class="p">.</span><span class="n">py</span>
<span class="p">{</span><span class="s">'삼성전자'</span><span class="p">:</span> <span class="mi">82000</span><span class="p">,</span> <span class="s">'LG전자'</span><span class="p">:</span> <span class="mi">150000</span><span class="p">}</span>
<span class="p">{</span><span class="s">'삼성전자'</span><span class="p">:</span> <span class="p">[</span><span class="mi">81000</span><span class="p">,</span> <span class="mi">81500</span><span class="p">,</span> <span class="mi">82000</span><span class="p">,</span> <span class="mi">81500</span><span class="p">,</span> <span class="mi">82000</span><span class="p">],</span> <span class="s">'LG전자'</span><span class="p">:</span> <span class="p">(</span><span class="mi">150000</span><span class="p">,</span> <span class="mi">149000</span><span class="p">,</span> <span class="mi">148000</span><span class="p">,</span> <span class="mi">151000</span><span class="p">,</span> <span class="mi">152000</span><span class="p">)}</span>
<span class="p">{</span><span class="s">'삼성전자'</span><span class="p">:</span> <span class="p">{</span><span class="s">'현재가'</span><span class="p">:</span> <span class="mi">82000</span><span class="p">,</span> <span class="s">'보유수량'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'매수단가'</span><span class="p">:</span> <span class="mi">81000</span><span class="p">}}</span>

</code></pre></div></div>

<p><br /></p>

<ul>
  <li>딕셔너리 접근/할당/삭제하기</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 딕셔너리 접근하기
</span><span class="k">print</span><span class="p">(</span><span class="n">stock_a</span><span class="p">[</span><span class="s">"삼성전자"</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">stock_c</span><span class="p">[</span><span class="s">"삼성전자"</span><span class="p">][</span><span class="s">"보유수량"</span><span class="p">])</span>

<span class="c1"># 딕셔너리 할당하기
</span><span class="n">stock_a</span><span class="p">[</span><span class="s">"삼성전자"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">85000</span>
<span class="k">print</span><span class="p">(</span><span class="n">stock_a</span><span class="p">)</span>

<span class="c1"># 딕셔너리 삭제하기
</span><span class="k">del</span> <span class="n">stock_a</span><span class="p">[</span><span class="s">"LG전자"</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">stock_a</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter7</span><span class="o">/</span><span class="mf">02.</span><span class="n">딕셔너리</span><span class="p">.</span><span class="n">py</span>
<span class="mi">82000</span>
<span class="mi">5</span>
<span class="p">{</span><span class="s">'삼성전자'</span><span class="p">:</span> <span class="mi">85000</span><span class="p">,</span> <span class="s">'LG전자'</span><span class="p">:</span> <span class="mi">150000</span><span class="p">}</span>
<span class="p">{</span><span class="s">'삼성전자'</span><span class="p">:</span> <span class="mi">85000</span><span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>딕셔너리 함수</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 딕셔너리 함수
</span><span class="n">stock_d</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"삼성전자"</span> <span class="p">:</span> <span class="mi">82000</span><span class="p">,</span>
    <span class="s">"SK하이닉스"</span> <span class="p">:</span> <span class="mi">123000</span><span class="p">,</span>
    <span class="s">"NAVER"</span> <span class="p">:</span> <span class="mi">370000</span><span class="p">,</span>
    <span class="s">"카카오"</span> <span class="p">:</span> <span class="mi">133000</span>
<span class="p">}</span>

<span class="c1"># items() : 키와 데이터 쌍
</span><span class="k">print</span><span class="p">(</span><span class="n">stock_d</span><span class="p">.</span><span class="n">items</span><span class="p">)</span>

<span class="c1"># 일반적 사용예
</span><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">stock_d</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># 0: 키, 1: 데이터
</span>
<span class="c1"># keys() : 키
</span><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">stock_d</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="c1"># values() : 데이터
</span><span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">stock_d</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter7</span><span class="o">/</span><span class="mf">02.</span><span class="n">딕셔너리</span><span class="p">.</span><span class="n">py</span>
<span class="o">&lt;</span><span class="n">built</span><span class="o">-</span><span class="ow">in</span> <span class="n">method</span> <span class="n">items</span> <span class="n">of</span> <span class="nb">dict</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x10a44ef00</span><span class="o">&gt;</span>
<span class="n">삼성전자</span>
<span class="n">SK하이닉스</span>
<span class="n">NAVER</span>
<span class="n">카카오</span>
<span class="n">삼성전자</span>
<span class="n">SK하이닉스</span>
<span class="n">NAVER</span>
<span class="n">카카오</span>
<span class="mi">82000</span>
<span class="mi">123000</span>
<span class="mi">370000</span>
<span class="mi">133000</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 딕셔너리에 대해 알아보았다. 다음 포스팅에서는 클래스와 객체에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 20일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry></feed>