<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-15T17:18:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">release: canary</title><subtitle>어쩌다 데브옵스 엔지니어가 된 문과생의 기록용 블로그</subtitle><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><entry><title type="html">[Kubernetes/CKA]Lightning Lab 1 - kubeadm으로 클러스터 업그레이드</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-1/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 1 - kubeadm으로 클러스터 업그레이드" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-1</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-1/"><![CDATA[<p><br /><br /></p>

<p>유데미(Udemy) 에서 구입한 CKA 강의 수강을 완료하고 마지막 연습문제를 풀고 있는데, 챕터별 연습문제와는 다르게 답안이 제공되지 않아 기록을 위해 문제 풀이 과정을 블로그에 올려두려 한다.</p>

<p><br /></p>

<p>참고로 아래의 문제 요건은 편의를 위해 한국어로 번역한 것이고, 강의에서 제공하는 시험 및 실제 시험은 100% 영어로 출제된다.</p>

<p><br /><br /></p>

<h1 id="1-kubeadm-으로-클러스터-업그레이드-하기">1. Kubeadm 으로 클러스터 업그레이드 하기</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li>쿠버네티스 버전을 현재 <code class="language-plaintext highlighter-rouge">1.19</code> 버전에서 <code class="language-plaintext highlighter-rouge">1.20.0</code> 로 업그레이드(<code class="language-plaintext highlighter-rouge">kubeadm</code> 툴을 이용)</li>
  <li>업그레이드는 마스터 노드부터 한번에 한 노드씩 이루어져야 한다.</li>
  <li>다운타임(downtime)을 최소화하기위해, 각 노드를 업그레이드 하기 전 <code class="language-plaintext highlighter-rouge">gold-nginx</code> 디플로이먼트가 대체 노드로 스케줄링 되어야한다.</li>
  <li><code class="language-plaintext highlighter-rouge">controlplane</code> 노드를 먼저 업그레이드</li>
  <li><code class="language-plaintext highlighter-rouge">node01</code> 노드를 업그레이드 전 드레인(drain)</li>
  <li><code class="language-plaintext highlighter-rouge">gold-nginx</code> 디플로이먼트들의 파드는 <code class="language-plaintext highlighter-rouge">controlplane</code> 에 스케줄링 되어야한다.</li>
  <li>채점 포인트
    <ul>
      <li>클러스터가 업그레이드 되었는가?</li>
      <li>‘gold-nginx’의 파드들이 컨트롤플레인에 스케줄링 되었는가?</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li>쿠버네티스 공식문서에서 ‘클러스터 업그레이드’를 검색 &gt; <a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">kubeadm 클러스터 업그레이드 공식문서</a> 접속</li>
  <li>문제 요건대로 쿠버네티스 1.19버전에서 1.20.0 버전으로 업그레이드 하는 문서로 이동</li>
  <li>문서에 나와있는 대로 apt update로 패키지 관리자 업데이트</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# apt update
Hit:1 https://packages.cloud.google.com/apt kubernetes-xenial InRelease         
Hit:2 https://download.docker.com/linux/ubuntu bionic InRelease                 
Hit:3 http://security.ubuntu.com/ubuntu bionic-security InRelease               
Hit:4 http://archive.ubuntu.com/ubuntu bionic InRelease                         
Hit:5 http://archive.ubuntu.com/ubuntu bionic-updates InRelease
Hit:6 http://archive.ubuntu.com/ubuntu bionic-backports InRelease
Reading package lists... Done
Building dependency tree       
Reading state information... Done
74 packages can be upgraded. Run <span class="s1">'apt list --upgradable'</span> to see them.
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>apt-cache madison kubeadm으로 kubeadm으로 업그레이드 버전정보를 확인 (문제에서는 1.20.0으로 지정되어있어 생략 가능)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# apt-cache madison kubeadm
   kubeadm |  1.24.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.3-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.2-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.1-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.23.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.9-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.7-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.3-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.2-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.1-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.22.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.21.12-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.21.11-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.21.10-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.9-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.7-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.6-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.5-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.4-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.3-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.2-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.1-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.21.0-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.15-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.14-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.13-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.12-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.11-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm | 1.20.10-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.20.9-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.20.8-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
   kubeadm |  1.20.7-00 | http://apt.kubernetes.io kubernetes-xenial/main amd64 Packages
<span class="o">(</span>이하 생략<span class="o">)</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="1-컨트롤-플레인-노드-업그레이드">1. <strong>**컨트롤 플레인 노드 업그레이드<a href="https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#%EC%BB%A8%ED%8A%B8%EB%A1%A4-%ED%94%8C%EB%A0%88%EC%9D%B8-%EB%85%B8%EB%93%9C-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C"></a></strong></h3>

<ul>
  <li>쿠버네티스 공식문서에서 업그레이드 명령어를 복사하고, kubeadm의 전체 버전명을 정확하게 수정한뒤 붙여넣기 한다(<code class="language-plaintext highlighter-rouge">kubeadm=1.20.x-00</code> ⇒ <code class="language-plaintext highlighter-rouge">kubeadm=1.20.0-00</code>).</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubeadm <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubeadm</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubeadm
</code></pre></div></div>

<ul>
  <li><strong>Tip: 현재 controlplane에서 작업하고있는지 반드시 확인 후 업그레이드 작업을 시작한다.</strong></li>
</ul>

<p><br /></p>

<ul>
  <li>다운로드 하려는 버전이 잘 다운로드 되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubeadm version
kubeadm version: &amp;version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"20"</span>, GitVersion:<span class="s2">"v1.20.0"</span>, GitCommit:<span class="s2">"af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38"</span>, GitTreeState:<span class="s2">"clean"</span>, BuildDate:<span class="s2">"2020-12-08T17:57:36Z"</span>, GoVersion:<span class="s2">"go1.15.5"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>업그레이드 계획을 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubeadm upgrade plan
<span class="o">[</span>upgrade/config] Making sure the configuration is correct:
<span class="o">[</span>upgrade/config] Reading configuration from the cluster...
<span class="o">[</span>upgrade/config] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks.
<span class="o">[</span>upgrade] Running cluster health checks
<span class="o">[</span>upgrade] Fetching available versions to upgrade to
<span class="o">[</span>upgrade/versions] Cluster version: v1.19.0
<span class="o">[</span>upgrade/versions] kubeadm version: v1.20.0
I0515 01:44:55.808176   12296 version.go:251] remote version is much newer: v1.24.0<span class="p">;</span> falling back to: stable-1.20
<span class="o">[</span>upgrade/versions] Latest stable version: v1.20.15
<span class="o">[</span>upgrade/versions] Latest stable version: v1.20.15
<span class="o">[</span>upgrade/versions] Latest version <span class="k">in </span>the v1.19 series: v1.19.16
<span class="o">[</span>upgrade/versions] Latest version <span class="k">in </span>the v1.19 series: v1.19.16

Components that must be upgraded manually after you have upgraded the control plane with <span class="s1">'kubeadm upgrade apply'</span>:
COMPONENT   CURRENT       AVAILABLE
kubelet     2 x v1.19.0   v1.19.16

Upgrade to the latest version <span class="k">in </span>the v1.19 series:

COMPONENT                 CURRENT   AVAILABLE
kube-apiserver            v1.19.0   v1.19.16
kube-controller-manager   v1.19.0   v1.19.16
kube-scheduler            v1.19.0   v1.19.16
kube-proxy                v1.19.0   v1.19.16
CoreDNS                   1.7.0     1.7.0
etcd                      3.4.9-1   3.4.9-1

You can now apply the upgrade by executing the following <span class="nb">command</span>:

        kubeadm upgrade apply v1.19.16

_____________________________________________________________________

Components that must be upgraded manually after you have upgraded the control plane with <span class="s1">'kubeadm upgrade apply'</span>:
COMPONENT   CURRENT       AVAILABLE
kubelet     2 x v1.19.0   v1.20.15

Upgrade to the latest stable version:

COMPONENT                 CURRENT   AVAILABLE
kube-apiserver            v1.19.0   v1.20.15
kube-controller-manager   v1.19.0   v1.20.15
kube-scheduler            v1.19.0   v1.20.15
kube-proxy                v1.19.0   v1.20.15
CoreDNS                   1.7.0     1.7.0
etcd                      3.4.9-1   3.4.13-0

You can now apply the upgrade by executing the following <span class="nb">command</span>:

        kubeadm upgrade apply v1.20.15

Note: Before you can perform this upgrade, you have to update kubeadm to v1.20.15.

_____________________________________________________________________

The table below shows the current state of component configs as understood by this version of kubeadm.
Configs that have a <span class="s2">"yes"</span> mark <span class="k">in </span>the <span class="s2">"MANUAL UPGRADE REQUIRED"</span> column require manual config upgrade or
resetting to kubeadm defaults before a successful upgrade can be performed. The version to manually
upgrade to is denoted <span class="k">in </span>the <span class="s2">"PREFERRED VERSION"</span> column.

API GROUP                 CURRENT VERSION   PREFERRED VERSION   MANUAL UPGRADE REQUIRED
kubeproxy.config.k8s.io   v1alpha1          v1alpha1            no
kubelet.config.k8s.io     v1beta1           v1beta1             no
_____________________________________________________________________
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>kubeadm 업그레이드 명령어(<code class="language-plaintext highlighter-rouge">sudo kubeadm upgrade apply v1.20.x</code> )를 복사한 뒤 올바른 버전(<code class="language-plaintext highlighter-rouge">sudo kubeadm upgrade apply v1.20.0</code>)으로 변경한 후 붙여넣기한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm upgrade apply v1.20.0 <span class="nt">-y</span>
</code></pre></div></div>

<ul>
  <li><strong>Tip: 업그레이드 명령어 뒤에 -y옵션을 주어 추가 다운로드에 대해 모두 Yes로 반응하도록 설정하면 편리</strong></li>
  <li><strong>Tipe: 업그레이드 완료 후 반드시 아래와 같이 SUCCESS 메시지가 출력되었는지 확인 한다.</strong></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>upgrade/successful] SUCCESS! Your cluster was upgraded to <span class="s2">"v1.20.0"</span><span class="nb">.</span> Enjoy!

<span class="o">[</span>upgrade/kubelet] Now that your control plane is upgraded, please proceed with upgrading your kubelets <span class="k">if </span>you haven<span class="s1">'t already done so.
</span></code></pre></div></div>

<p><br /></p>

<ul>
  <li>컨트롤 플레인 노드를 drain(모든 pod를 해당 노드에서 unscheduling)한다.
    <ul>
      <li>명령어 복사(<code class="language-plaintext highlighter-rouge">kubectl drain &lt;node-to-drain&gt; --ignore-daemonsets</code>) 후 대상 노드를 수정한 뒤 붙여넣기 한다.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl drain controlplane <span class="nt">--ignore-daemonsets</span>
node/controlplane cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/kube-proxy-hpgrg, kube-system/weave-net-mp6bh
evicting pod admin2406/deploy3-5b6cff588b-5kxdh
evicting pod admin2406/deploy1-5799f5869d-jpgfz
evicting pod admin2406/deploy2-64885b458-jmvd5
evicting pod kube-system/coredns-74ff55c5b-j7k25
evicting pod admin2406/deploy5-78b86b74f-9rxj7
evicting pod default/gold-nginx-847f89b5b-cfrr8
evicting pod kube-system/coredns-74ff55c5b-58v24
evicting pod admin2406/deploy4-7869d88d64-xdcx9
I0515 01:54:52.043205   22973 request.go:645] Throttling request took 1.005358262s, request: GET:https://controlplane:6443/api/v1/namespaces/kube-system/pods/coredns-74ff55c5b-j7k25
pod/deploy2-64885b458-jmvd5 evicted
pod/deploy1-5799f5869d-jpgfz evicted
pod/deploy4-7869d88d64-xdcx9 evicted
pod/gold-nginx-847f89b5b-cfrr8 evicted
pod/coredns-74ff55c5b-58v24 evicted
pod/deploy5-78b86b74f-9rxj7 evicted
pod/coredns-74ff55c5b-j7k25 evicted
pod/deploy3-5b6cff588b-5kxdh evicted
node/controlplane evicted
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>쿠버네티스 공식문서에서 kubelet과 kubectl 업그레이드 명령어를 복사한 뒤, 각각 올바른 버전으로 수정 후 명령어를 실행한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubelet kubectl <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubelet</span><span class="o">=</span>1.20.0-00 <span class="nv">kubectl</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubelet kubectl
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>아래 명령어를 사용해 kubelet을 다시 시작한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart kubelet
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>uncordon 명령어(대상 노드이름으로 수정)를 이용해 노드에 파드를 다시 스케줄링한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl uncordon controlplane
node/controlplane uncordoned
</code></pre></div></div>

<p><br /></p>

<h3 id="워커-노드-업그레이드"><strong>워커 노드 업그레이드<a href="https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/#%EC%9B%8C%EC%BB%A4-%EB%85%B8%EB%93%9C-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C"></a></strong></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get nodes</code> 명령어(아래 예시에서는 축약어 사용)로 대상 노드를 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get nodes 
NAME           STATUS   ROLES                  AGE    VERSION
controlplane   Ready    control-plane,master   104m   v1.20.0
node01         Ready    &lt;none&gt;                 103m   v1.19.0
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>ssh를 이용해 node01로 접속한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# ssh node01
Welcome to Ubuntu 18.04.5 LTS <span class="o">(</span>GNU/Linux 5.4.0-1072-gcp x86_64<span class="o">)</span>

 <span class="k">*</span> Documentation:  https://help.ubuntu.com
 <span class="k">*</span> Management:     https://landscape.canonical.com
 <span class="k">*</span> Support:        https://ubuntu.com/advantage
This system has been minimized by removing packages and content that are
not required on a system that <span class="nb">users </span><span class="k">do </span>not log into.

To restore this content, you can run the <span class="s1">'unminimize'</span> command.
root@node01:~#
</code></pre></div></div>

<ul>
  <li>controlplane에서 node01로 잘 접속되었는지 확인한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>마스터노드 업그레이드와 같은 요령으로 kubeadm 버전을 업데이트한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubeadm <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubeadm</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubeadm
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>kubeadm 업그레이드 명령어를 호출해 로컬 kubelet 구성을 업그레이드한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node01:~# <span class="nb">sudo </span>kubeadm upgrade node
<span class="o">[</span>upgrade] Reading configuration from the cluster...
<span class="o">[</span>upgrade] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span>
<span class="o">[</span>preflight] Running pre-flight checks
<span class="o">[</span>preflight] Skipping prepull. Not a control plane node.
<span class="o">[</span>upgrade] Skipping phase. Not a control plane node.
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>upgrade] The configuration <span class="k">for </span>this node was successfully updated!
<span class="o">[</span>upgrade] Now you should go ahead and upgrade the kubelet package using your package manager.
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>exit 명령어로 마스터 노드로 돌아간 뒤, 워커노드를 drain한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node01:~# <span class="nb">exit
logout
</span>Connection to node01 closed.
root@controlplane:~# kubectl drain node01 <span class="nt">--ignore-daemonsets</span>
node/node01 cordoned
WARNING: ignoring DaemonSet-managed Pods: kube-system/kube-proxy-rp74d, kube-system/weave-net-n5989
node/node01 drained
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>ssh로 워커노드(node01)로 재접속해 kubelet, kubectl을 업그레이드한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-mark unhold kubelet kubectl <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nv">kubelet</span><span class="o">=</span>1.20.0-00 <span class="nv">kubectl</span><span class="o">=</span>1.20.0-00 <span class="o">&amp;&amp;</span> <span class="se">\</span>
apt-mark hold kubelet kubectl
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>kubelet을 재시작한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@node01:~# <span class="nb">sudo </span>systemctl daemon-reload
root@node01:~# <span class="nb">sudo </span>systemctl restart kubelet
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>exit 명령어로 마스터노드로 돌아가 워커노드(node01)에 uncordon 명령어를 실행해준다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl uncordon node01
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get nodes</code> (예시에서는 축약어 사용)명령어를 사용해 v1.20.0버전으로 업데이트가 잘 수행되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get nodes 
NAME           STATUS   ROLES                  AGE    VERSION
controlplane   Ready    control-plane,master   112m   v1.20.0
node01         Ready    &lt;none&gt;                 111m   v1.20.0
</code></pre></div></div>

<ul>
  <li>문제에서 제시되었던 파드(POD)가 controlplane에 스케줄링 되어있는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get pod gold-nginx-847f89b5b-dcdkr <span class="nt">-o</span> wide
NAME                         READY   STATUS    RESTARTS   AGE   IP          NODE           NOMINATED NODE   READINESS GATES
gold-nginx-847f89b5b-dcdkr   1/1     Running   0          17m   10.50.0.3   controlplane   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p><br /></p>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>kubeadm 클러스터 업그레이드: <a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">https://kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/</a>
    <ul>
      <li><a href="https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">https://v1-20.docs.kubernetes.io/ko/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[클러스터를 업그레이드 할 경우에는 마스터노드, 워커노드 순으로 각각 업그레이드 한다]]></summary></entry><entry><title type="html">[Kubernetes/CKA]Lightning Lab 2 - JSON PATH 사용하기</title><link href="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-2/" rel="alternate" type="text/html" title="[Kubernetes/CKA]Lightning Lab 2 - JSON PATH 사용하기" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-2</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-CKA-Lightning-Lab-2/"><![CDATA[<p><br /><br /></p>

<h1 id="2-json-path-사용하기">2. JSON PATH 사용하기</h1>

<h2 id="문제-요건">[문제 요건]</h2>

<ul>
  <li>다음 포맷에 맞춰 <code class="language-plaintext highlighter-rouge">admin2406</code> 네임스페이스의 모든 디플로이먼트를 출력</li>
  <li><code class="language-plaintext highlighter-rouge">DEPLOYMENT CONTAINER_IMAGE READY_REPLICAS NAMESPACE&lt;deployment name&gt; &lt;container image used&gt; &lt;ready replica count&gt; &lt;Namespace&gt;</code>.</li>
  <li>예시: <code class="language-plaintext highlighter-rouge">DEPLOYMENT CONTAINER_IMAGE READY_REPLICAS NAMESPACEdeploy0 nginx:alpine 1 admin2406</code></li>
  <li>데이터들은 <code class="language-plaintext highlighter-rouge">deployment name</code>을 기준으로 오름차순으로 정렬</li>
  <li>채점 기준: 제시된 작업이 완료되었는가?</li>
</ul>

<p><br /></p>

<h2 id="내-풀이">[내 풀이]</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kubectl get deployment -n admin2406 -o json</code> 으로 JSON 형식을 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get deployments.apps <span class="nt">-n</span> admin2406        
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
deploy1   1/1     1            1           48m
deploy2   1/1     1            1           48m
deploy3   1/1     1            1           48m
deploy4   1/1     1            1           48m
deploy5   1/1     1            1           48m
</code></pre></div></div>

<p><br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get deployments.apps <span class="nt">-n</span> admin2406 deploy1 <span class="nt">-o</span> json
<span class="o">{</span>
    <span class="s2">"apiVersion"</span>: <span class="s2">"apps/v1"</span>,
    <span class="s2">"kind"</span>: <span class="s2">"Deployment"</span>,
    <span class="s2">"metadata"</span>: <span class="o">{</span>
        <span class="s2">"annotations"</span>: <span class="o">{</span>
            <span class="s2">"deployment.kubernetes.io/revision"</span>: <span class="s2">"1"</span>
        <span class="o">}</span>,
        <span class="s2">"creationTimestamp"</span>: <span class="s2">"2022-05-15T01:28:00Z"</span>,
        <span class="s2">"generation"</span>: 1,
        <span class="s2">"labels"</span>: <span class="o">{</span>
            <span class="s2">"app"</span>: <span class="s2">"deploy1"</span>
        <span class="o">}</span>,
        <span class="s2">"managedFields"</span>: <span class="o">[</span>
            <span class="o">{</span>
                <span class="s2">"apiVersion"</span>: <span class="s2">"apps/v1"</span>,
                <span class="s2">"fieldsType"</span>: <span class="s2">"FieldsV1"</span>,
                <span class="s2">"fieldsV1"</span>: <span class="o">{</span>
                    <span class="s2">"f:metadata"</span>: <span class="o">{</span>
                        <span class="s2">"f:labels"</span>: <span class="o">{</span>
                            <span class="s2">"."</span>: <span class="o">{}</span>,
                            <span class="s2">"f:app"</span>: <span class="o">{}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>,
                    <span class="s2">"f:spec"</span>: <span class="o">{</span>
                        <span class="s2">"f:progressDeadlineSeconds"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:replicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:revisionHistoryLimit"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:selector"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:strategy"</span>: <span class="o">{</span>
                            <span class="s2">"f:rollingUpdate"</span>: <span class="o">{</span>
                                <span class="s2">"."</span>: <span class="o">{}</span>,
                                <span class="s2">"f:maxSurge"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:maxUnavailable"</span>: <span class="o">{}</span>
                            <span class="o">}</span>,
                            <span class="s2">"f:type"</span>: <span class="o">{}</span>
                        <span class="o">}</span>,
                        <span class="s2">"f:template"</span>: <span class="o">{</span>
                            <span class="s2">"f:metadata"</span>: <span class="o">{</span>
                                <span class="s2">"f:labels"</span>: <span class="o">{</span>
                                    <span class="s2">"."</span>: <span class="o">{}</span>,
                                    <span class="s2">"f:app"</span>: <span class="o">{}</span>
                                <span class="o">}</span>
                            <span class="o">}</span>,
                            <span class="s2">"f:spec"</span>: <span class="o">{</span>
                                <span class="s2">"f:containers"</span>: <span class="o">{</span>
                                    <span class="s2">"k:{</span><span class="se">\"</span><span class="s2">name</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">nginx</span><span class="se">\"</span><span class="s2">}"</span>: <span class="o">{</span>
                                        <span class="s2">"."</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:image"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:imagePullPolicy"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:name"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:resources"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:terminationMessagePath"</span>: <span class="o">{}</span>,
                                        <span class="s2">"f:terminationMessagePolicy"</span>: <span class="o">{}</span>
                                    <span class="o">}</span>
                                <span class="o">}</span>,
                                <span class="s2">"f:dnsPolicy"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:restartPolicy"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:schedulerName"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:securityContext"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:terminationGracePeriodSeconds"</span>: <span class="o">{}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>,
                <span class="s2">"manager"</span>: <span class="s2">"kubectl-create"</span>,
                <span class="s2">"operation"</span>: <span class="s2">"Update"</span>,
                <span class="s2">"time"</span>: <span class="s2">"2022-05-15T01:28:00Z"</span>
            <span class="o">}</span>,
            <span class="o">{</span>
                <span class="s2">"apiVersion"</span>: <span class="s2">"apps/v1"</span>,
                <span class="s2">"fieldsType"</span>: <span class="s2">"FieldsV1"</span>,
                <span class="s2">"fieldsV1"</span>: <span class="o">{</span>
                    <span class="s2">"f:metadata"</span>: <span class="o">{</span>
                        <span class="s2">"f:annotations"</span>: <span class="o">{</span>
                            <span class="s2">"."</span>: <span class="o">{}</span>,
                            <span class="s2">"f:deployment.kubernetes.io/revision"</span>: <span class="o">{}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>,
                    <span class="s2">"f:status"</span>: <span class="o">{</span>
                        <span class="s2">"f:availableReplicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:conditions"</span>: <span class="o">{</span>
                            <span class="s2">"."</span>: <span class="o">{}</span>,
                            <span class="s2">"k:{</span><span class="se">\"</span><span class="s2">type</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Available</span><span class="se">\"</span><span class="s2">}"</span>: <span class="o">{</span>
                                <span class="s2">"."</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastTransitionTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastUpdateTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:message"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:reason"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:status"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:type"</span>: <span class="o">{}</span>
                            <span class="o">}</span>,
                            <span class="s2">"k:{</span><span class="se">\"</span><span class="s2">type</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Progressing</span><span class="se">\"</span><span class="s2">}"</span>: <span class="o">{</span>
                                <span class="s2">"."</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastTransitionTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:lastUpdateTime"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:message"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:reason"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:status"</span>: <span class="o">{}</span>,
                                <span class="s2">"f:type"</span>: <span class="o">{}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>,
                        <span class="s2">"f:observedGeneration"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:readyReplicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:replicas"</span>: <span class="o">{}</span>,
                        <span class="s2">"f:updatedReplicas"</span>: <span class="o">{}</span>
                    <span class="o">}</span>
                <span class="o">}</span>,
                <span class="s2">"manager"</span>: <span class="s2">"kube-controller-manager"</span>,
                <span class="s2">"operation"</span>: <span class="s2">"Update"</span>,
                <span class="s2">"time"</span>: <span class="s2">"2022-05-15T01:59:02Z"</span>
            <span class="o">}</span>
        <span class="o">]</span>,
        <span class="s2">"name"</span>: <span class="s2">"deploy1"</span>,
        <span class="s2">"namespace"</span>: <span class="s2">"admin2406"</span>,
        <span class="s2">"resourceVersion"</span>: <span class="s2">"15003"</span>,
        <span class="s2">"uid"</span>: <span class="s2">"09e6b6df-f757-4558-a6a9-1ce8bd1138b7"</span>
    <span class="o">}</span>,
    <span class="s2">"spec"</span>: <span class="o">{</span>
        <span class="s2">"progressDeadlineSeconds"</span>: 600,
        <span class="s2">"replicas"</span>: 1,
        <span class="s2">"revisionHistoryLimit"</span>: 10,
        <span class="s2">"selector"</span>: <span class="o">{</span>
            <span class="s2">"matchLabels"</span>: <span class="o">{</span>
                <span class="s2">"app"</span>: <span class="s2">"deploy1"</span>
            <span class="o">}</span>
        <span class="o">}</span>,
        <span class="s2">"strategy"</span>: <span class="o">{</span>
            <span class="s2">"rollingUpdate"</span>: <span class="o">{</span>
                <span class="s2">"maxSurge"</span>: <span class="s2">"25%"</span>,
                <span class="s2">"maxUnavailable"</span>: <span class="s2">"25%"</span>
            <span class="o">}</span>,
            <span class="s2">"type"</span>: <span class="s2">"RollingUpdate"</span>
        <span class="o">}</span>,
        <span class="s2">"template"</span>: <span class="o">{</span>
            <span class="s2">"metadata"</span>: <span class="o">{</span>
                <span class="s2">"creationTimestamp"</span>: null,
                <span class="s2">"labels"</span>: <span class="o">{</span>
                    <span class="s2">"app"</span>: <span class="s2">"deploy1"</span>
                <span class="o">}</span>
            <span class="o">}</span>,
            <span class="s2">"spec"</span>: <span class="o">{</span>
                <span class="s2">"containers"</span>: <span class="o">[</span>
                    <span class="o">{</span>
                        <span class="s2">"image"</span>: <span class="s2">"nginx"</span>,
                        <span class="s2">"imagePullPolicy"</span>: <span class="s2">"Always"</span>,
                        <span class="s2">"name"</span>: <span class="s2">"nginx"</span>,
                        <span class="s2">"resources"</span>: <span class="o">{}</span>,
                        <span class="s2">"terminationMessagePath"</span>: <span class="s2">"/dev/termination-log"</span>,
                        <span class="s2">"terminationMessagePolicy"</span>: <span class="s2">"File"</span>
                    <span class="o">}</span>
                <span class="o">]</span>,
                <span class="s2">"dnsPolicy"</span>: <span class="s2">"ClusterFirst"</span>,
                <span class="s2">"restartPolicy"</span>: <span class="s2">"Always"</span>,
                <span class="s2">"schedulerName"</span>: <span class="s2">"default-scheduler"</span>,
                <span class="s2">"securityContext"</span>: <span class="o">{}</span>,
                <span class="s2">"terminationGracePeriodSeconds"</span>: 30
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>,
    <span class="s2">"status"</span>: <span class="o">{</span>
        <span class="s2">"availableReplicas"</span>: 1,
        <span class="s2">"conditions"</span>: <span class="o">[</span>
            <span class="o">{</span>
                <span class="s2">"lastTransitionTime"</span>: <span class="s2">"2022-05-15T01:28:00Z"</span>,
                <span class="s2">"lastUpdateTime"</span>: <span class="s2">"2022-05-15T01:28:18Z"</span>,
                <span class="s2">"message"</span>: <span class="s2">"ReplicaSet </span><span class="se">\"</span><span class="s2">deploy1-5799f5869d</span><span class="se">\"</span><span class="s2"> has successfully progressed."</span>,
                <span class="s2">"reason"</span>: <span class="s2">"NewReplicaSetAvailable"</span>,
                <span class="s2">"status"</span>: <span class="s2">"True"</span>,
                <span class="s2">"type"</span>: <span class="s2">"Progressing"</span>
            <span class="o">}</span>,
            <span class="o">{</span>
                <span class="s2">"lastTransitionTime"</span>: <span class="s2">"2022-05-15T01:59:02Z"</span>,
                <span class="s2">"lastUpdateTime"</span>: <span class="s2">"2022-05-15T01:59:02Z"</span>,
                <span class="s2">"message"</span>: <span class="s2">"Deployment has minimum availability."</span>,
                <span class="s2">"reason"</span>: <span class="s2">"MinimumReplicasAvailable"</span>,
                <span class="s2">"status"</span>: <span class="s2">"True"</span>,
                <span class="s2">"type"</span>: <span class="s2">"Available"</span>
            <span class="o">}</span>
        <span class="o">]</span>,
        <span class="s2">"observedGeneration"</span>: 1,
        <span class="s2">"readyReplicas"</span>: 1,
        <span class="s2">"replicas"</span>: 1,
        <span class="s2">"updatedReplicas"</span>: 1
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>custom-column을 이용한 간단한 쿼리문을 작성한 뒤 잘 작동하는지 테스트해본다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# k get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name
DEPLOYMENT
deploy1
deploy2
deploy3
deploy4
deploy5
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>위에서 출력했던 json 포맷을 잘 참고하여 나머지 열에 대한 쿼리도 작성해준다.
    <ul>
      <li>Tip: 열과 열을 구분하기 위해서는 <code class="language-plaintext highlighter-rouge">,</code> (콤마)를 사용한다.</li>
      <li>Tip: 각 항목이 잘 출력되었는지 확인하기 위해 kubectl get deployment 명령어를 잘 활용한다(예: CONTAINER_IMAGE가 잘 출력되었는지 확인 <code class="language-plaintext highlighter-rouge">kubectl get deployments -n admin2406</code>)</li>
      <li>Tip: 요소가 딕셔너리가 아닌 리스트 형태일 경우(예: containers) 반드시 출력할 리스트 요소를 지정해주어야한다(예: containers ⇒ (X), containers[0] ⇒ (O), containers[*] ⇒ (O)</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[<span class="k">*</span><span class="o">]</span>.image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace
DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy1      nginx             1                admin2406
deploy2      nginx:alpine      1                admin2406
deploy3      nginx:1.16        1                admin2406
deploy4      nginx:1.17        1                admin2406
deploy5      nginx:latest      1                admin2406
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--sort-by=</code> 옵션으로 리스트를 문제 요건대로 정렬한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[<span class="k">*</span><span class="o">]</span>.image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace <span class="nt">--sort-by</span><span class="o">=</span>.metadata.name
DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy1      nginx             1                admin2406
deploy2      nginx:alpine      1                admin2406
deploy3      nginx:1.16        1                admin2406
deploy4      nginx:1.17        1                admin2406
deploy5      nginx:latest      1                admin2406
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>문제 요건대로 <code class="language-plaintext highlighter-rouge">/opt/admin2406_data</code> 에 쿼리 결과를 저장한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# kubectl get deployments.apps <span class="nt">-n</span> admin2406 <span class="nt">-o</span><span class="o">=</span>custom-columns<span class="o">=</span>DEPLOYMENT:.metadata.name,CONTAINER_IMAGE:.spec.template.spec.containers[<span class="k">*</span><span class="o">]</span>.image,READY_REPLICAS:.status.readyReplicas,NAMESPACE:.metadata.namespace <span class="nt">--sort-by</span><span class="o">=</span>.metadata.name <span class="o">&gt;</span> /opt/admin2406_data
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>데이터가 잘 저장되었는지 확인한다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@controlplane:~# <span class="nb">cat</span> /opt/admin2406_data
DEPLOYMENT   CONTAINER_IMAGE   READY_REPLICAS   NAMESPACE
deploy1      nginx             1                admin2406
deploy2      nginx:alpine      1                admin2406
deploy3      nginx:1.16        1                admin2406
deploy4      nginx:1.17        1                admin2406
deploy5      nginx:latest      1                admin2406
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="참고-url">[참고 URL]</h2>

<ul>
  <li>kubectl 치트 시트 - custom-column: <a href="https://kubernetes.io/ko/docs/reference/kubectl/cheatsheet/">https://kubernetes.io/ko/docs/reference/kubectl/cheatsheet/</a></li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스자격증" /><category term="유데미강의추천" /><category term="유데미쿠버네티스" /><category term="cka연습문제풀이" /><category term="cka덤프" /><category term="cka기출문제" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[JSON PATH를 사용하는 문제의 경우, custom-column을 이용하면 편리하다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 28일차</title><link href="http://localhost:4000/programming/Python-Day28/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 28일차" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day28</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day28/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 9-3. 패키지를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo1.jpg" alt="2022-05-15-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo2.jpg" alt="2022-05-15-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="03-패키지">03. 패키지</h1>

<h2 id="1-패키지의-개념">1. 패키지의 개념</h2>

<ul>
  <li>관련있는 모듈을 <strong>하나의 폴더</strong>로 구성해 놓은 것.</li>
</ul>

<p><br /><br /></p>

<h2 id="2-패키지-만들고-사용하기">2. 패키지 만들고, 사용하기</h2>

<ul>
  <li>디렉토리(=폴더) 구조</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="n">startcoding</span> <span class="o">/</span> 
    <span class="n">unit</span> <span class="o">/</span>
        <span class="n">__init__</span><span class="p">.</span><span class="n">py</span>
        <span class="n">character</span><span class="p">.</span><span class="n">py</span>
        <span class="n">item</span><span class="p">.</span><span class="n">py</span>
        <span class="n">monster</span><span class="p">.</span><span class="n">py</span>
    <span class="n">main</span><span class="p">.</span><span class="n">py</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>VScode로 이동해 Chapter9 폴더 밑에 startcoding, startcoding 하위에 unit 폴더를 생성 및 위 디렉토리 구조대로 파일생성
    <ul>
      <li>Tip: unit 폴더 생성 시 <code class="language-plaintext highlighter-rouge">startcoding/unit</code> 이라는 컴팩트폴더 형식으로 폴더가 표시되는데, 이를 해제하려면 <code class="language-plaintext highlighter-rouge">File &gt; Preference &gt; Settings</code> (MacOS의 경우 <code class="language-plaintext highlighter-rouge">Code &gt; Preference &gt; Settings</code> ) 에 들어가 <code class="language-plaintext highlighter-rouge">compact</code> 라고 검색한 뒤, <code class="language-plaintext highlighter-rouge">Explorer: Compact Folders</code> 라는 항목의 체크박스를 해제해주면 폴더가 트리형식으로 표시된다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>디렉토리 및 파일 생성이 완료되면 이런 형태가 된다.</p>

    <p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo3.png" alt="2022-05-15-Python-Photo3" /></p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>unit 패키지 안의 모듈부터 작성해보자. 먼저 <code class="language-plaintext highlighter-rouge">character.py</code>를 아주 간단하게 Print 문으로만 구성해 작성해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"this is a character module"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>item, monster 모듈도 동일 요령으로 작성하자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"this is a item module"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"this is a monster module"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>이렇게 작성한 위 모듈들을 main.py에서 불러오자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. import 패키지.모듈
</span><span class="kn">import</span> <span class="nn">unit.character</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>“unit.character” is not accessed: Import “unit.character” could not be resolved Pylance(reportMissingImports) 라는 에러메시지가 발생
    <ul>
      <li>startcoding이라는 새로운 폴더를 만들었기 때문</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">File &gt; Preference &gt; Settings</code> (MacOS의 경우 <code class="language-plaintext highlighter-rouge">Code &gt; Preference &gt; Settings</code> ) 에서 아래 빨간색 박스로 표시한 아이콘을 클릭</p>

        <p><img src="/assets/images/2022-05-15-Python-Photo/2022-05-15-Python-Photo4.png" alt="2022-05-15-Python-Photo4" /></p>
      </li>
    </ul>

    <p><br /></p>

    <ul>
      <li>settings.json 파일에서 “python.analysis.extraPaths” 에 startcoding으로 향하는 경로를 추가한다.</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">{</span>
      <span class="s">"python.pythonPath"</span><span class="p">:</span> <span class="s">"/anaconda3/bin/python"</span><span class="p">,</span>
      <span class="s">"editor.unicodeHighlight.allowedCharacters"</span><span class="p">:</span> <span class="p">{</span>
          <span class="s">" "</span><span class="p">:</span> <span class="n">true</span>
      <span class="p">},</span>
      <span class="s">"python.analysis.extraPaths"</span><span class="p">:</span> <span class="p">[</span><span class="s">"./myvenv/Chapter9"</span><span class="p">,</span> <span class="s">"./myvenv/Chapter9/startcoding"</span><span class="p">],</span>
      <span class="s">"liveSassCompile.settings.formats"</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span>
              <span class="s">"format"</span><span class="p">:</span> <span class="s">"expanded"</span><span class="p">,</span>
              <span class="s">"extensionName"</span><span class="p">:</span> <span class="s">".css"</span><span class="p">,</span>
              <span class="s">"savePath"</span><span class="p">:</span> <span class="s">"/assets/css/"</span>
          <span class="p">}</span>
      <span class="p">],</span>
      <span class="s">"pasteImage.basePath"</span><span class="p">:</span> <span class="s">"${currentFileDir}/images/"</span><span class="p">,</span>
      <span class="s">"pasteImage.prefix"</span><span class="p">:</span> <span class="s">"./"</span><span class="p">,</span>
      <span class="s">"liveServer.settings.donotShowInfoMsg"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
      <span class="s">"editor.fontSize"</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
      <span class="s">"window.zoomLevel"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="s">"explorer.compactFolders"</span><span class="p">:</span> <span class="n">false</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /><br /></p>

<h3 id="1-import-패키지모듈-방식">1. import 패키지.모듈 방식</h3>

<ul>
  <li>이어서 main.py 에서 import 를 이용해 character 모듈을 호출해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. import 패키지.모듈
</span><span class="kn">import</span> <span class="nn">unit.character</span>
<span class="n">unit</span><span class="p">.</span><span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과: unit.character의 test 함수가 잘 실행되는 것을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">character</span> <span class="n">module</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="2-from-패키지-import-모듈-방식-사용빈도-높음">2. from 패키지 import 모듈 방식 (사용빈도 높음)</h3>

<ul>
  <li>이번에는 from 패키지 import 모듈 구문을 이용해 모듈을 불러와보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 2. from 패키지 import 모듈
</span><span class="kn">from</span> <span class="nn">unit</span> <span class="kn">import</span> <span class="n">item</span>
<span class="n">item</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">item</span> <span class="n">module</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="3-from-패키지-import--방식">3. from 패키지 import * 방식</h3>

<ul>
  <li>from 패키지 import * 방식을 이용해 패키지의 모든 모듈을 불러올 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. import 패키지 import *
# : 패키지 안의 모든 모듈 가져오기
</span><span class="kn">from</span> <span class="nn">unit</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">*</code> (Asterisk): ‘모든’ 이라는 뜻</li>
  <li>character 모듈을 불러올 수 없음 ⇒ <code class="language-plaintext highlighter-rouge">__init__</code> 파일을 수정해야한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>init 모듈을 수정해주자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">character</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">monster</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.</code> : 현재 위치를 뜻한다.</li>
  <li>현재위치의 character, item, monster 모듈을 init 모듈에 import 한다 라는 뜻.</li>
</ul>

<p><br /></p>

<ul>
  <li>다시 main.py 로 돌아가 character, item, monster 모듈의 함수들을 불러와보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. import 패키지 import *
# : 패키지 안의 모든 모듈 가져오기
</span><span class="kn">from</span> <span class="nn">unit</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">item</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">monster</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과: 각 모듈의 test 함수가 잘 실행됨을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">character</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">item</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">monster</span> <span class="n">module</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="4-import-패키지-방식">4. import 패키지 방식</h3>

<ul>
  <li>import 패키지 방식을 사용해 패키지 전체를 불러와 사용할 수 있다.</li>
  <li>참고: 이 방식도 3 방식의 init 모듈 수정 절차가 필요하다.</li>
  <li>main.py 에서 import unit 으로 unit 패키지 전체를 불러온 뒤, 각 모듈의 함수를 호출한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 4. import 패키지
# : 패키지 자체를 import 
</span><span class="kn">import</span> <span class="nn">unit</span>
<span class="n">unit</span><span class="p">.</span><span class="n">character</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">unit</span><span class="p">.</span><span class="n">item</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="n">unit</span><span class="p">.</span><span class="n">monster</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과: 각 모듈의 함수가 잘 동작함을 알 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">startcoding</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">character</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">item</span> <span class="n">module</span>
<span class="n">this</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">monster</span> <span class="n">module</span>
</code></pre></div></div>
<p><br /><br /></p>

<p>이번 포스팅에서는 패키지에 대해 알아보았다. 다음 포스팅에서는 파일입출력 기본에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 28일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Algorithm]그림으로 배우는 알고리즘 제 2장: 변수와 배열</title><link href="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2/" rel="alternate" type="text/html" title="[Algorithm]그림으로 배우는 알고리즘 제 2장: 변수와 배열" /><published>2022-05-14T00:00:00+09:00</published><updated>2022-05-14T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2</id><content type="html" xml:base="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day2/"><![CDATA[<p><br /><br /></p>

<h1 id="6-데이터는-다양한-정보이다">6. 데이터는 다양한 정보이다</h1>

<ul>
  <li>알고리즘 = 데이터 + 처리</li>
  <li>데이터: 다양한 정보</li>
</ul>

<p><br /></p>

<ul>
  <li>예시 1: 고기감자 요리
    <ul>
      <li>데이터: 고기감자 재료</li>
      <li>처리: 요리 방법</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>예시 2: 최대공약수 구하기
    <ul>
      <li>데이터(필요한 정보)
        <ul>
          <li>최대 공약수를 구하는 2개의 정수 값</li>
          <li>구한 최대 공약수(정수 값)</li>
        </ul>
      </li>
      <li>처리: 최대공약수를 구하는 방법 순서</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>예시 3: 정보의 순서 정하기
    <ul>
      <li>데이터(필요한 정보)
        <ul>
          <li>정렬할 값이 담긴 열</li>
          <li>정렬 값의 개수</li>
          <li>정렬된 결과가 담긴 열</li>
        </ul>
      </li>
      <li>처리: 정보의 순서를 정하는 방법/순서</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h1 id="7-모든-데이터에는-타입이-있다">7. 모든 데이터에는 타입이 있다</h1>

<ul>
  <li>데이터 타입: 다양한 정보(데이터)를 그룹화한 것</li>
  <li>많이 사용되는 기본 데이터 타입(5가지)
    <ul>
      <li><strong>정수 타입(int)</strong>: 정수(소수점이 없는 값)를 처리하기 위한 데이터 타입</li>
      <li><strong>실수 타입(float)</strong>: 실수(소수점을 포함한 값)를 처리하기 위한 데이터 타입</li>
      <li><strong>문자 타입</strong>: 문자를 처리하기 위한 데이터 타입</li>
      <li><strong>문자열 타입(string)</strong>: 문자열을 처리하기 위한 데이터 타입</li>
      <li><strong>논리 타입(boolean)</strong>: ‘참’, ‘거짓’을 다루기 위한 데이터 타입</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Algorithm" /><category term="알고리즘공부" /><category term="그림으로배우는알고리즘" /><category term="비전공자개발자공부" /><category term="데브옵스엔지니어" /><category term="파이썬알고리즘" /><category term="알고리즘책추천" /><category term="데이터타입" /><summary type="html"><![CDATA[데이터는 다양한 정보이며, 데이터에는 타입이 있다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 27일차</title><link href="http://localhost:4000/programming/Python-Day27/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 27일차" /><published>2022-05-14T00:00:00+09:00</published><updated>2022-05-14T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day27</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day27/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 9-2. 모듈 만들기를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-14-Python-Photo/2022-05-14-Python-Photo1.jpg" alt="2022-05-14-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-14-Python-Photo/2022-05-14-Python-Photo2.jpg" alt="2022-05-14-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="02-모듈-만들기">02. 모듈 만들기</h1>

<ul>
  <li>pay_module이라는 모듈을 생성해보자.</li>
</ul>

<p><br /></p>

<ul>
  <li>pay_module.py라는 파일을 생성한 뒤, 아래를 입력 후 저장한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 결제 정보, 관리 모듈
# 변수
</span><span class="n">version</span> <span class="o">=</span> <span class="mf">2.0</span>

<span class="c1"># 함수
</span><span class="k">def</span> <span class="nf">printAuthor</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"스타트코딩"</span><span class="p">)</span>

<span class="c1"># 클래스
</span><span class="k">class</span> <span class="nc">Pay</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">time</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="nb">id</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">time</span> <span class="o">=</span> <span class="n">time</span>
    <span class="k">def</span> <span class="nf">get_pay_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">time</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">"</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>02.모듈만들기.py라는 파일을 생성한 뒤, pay_module을 import한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pay_module</span>
</code></pre></div></div>

<ul>
  <li>Import “pay_module” could not be resolved Pylance(reportMissingImports) 라는 에러가 발생한다. 해당 모듈이 root 폴더에 있을 경우에만 찾을 수 있기 때문.</li>
</ul>

<p><br /></p>

<ul>
  <li>File &gt; Preferences &gt; Settings(MacOS의 경우: VSCode &gt; Preferences &gt; Settings)로 이동 후 붉은 색 네모로 표시한 버튼 클릭</li>
</ul>

<p><img src="/assets/images/2022-05-14-Python-Photo/2022-05-14-Python-Photo3.png" alt="2022-05-14-Python-Photo3" /></p>

<p><br /></p>

<ul>
  <li>settings.json 파일에서 <code class="language-plaintext highlighter-rouge">"python.analysis.extraPaths": ["./myvenv/Chapter9"],</code> 문구를 넣어준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s">"python.pythonPath"</span><span class="p">:</span> <span class="s">"/anaconda3/bin/python"</span><span class="p">,</span>
    <span class="s">"editor.unicodeHighlight.allowedCharacters"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">" "</span><span class="p">:</span> <span class="n">true</span>
    <span class="p">},</span>
    <span class="s">"python.analysis.extraPaths"</span><span class="p">:</span> <span class="p">[</span><span class="s">"./myvenv/Chapter9"</span><span class="p">],</span>
    <span class="s">"liveSassCompile.settings.formats"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s">"format"</span><span class="p">:</span> <span class="s">"expanded"</span><span class="p">,</span>
            <span class="s">"extensionName"</span><span class="p">:</span> <span class="s">".css"</span><span class="p">,</span>
            <span class="s">"savePath"</span><span class="p">:</span> <span class="s">"/assets/css/"</span>
        <span class="p">}</span>
    <span class="p">],</span>
    <span class="s">"pasteImage.basePath"</span><span class="p">:</span> <span class="s">"${currentFileDir}/images/"</span><span class="p">,</span>
    <span class="s">"pasteImage.prefix"</span><span class="p">:</span> <span class="s">"./"</span><span class="p">,</span>
    <span class="s">"liveServer.settings.donotShowInfoMsg"</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
    <span class="s">"editor.fontSize"</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="s">"window.zoomLevel"</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>다시 <code class="language-plaintext highlighter-rouge">pay_module</code> 변수 및 함수를 사용하면 에러가 발생하지 않는다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pay_module</span>

<span class="c1"># 변수 사용
</span><span class="k">print</span><span class="p">(</span><span class="n">pay_module</span><span class="p">.</span><span class="n">version</span><span class="p">)</span>

<span class="c1"># 함수 사용
</span><span class="n">pay_module</span><span class="p">.</span><span class="n">printAuthor</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="mf">02.</span><span class="n">모듈만들기</span><span class="p">.</span><span class="n">py</span>
<span class="mf">2.0</span>
<span class="n">스타트코딩</span>
</code></pre></div></div>

<ul>
  <li>코드 실행 후 Chapter 9 디렉토리에 <code class="language-plaintext highlighter-rouge">__pycache__</code> 라는 디렉토리가 자동으로 생성되며, 폴더 하위에는 <code class="language-plaintext highlighter-rouge">pay_module.cpython-310.pyc</code> 라는 파일이 생성되는데, 이는 실행속도 향상을 위해 생성된 컴파일된 파이썬 코드.</li>
</ul>

<p><br /></p>

<ul>
  <li>클래스도 사용할 수 있는지 알아보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pay_module</span>

<span class="c1"># 변수 사용
</span><span class="k">print</span><span class="p">(</span><span class="n">pay_module</span><span class="p">.</span><span class="n">version</span><span class="p">)</span>

<span class="c1"># 함수 사용
</span><span class="n">pay_module</span><span class="p">.</span><span class="n">printAuthor</span><span class="p">()</span>

<span class="c1"># 클래스 사용
</span><span class="n">pay_info</span> <span class="o">=</span> <span class="n">pay_module</span><span class="p">.</span><span class="n">Pay</span><span class="p">(</span><span class="s">"A102030"</span><span class="p">,</span> <span class="mi">13000</span><span class="p">,</span> <span class="s">"2021-06-13"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pay_info</span><span class="p">.</span><span class="n">get_pay_info</span><span class="p">())</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="mf">02.</span><span class="n">모듈만들기</span><span class="p">.</span><span class="n">py</span>
<span class="mf">2.0</span>
<span class="n">스타트코딩</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">13</span> <span class="n">A102030</span> <span class="mi">13000</span>
</code></pre></div></div>

<ul>
  <li>다시 pay_module.py 파일로 돌아가서, 함수를 추가해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 해당 파일을 직접 실행했을 때만 실행된다.
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"pay module 실행"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="n">pay_module</span><span class="p">.</span><span class="n">py</span>
<span class="n">pay</span> <span class="n">module</span> <span class="n">실행</span>
<span class="n">__main__</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>02.모듈만들기.py 에서도 <code class="language-plaintext highlighter-rouge">print(pay_module.__name__)</code> 로 되는지 확인해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyth</span>
<span class="n">on_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">py</span>
<span class="n">thon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter9</span><span class="o">/</span><span class="mf">02.</span><span class="n">모듈만들기</span><span class="p">.</span><span class="n">py</span>
<span class="n">pay_module</span>
</code></pre></div></div>

<ul>
  <li>pay_module 이 출력된다. 자기자신의 파일을 직접 실행 했을 때에만 할당된다.</li>
</ul>

<p><br /><br /></p>

<p>이번 포스팅에서는 모듈을 만들어보았다. 다음 포스팅에서는 패키지에 대해 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 27일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Algorithm]그림으로 배우는 알고리즘 제 1장: 알고리즘이란</title><link href="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day1/" rel="alternate" type="text/html" title="[Algorithm]그림으로 배우는 알고리즘 제 1장: 알고리즘이란" /><published>2022-05-13T00:00:00+09:00</published><updated>2022-05-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day1</id><content type="html" xml:base="http://localhost:4000/algorithm/Algorithm-Book-with-Pic-Day1/"><![CDATA[<p><br /><br /></p>

<p>최근 파이썬 공부를 하면서 개발자 유투브 영상 등을 틈날때마다 보고있는데 다들 입을모아 알고리즘을 꼭 공부해야한다, 코딩테스트를 위해서 뿐만 아니라 개발자로써 커리어를 쌓기 위해 꼭 필요하다라는 얘기를 들어 매일 조금씩이라도 공부하기 위해 책을 읽으며 기록하려고 한다.</p>

<p><br /></p>

<p>내가 아직 프로그래밍 언어에 대한 이해도가 깊지 않기 때문에, 특정 언어에 얽매이지 않고, 또한 아침 출근 직후 시간에 짬내서 읽기 괜찮은 분량의 책을 찾았는데 이 책이 딱 그 조건에 부합해서 선택해보았다.</p>

<p><br /></p>

<p>앞으로 평일에는 하루에 4페이지 정도 읽고 내용을 간단하게 요약해서 블로그에 올리려고 한다.</p>

<p><br /><br /></p>

<h1 id="제-1장-알고리즘이란">제 1장. 알고리즘이란</h1>

<h2 id="1-음식-요리법은-알고리즘">1. 음식 요리법은 알고리즘</h2>

<ul>
  <li>알고리즘(Algorithm); 컴퓨터를 이용해 주어진 <strong>과제</strong>를 해결하기 위한 처리 절차
    <ul>
      <li>과제의 예
        <ul>
          <li>최대 공약수를 구한다</li>
          <li>정보의 순서를 정해 나열</li>
          <li>원하는 정보 검색</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>현실세게의 다양한 과제의 해결에도 알고리즘의 개념이 사용된다</p>
  </li>
  <li>
    <p>예: 음식 요리법</p>
    <ul>
      <li>치킨카레 만들기 ⇒ 과제</li>
      <li>알고리즘
        <ul>
          <li>요리 재료 종류와 양을 정의</li>
          <li>시간별로 요리 절차가 적혀있다</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="2-알고리즘은-선인들의-지혜">2. 알고리즘은 선인들의 지혜</h2>

<ul>
  <li>음식 요리법 중 나쁜 요리법은 사용하는 사람이 적어질 것이고, 음식을 맛있게, 쉽게, 빠르게 만들 수 있는 좋은 요리법은 사용하는 사람이 많아질 것 ⇒ 알고리즘도 마찬가지</li>
</ul>

<p><br /></p>

<ul>
  <li>알고리즘의 경우에도 <strong>보다 효율적으로, 보다 범용적으로, 보다 빠르게 처리를 할 수 있도록 알고리즘을 개선</strong>하게 된다.</li>
</ul>

<p><br /><br /></p>

<h2 id="3-알고리즘을-이해하는-것은-게임을-잘-하게-되는-것">3. 알고리즘을 이해하는 것은 게임을 잘 하게 되는 것</h2>

<ul>
  <li>알고리즘의 학습은 게임의 공략법과 같이 더 나은 프로그램을 만들기 위한 방법
    <ul>
      <li>알고리즘은 효율적인 프로그래밍을 위해 반드시 학습해야한다.</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>

<h2 id="4-알고리즘에는-정당성과-정지성이-있어야한다">4. 알고리즘에는 ‘정당성’과 ‘정지성’이 있어야한다</h2>

<p>알고리즘은 다음의 두 가지 조건을 충족해야 한다.</p>

<p><br /></p>

<h3 id="1-정당성">1. 정당성</h3>

<ul>
  <li>주어진 과제에 대해 올바른 결과를 반환해야 한다(입력값이 지정된 조건과 일치한다면 ).</li>
  <li>정당성을 증명하는 방법: <strong>단정문(Assertion)</strong>
    <ul>
      <li>알고리즘의 실행순서 중 임의의 위치에서 충족해야하는 조건이 성립하는지(올바르게 동작하는지) 체크</li>
      <li>단계별 동작을 확인해 알고리즘 전체의 정당성을 체크할 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="2-정지성">2. 정지성</h3>

<ul>
  <li>어떠한 조건의 입력값이 주어지더라도 정해진 시간 내 반드시 정상적인 종료를 보장</li>
  <li>영원히 처리를 반복해 답을 내지 않는 처리(무한 루프)는 알고리즘이 아님</li>
  <li>정지성을 증명하는 방법: 반복 처리의 종료조건 체크에 사용되는 변수를 관찰해 정해진 횟수만큼 반복하면 반드시 정지하는 것을 증명</li>
</ul>

<p><br /></p>

<h2 id="5-알고리즘에는-다양한-종류가-있다">5. 알고리즘에는 다양한 종류가 있다</h2>

<ul>
  <li>중요한 알고리즘의 종류
    <ul>
      <li>기술 계산</li>
      <li>정렬</li>
      <li>검색</li>
      <li>문자열 패턴 매칭</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="1-기술계산">1. 기술계산</h3>

<ul>
  <li>기술계산을 위한 알고리즘</li>
  <li>기술계산의 예
    <ul>
      <li>유클리드 호제법(최대공약수)</li>
      <li>가우스 소거법(방정식)</li>
      <li>사다리꼴의 법칙(정적분)</li>
      <li>데이크스트라 알고리즘(최적 경로)</li>
      <li>에라토스테네스의 체(소수)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="2-정렬sort">2. 정렬(Sort)</h3>

<ul>
  <li>1줄로 늘어선 데이터를 작은순서(오름차순) 또는 큰 순서(내림차순)로 정렬하는 알고리즘</li>
  <li>정렬의 예
    <ul>
      <li>단순 선택 정렬</li>
      <li>단순 교환 정렬 (버블 정렬)</li>
      <li>단순 삽입 정렬</li>
      <li>셸 정렬</li>
      <li>병합 정렬</li>
      <li>퀵 정렬</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="3-검색search">3. 검색(Search)</h3>

<ul>
  <li>많은 양의 데이터 중 원하는 데이터를 찾는 알고리즘</li>
  <li>검색의 예
    <ul>
      <li>선형검색 (리니어 서치: Linear Search)</li>
      <li>이진 검색 (바이너리 서치: Binary Search)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="4-문자열-패턴-매칭">4. 문자열 패턴 매칭</h3>

<ul>
  <li>문자열 중 지정 문자열의 패턴(부분 문자열)과 일치하는 부분을 찾는 알고리즘</li>
  <li>문자열 패턴 매칭의 예
    <ul>
      <li>단순 문자열 일치</li>
      <li>KMP 알고리즘</li>
      <li>BM 알고리즘</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="5-구조적-프로그래밍">5. 구조적 프로그래밍</h2>

<ul>
  <li>프로그램을 효율적으로 작성, 설계상 오류 최소화하기위한 방법론</li>
  <li>구조적 프로그래밍에서 사용하는 프로세스 흐름
    <ul>
      <li>순차구조: 작성 순서대로 순차 실행</li>
      <li>선택구조: 조건에 따라. 수행할 작업의 흐름 변경</li>
      <li>반복구조: 조건이 일치하는동안 일정과정 반복 실행</li>
    </ul>
  </li>
</ul>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Algorithm" /><category term="알고리즘공부" /><category term="그림으로배우는알고리즘" /><category term="비전공자개발자공부" /><category term="데브옵스엔지니어" /><category term="파이썬알고리즘" /><category term="알고리즘책추천" /><summary type="html"><![CDATA[알고리즘이란 컴퓨터를 이용해 주어진 과제를 해결하기 위한 처리 절차이다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 26일차</title><link href="http://localhost:4000/programming/Python-Day26/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 26일차" /><published>2022-05-13T00:00:00+09:00</published><updated>2022-05-13T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day26</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day26/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 9-1. 모듈을 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-13-Python-Photo/2022-05-13-Python-Photo1.jpg" alt="2022-05-13-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-13-Python-Photo/2022-05-13-Python-Photo2.jpg" alt="2022-05-13-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="01-모듈">01. 모듈</h1>

<h2 id="1-모듈을-사용하는-이유">1. 모듈을 사용하는 이유</h2>

<ul>
  <li>프로그램을 기능별로 파일을 나누어 유지보수 등 관리를 편하게 할 수 있기 때문</li>
</ul>

<p><br /><br /></p>

<h2 id="2-모듈의-개념">2. 모듈의 개념</h2>

<ul>
  <li>한 개의 완성된 프로그램 파일</li>
</ul>

<p><br /><br /></p>

<h2 id="3-파이썬-기본-모듈-사용방법">3. 파이썬 기본 모듈 사용방법</h2>

<ul>
  <li>파이썬의 기본 모듈을 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">모듈이름</span>
<span class="n">모듈이름</span><span class="p">.</span><span class="n">변수</span>
<span class="n">모듈이름</span><span class="p">.</span><span class="n">함수</span><span class="p">()</span>

<span class="c1"># 예시 1
</span><span class="kn">import</span> <span class="nn">math</span>
<span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">ceil</span><span class="p">(</span><span class="mf">5.7</span><span class="p">))</span> <span class="c1"># 올림 함수
</span>
<span class="c1"># 예시 2: 뒤의 메소드, 변수 이름으로 그대로 작성할 수 있게 하는 방법
</span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">pi</span><span class="p">,</span> <span class="n">ceil</span>
<span class="k">print</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">ceil</span><span class="p">(</span><span class="mf">5.7</span><span class="p">))</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="4-파이썬-외부-모듈-사용방법">4. 파이썬 외부 모듈 사용방법</h2>

<ul>
  <li>파이썬 외부의 모듈을 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">모듈이름</span>

<span class="n">pip</span> <span class="n">install</span> <span class="n">pyautogui</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="5-모듈-만들기-실습">5. 모듈 만들기 실습</h2>

<h3 id="1-내장모듈">1. 내장모듈</h3>

<ul>
  <li>내장모듈: 파이썬 설치 시 자동으로 설치되는 모듈</li>
  <li>파이썬 내장 모듈을 사용해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 내장 모듈
# : 파이썬 설치 시 자동으로 설치되는 모듈
</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">pi</span><span class="p">,</span> <span class="n">ceil</span> <span class="k">as</span> <span class="n">c</span>
<span class="k">print</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">(</span><span class="mf">5.7</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>from math import pi를 쓰면 math.pi라고 쓰지 않고 pi만 써도 모듈이 실행된다.</li>
  <li>모듈을 간단한 이름으로 변경하여 사용하고 싶은 경우 <code class="language-plaintext highlighter-rouge">as</code> 뒤에 사용하고 싶은 이름을 작성하면 적용된다.</li>
</ul>

<p><br /><br /></p>

<h3 id="2-외부-모듈">2. 외부 모듈</h3>

<ul>
  <li>pyautogui 공식 홈페이지 Documentation 페이지에 접속한다.
    <ul>
      <li>홈페이지에 나와있는대로 <code class="language-plaintext highlighter-rouge">pip install pyautogui</code> 명령어를 터미널 창에 입력한다.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">pyautogui</span>
<span class="n">Collecting</span> <span class="n">pyautogui</span>
  <span class="n">Downloading</span> <span class="n">PyAutoGUI</span><span class="o">-</span><span class="mf">0.9</span><span class="p">.</span><span class="mf">53.</span><span class="n">tar</span><span class="p">.</span><span class="n">gz</span> <span class="p">(</span><span class="mi">59</span> <span class="n">kB</span><span class="p">)</span>
     <span class="err">━━━━━━━━━━━━━</span> <span class="mf">59.0</span><span class="o">/</span><span class="mf">59.0</span> <span class="n">KB</span> <span class="mf">987.7</span> <span class="n">kB</span><span class="o">/</span><span class="n">s</span> <span class="n">eta</span> <span class="mi">0</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
  <span class="n">Preparing</span> <span class="n">metadata</span> <span class="p">(</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span><span class="p">)</span> <span class="p">...</span> <span class="n">done</span>
<span class="n">Collecting</span> <span class="n">pymsgbox</span>
  <span class="n">Downloading</span> <span class="n">PyMsgBox</span><span class="o">-</span><span class="mf">1.0</span><span class="p">.</span><span class="mf">9.</span><span class="n">tar</span><span class="p">.</span><span class="n">gz</span> <span class="p">(</span><span class="mi">18</span> <span class="n">kB</span><span class="p">)</span>
<span class="p">...</span>
<span class="p">(</span><span class="n">생략</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>설치가 완료되면 import 로 pyautogui를 불러온다(별칭 pg로 설정).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 외부 모듈
# : 다른 사람이 만든 파이썬 파일을 pipfh 설치해서 사용
# pyautogui (공식 홈페이지: https://pyautogui.readthedocs.io/en/latest/)
</span><span class="kn">import</span> <span class="nn">pyautogui</span> <span class="k">as</span> <span class="n">pg</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>pyautogui 홈페이지(<a href="https://pyautogui.readthedocs.io/en/latest/">https://pyautogui.readthedocs.io/en/latest/</a>)에서 Example 중 하나를 실행해보자
    <ul>
      <li>**<code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;** pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  *# Use tweening/easing function to move mouse over 2 seconds.*</code></li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pg</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># 화면의 500 * 500 위치에 마우스를 2초간 이동하라는 명령어
</span></code></pre></div></div>

<ul>
  <li>실행결과: 마우스를 건드리지 않아도 자동으로 500*500 위치로 이동한다.</li>
  <li>MacOS의 경우 vscode가 컴퓨터 시스템을 제어할 수 있도록 권한을 부여해야 실행이 가능하다.</li>
</ul>

<p><br /><br /></p>

<p>이번 포스팅에서는 모듈에 대해 알아보았다. 다음 포스팅에서는 파이썬 모듈을 만들어보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 26일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 25일차</title><link href="http://localhost:4000/programming/Python-Day25/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 25일차" /><published>2022-05-12T00:00:00+09:00</published><updated>2022-05-12T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day25</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day25/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 8-5. 클래스 실습문제를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-12-Python-Photo/2022-05-12-Python-Photo1.jpg" alt="2022-05-12-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-12-Python-Photo/2022-05-12-Python-Photo2.jpg" alt="2022-05-12-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="05-클래스-실습문제">05. 클래스 실습문제</h1>

<h2 id="1-실습문제-811">1. 실습문제 8.1.1</h2>

<ul>
  <li>영철은 스타트게임즈 회사에 개발자로 취직을 하게 되었다. 지난 주 회의 결과로 신작 MMORPG 게임의 아이템 구성안을 만들었다.
    <ul>
      <li>아이템 공통: 이름, 가격, 무게, 판매하기, 버리기</li>
      <li>장비 아이템: 착용효과, 착용하기</li>
      <li>소모품 아이템: 사용효과, 사용하기</li>
      <li>(단, 버리기는 버릴 수 있는 아이템만 가능하가)</li>
    </ul>
  </li>
  <li>
    <p>구성안을 토대로 클래스 다이어그램을 설계하였다.</p>

    <p><img src="/assets/images/2022-05-12-Python-Photo/2022-05-12-Python-Photo3.png" alt="2022-05-12-Python-Photo3" /></p>
  </li>
  <li>
    <p>구성안과 설계도를 보고 클래스를 코드로 완성해보자.</p>

    <p>(메서드 구현은 자유롭게 한다)</p>
  </li>
</ul>

<p><br /><br /></p>

<h3 id="내-풀이">[내 풀이]</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 부모: Item
#  - 속성: 이름(name), 가격(price), 무게(weight)
#  - 메서드: 판매하기(sale), 버리기(discard)
# 자식 1: WearableItem
#  - 속성: 착용효과(effect)
#  - 메서드: 착용하기(wear)
# 자식 2: Usable item
#  - 속성: 사용효과(effect)
#  - 메서드: 사용하기(use)
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 얻었습니다. 아이템 가격은 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">원, 무게는 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">weight</span><span class="si">}</span><span class="s"> 입니다."</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">sell</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">원에 판매했습니다."</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 버렸습니다."</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 아이템을 버릴 수 없습니다."</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">WearableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 아이템을 착용했습니다."</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="p">(</span><span class="s">"공격력이 +200 상승했습니다."</span><span class="p">,</span> <span class="s">"속도가 +100 상승했습니다."</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 아이템을 사용했습니다."</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="p">(</span><span class="s">"체력이 +100 상승했습니다."</span><span class="p">)</span>

<span class="n">sword</span> <span class="o">=</span> <span class="n">WearableItem</span><span class="p">(</span><span class="s">"검"</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">sword</span><span class="p">.</span><span class="n">sell</span><span class="p">()</span>
<span class="n">sword</span><span class="p">.</span><span class="n">discard</span><span class="p">()</span>

<span class="n">medicine</span> <span class="o">=</span> <span class="n">UsableItem</span><span class="p">(</span><span class="s">"medicine"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">medicine</span><span class="p">.</span><span class="n">use</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>착용, 사용효과는 아이템마다 상이하므로 변수로 빼주어야한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>실행결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">1.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="p">.</span><span class="n">py</span>
<span class="n">검</span> <span class="n">아이템을</span> <span class="n">얻었습니다</span><span class="p">.</span> <span class="n">아이템</span> <span class="n">가격은</span> <span class="mi">10000</span><span class="n">원</span><span class="p">,</span> <span class="n">무게는</span> <span class="mi">10</span> <span class="n">입니다</span><span class="p">.</span>
<span class="n">검</span> <span class="n">아이템을</span> <span class="mi">10000</span><span class="n">원에</span> <span class="n">판매했습니다</span><span class="p">.</span>
<span class="n">검</span> <span class="n">아이템을</span> <span class="n">버릴</span> <span class="n">수</span> <span class="n">없습니다</span><span class="p">.</span>
<span class="n">medicine</span> <span class="n">아이템을</span> <span class="n">얻었습니다</span><span class="p">.</span> <span class="n">아이템</span> <span class="n">가격은</span> <span class="mi">1000</span><span class="n">원</span><span class="p">,</span> <span class="n">무게는</span> <span class="mf">0.5</span> <span class="n">입니다</span><span class="p">.</span>
<span class="p">[</span><span class="n">medicine</span><span class="p">]</span> <span class="n">아이템을</span> <span class="n">사용했습니다</span><span class="p">.</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="강의-해설">[강의 해설]</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스 생성
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
    
    <span class="k">def</span> <span class="nf">sale</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 판매가격은 [</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">]입니다.]"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 버렸습니다.]"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 버릴 수 없습니다."</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">WearbleItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 착용했습니다. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># 인스턴스 생성
</span><span class="n">sword</span> <span class="o">=</span> <span class="n">WearbleItem</span><span class="p">(</span><span class="s">"이가닌자의검"</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="s">"체력 5000 증가, 마력 5000 증가"</span><span class="p">)</span>
<span class="n">sword</span><span class="p">.</span><span class="n">wear</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">2.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="o">-</span><span class="n">해설</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">이가닌자의검</span><span class="p">]</span> <span class="n">착용했습니다</span><span class="p">.</span> <span class="n">체력</span> <span class="mi">5000</span> <span class="n">증가</span><span class="p">,</span> <span class="n">마력</span> <span class="mi">5000</span> <span class="n">증가</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>부모클래스의 메서드도 잘 상속받아왔는지 확인해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스 생성
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
    
    <span class="k">def</span> <span class="nf">sale</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 판매가격은 [</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">]입니다.]"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 버렸습니다.]"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 버릴 수 없습니다."</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">WearbleItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 착용했습니다. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># 인스턴스 생성
</span><span class="n">sword</span> <span class="o">=</span> <span class="n">WearbleItem</span><span class="p">(</span><span class="s">"이가닌자의검"</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="mf">3.5</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="s">"체력 5000 증가, 마력 5000 증가"</span><span class="p">)</span>
<span class="n">sword</span><span class="p">.</span><span class="n">wear</span><span class="p">()</span>
<span class="n">sword</span><span class="p">.</span><span class="n">sale</span><span class="p">()</span>
<span class="n">sword</span><span class="p">.</span><span class="n">discard</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">2.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="o">-</span><span class="n">해설</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">이가닌자의검</span><span class="p">]</span> <span class="n">착용했습니다</span><span class="p">.</span> <span class="n">체력</span> <span class="mi">5000</span> <span class="n">증가</span><span class="p">,</span> <span class="n">마력</span> <span class="mi">5000</span> <span class="n">증가</span>
<span class="p">[</span><span class="n">이가닌자의검</span> <span class="n">판매가격은</span> <span class="p">[</span><span class="mi">30000</span><span class="p">]</span><span class="n">입니다</span><span class="p">.]</span>
<span class="p">[</span><span class="n">이가닌자의검</span> <span class="n">버렸습니다</span><span class="p">.]</span>
</code></pre></div></div>

<ul>
  <li>부모클래스의 메서드인 sale, discard 모두 실행 가능함을 알 수 있다.</li>
</ul>

<p><br /></p>

<ul>
  <li>UsableItem &amp; 버릴 수 없는 아이템을 생성해보자.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스 생성
</span>
<span class="k">class</span> <span class="nc">Item</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span> <span class="o">=</span> <span class="n">isdropable</span>
    
    <span class="k">def</span> <span class="nf">sale</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 판매가격은 [</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">price</span><span class="si">}</span><span class="s">]입니다.]"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">discard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">isdropable</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> 버렸습니다.]"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 버릴 수 없습니다."</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">WearbleItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    <span class="k">def</span> <span class="nf">wear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 착용했습니다. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">UsableItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">isdropable</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">effect</span> <span class="o">=</span> <span class="n">effect</span>
    
    <span class="k">def</span> <span class="nf">use</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">effect</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># 인스턴스 생성
</span><span class="n">potion</span> <span class="o">=</span> <span class="n">UsableItem</span><span class="p">(</span><span class="s">"신비한투명물약"</span><span class="p">,</span> <span class="mi">150000</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="s">"투명효과 300초 지속"</span><span class="p">)</span>
<span class="n">potion</span><span class="p">.</span><span class="n">discard</span><span class="p">()</span>
<span class="n">potion</span><span class="p">.</span><span class="n">sale</span><span class="p">()</span>
<span class="n">potion</span><span class="p">.</span><span class="n">use</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>실행 결과</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mi">06</span><span class="o">-</span><span class="mf">2.</span><span class="n">실습문제8</span><span class="p">.</span><span class="mf">1.1</span><span class="o">-</span><span class="n">해설</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">신비한투명물약</span><span class="p">]</span> <span class="n">버릴</span> <span class="n">수</span> <span class="n">없습니다</span><span class="p">.</span>
<span class="p">[</span><span class="n">신비한투명물약</span> <span class="n">판매가격은</span> <span class="p">[</span><span class="mi">150000</span><span class="p">]</span><span class="n">입니다</span><span class="p">.]</span>
<span class="p">[</span><span class="n">신비한투명물약</span><span class="p">].</span> <span class="n">투명효과</span> <span class="mi">300</span><span class="n">초</span> <span class="n">지속</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 실습문제를 풀어보았다. 다음 포스팅에서는 모듈에 대해서 알아보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 25일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry><entry><title type="html">[Kubernetes]Pod의 /etc/hosts 파일에 DNS 추가하는 방법(HostAlias)</title><link href="http://localhost:4000/devops/Kubernetes-Pod-Etc-Hosts-Hostalias/" rel="alternate" type="text/html" title="[Kubernetes]Pod의 /etc/hosts 파일에 DNS 추가하는 방법(HostAlias)" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/devops/Kubernetes-Pod-Etc-Hosts-Hostalias</id><content type="html" xml:base="http://localhost:4000/devops/Kubernetes-Pod-Etc-Hosts-Hostalias/"><![CDATA[<p><br /><br /></p>

<p><em>💡  Pod의 /etc/hosts 파일에 DNS를 추가하기 위해서는 Deployment의 hostalias 옵션을 사용한다.</em></p>

<p><br /></p>

<h1 id="1-배경-상황">1. 배경 상황</h1>

<p><br /></p>

<p>프로젝트 진행 중 인프라팀에서 NAS의 연결 주소를 내부 private IP로 변경하기위해서 파드 내 컨테이너의 /etc/hosts 파일을 변경해달라는 요청을 받았다.</p>

<p><br /><br /></p>

<h1 id="2-설정-방법">2. 설정 방법</h1>

<p><br /></p>

<p>Pod의 /etc/hosts 파일을 변경하기 위해서는 Pod(Pod가 Deployment에 의해 생성되었을 경우에는 Deployment) YAML 파일의 hostAlias 항목에 도메인, 그리고 도메인과 맵핑할 ip를 기입해주면 된다.</p>

<p><br /></p>

<p><strong>※ 컨테이너 내부의 호스트 파일을 수동으로 변경하면 안된다. 컨테이너는 휘발성이기 때문에, 컨테이너 종료 시 변경사항이 손실된다.</strong></p>

<p><br /></p>

<ul>
  <li>Deployment에 등록할 경우</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
 <span class="na">name</span><span class="pi">:</span> <span class="s">web-app</span>
 <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
 <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
 <span class="na">selector</span><span class="pi">:</span>
  <span class="na">matchLabels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
 <span class="na">template</span><span class="pi">:</span>
   <span class="na">metadata</span><span class="pi">:</span>
     <span class="na">labels</span><span class="pi">:</span>
       <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
   <span class="na">spec</span><span class="pi">:</span>
     <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
     <span class="na">hostAliases</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">ip</span><span class="pi">:</span> <span class="s2">"</span><span class="s">127.0.0.1"</span>
       <span class="na">hostnames</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s2">"</span><span class="s">foo.local"</span>
     <span class="na">containers</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cat-hosts</span>
       <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
       <span class="na">command</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s">cat</span>
       <span class="na">args</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s2">"</span><span class="s">/etc/hosts"</span>
</code></pre></div></div>

<ul>
  <li>spec.template.hostAliases.ip ⇒ /etc/hosts 파일에 등록할 ip</li>
  <li>spec.template.hostAliases.hostnames ⇒ /etc/hosts 파일에 등록할 호스트명</li>
</ul>

<p><br /></p>

<ul>
  <li>Pod에 등록할 경우</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
 <span class="na">name</span><span class="pi">:</span> <span class="s">web-app</span>
 <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
 <span class="na">labels</span><span class="pi">:</span>
   <span class="na">app</span><span class="pi">:</span> <span class="s">web</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
  <span class="na">hostAliases</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">ip</span><span class="pi">:</span> <span class="s2">"</span><span class="s">127.0.0.1"</span>
    <span class="na">hostnames</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">foo.local"</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cat-hosts</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
    <span class="na">command</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">cat</span>
    <span class="na">args</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">/etc/hosts"</span>
</code></pre></div></div>

<ul>
  <li>spec.hostAliases.ip ⇒ /etc/hosts 파일에 등록할 ip</li>
  <li>spec.hostAliases.hostnames ⇒ /etc/hosts 파일에 등록할 호스트명</li>
</ul>

<p><br /><br /></p>

<h1 id="3-참고-자료">3. 참고 자료</h1>

<ul>
  <li>Kubernetes 공식문서: <a href="http://kubernetes.io/ko/docs/tasks/network/customize-hosts-file-for-pods">kubernetes.io/ko/docs/tasks/network/customize-hosts-file-for-pods</a></li>
</ul>

<p><br /></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="DevOps" /><category term="쿠버네티스" /><category term="쿠버네티스네트워킹" /><category term="hostalias" /><category term="kuberneteshostalias" /><category term="cka" /><category term="kubernetes" /><category term="kubernetesnetworking" /><category term="k8s" /><category term="DevOpsengineer" /><category term="데브옵스" /><category term="데브옵스엔지니어" /><summary type="html"><![CDATA[Pod의 /etc/hosts 파일에 DNS를 추가하기 위해서는 Deployment의 hostalias 옵션을 사용한다]]></summary></entry><entry><title type="html">[Python]패스트캠퍼스 캐시백 챌린지 24일차</title><link href="http://localhost:4000/programming/Python-Day24/" rel="alternate" type="text/html" title="[Python]패스트캠퍼스 캐시백 챌린지 24일차" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/programming/Python-Day24</id><content type="html" xml:base="http://localhost:4000/programming/Python-Day24/"><![CDATA[<p><br /><br /></p>

<p>오늘도 어제에 이어서 “<a href="https://fastcampus.co.kr/dev_online_pyweb">한 번에 끝내는 파이썬 웹 개발 초격차 패키지 Online</a>” 의 챕터 8-4. 오버라이딩, 클래스변수를 듣고 정리해보았다. 참고로 이 포스팅은 공부용으로 강의 내용을 요약한 것으로 자세한 강의 내용은 위 링크를 참조 할 것.</p>

<p><br /><br /></p>

<p>아래는 공부 인증 사진.</p>

<p><br /></p>

<p><img src="/assets/images/2022-05-11-Python-Photo/2022-05-11-Python-Photo1.jpg" alt="2022-05-11-Python-Photo1" /></p>

<p><img src="/assets/images/2022-05-11-Python-Photo/2022-05-11-Python-Photo2.jpg" alt="2022-05-11-Python-Photo2" /></p>

<p><br /><br /></p>

<h1 id="01-오버라이딩-클래스-변수">01. 오버라이딩, 클래스 변수</h1>

<h2 id="1-rpg-게임-업데이트예시">1. RPG 게임 업데이트(예시)</h2>

<h3 id="1-생성자-오버라이딩">1. 생성자 오버라이딩</h3>

<ul>
  <li>요건
    <ul>
      <li>드래곤 클래스에 인스턴스 속성으로 3개의 스킬을 추가</li>
      <li>드래곤이 스킬을 사용하면 속성 중 하나가 무작위로 사용</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>어떻게 속성을 추가할까?
    <ul>
      <li>Monster class에 속성 추가 ⇒ 다른 자식클래스에도 해당 속성이 추가됨 (X)</li>
      <li>생성자 자체를 오버라이딩하자!</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>    
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>부모 클래스의 함수를 그대로 복사 붙여넣기 해도 되지만, 매번 붙여넣기 하기는 너무 번거롭다</li>
</ul>

<p><br /></p>

<ul>
  <li>super 함수를 사용하자.
    <ul>
      <li>super().<strong>init</strong>(): 부모클래스의 <code class="language-plaintext highlighter-rouge">__init__</code> 함수를 불러온다.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>추가 매개변수인 skill의 함수를 선언해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="n">skill</span>
        
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Dragon을 호출할 때, 스킬을 추가해서 호출한다.
    <ul>
      <li>스킬은 불변하므로, 리스트가 아닌 튜플이 적절</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="n">skill</span>
        
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>스킬은 불변한데, 호출할 때 매번 넣어주면 중복이 발생한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">,</span> <span class="n">skill</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="n">skill</span>
        
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">dragon1</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>
<span class="n">dragon2</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">7000</span><span class="p">,</span> <span class="mi">700</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>
<span class="n">dragon3</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">))</span>

<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>튜플을 속성 자체에 직접 대입</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skill</span> <span class="o">=</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>

</code></pre></div></div>

<p><br /></p>

<ul>
  <li>skill ⇒ skills 로 바꾸고 skill 메서드를 생성</li>
  <li>random.randint를 사용해 스킬을 랜덤으로 불러오기 (import random)</li>
  <li>dragon.skill()로 스킬을 사용해준다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상속
# : 클래스들에 중복된 코드를 제거하고 유지보수를
#    편하게 하기 위해 사용
</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Wolf</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Shark</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 헤엄치기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skills</span> <span class="o">=</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">skill</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 스킬 사용 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">wolf</span> <span class="o">=</span> <span class="n">Wolf</span><span class="p">(</span><span class="s">"울프"</span><span class="p">,</span> <span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">wolf</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>

<span class="n">shark</span> <span class="o">=</span> <span class="n">Shark</span><span class="p">(</span><span class="s">"샤크"</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">shark</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">skill</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과: 코드를 실행할 때마다 다른 스킬을 사용하는 것을 확인할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">05.</span><span class="n">오버라이딩클래스변수</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">울프</span><span class="p">]</span> <span class="n">지상에서</span> <span class="n">이동하기</span>
<span class="p">[</span><span class="n">샤크</span><span class="p">]</span> <span class="n">헤엄치기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">날기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">스킬</span> <span class="n">사용</span> <span class="n">날개치기</span>
<span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">05.</span><span class="n">오버라이딩클래스변수</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">울프</span><span class="p">]</span> <span class="n">지상에서</span> <span class="n">이동하기</span>
<span class="p">[</span><span class="n">샤크</span><span class="p">]</span> <span class="n">헤엄치기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">날기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">스킬</span> <span class="n">사용</span> <span class="n">불뿜기</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="2-클래스-변수">2. 클래스 변수</h3>

<ul>
  <li>전체 Monster의 개수를 최대 1000 마리로 제한 ⇒ 클래스 변수 사용해야함</li>
  <li>Monster 하위에 max_num = 1000을 정의</li>
  <li>Monster 를 생성(<code class="language-plaintext highlighter-rouge">__init__</code> ) 할때마다 1000에서 1씩 빼주기 ⇒ <code class="language-plaintext highlighter-rouge">Monster.max_num -= 1</code>
    <ul>
      <li>self 가 아님에 주의!</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상속
# : 클래스들에 중복된 코드를 제거하고 유지보수를
#    편하게 하기 위해 사용
</span>
<span class="c1"># 클래스 변수
# : 인스턴스들이 모두 공유하는 변수
</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">class</span> <span class="nc">Monster</span><span class="p">:</span>
    <span class="n">max_num</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="n">health</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attack</span> <span class="o">=</span> <span class="n">attack</span>
        <span class="n">Monster</span><span class="p">.</span><span class="n">max_num</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 지상에서 이동하기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Wolf</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Shark</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 헤엄치기"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Dragon</span><span class="p">(</span><span class="n">Monster</span><span class="p">):</span>
    <span class="c1"># 생성자 오버라이딩
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">health</span><span class="p">,</span> <span class="n">attack</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">skills</span> <span class="o">=</span> <span class="p">(</span><span class="s">"불뿜기"</span><span class="p">,</span> <span class="s">"꼬리치기"</span><span class="p">,</span> <span class="s">"날개치기"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 메서드 오버라이딩
</span>        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 날기"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">skill</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">] 스킬 사용 </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">skills</span><span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">wolf</span> <span class="o">=</span> <span class="n">Wolf</span><span class="p">(</span><span class="s">"울프"</span><span class="p">,</span> <span class="mi">1500</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">wolf</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">wolf</span><span class="p">.</span><span class="n">max_num</span><span class="p">)</span>

<span class="n">shark</span> <span class="o">=</span> <span class="n">Shark</span><span class="p">(</span><span class="s">"샤크"</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">shark</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">shark</span><span class="p">.</span><span class="n">max_num</span><span class="p">)</span>

<span class="n">dragon</span> <span class="o">=</span> <span class="n">Dragon</span><span class="p">(</span><span class="s">"드래곤"</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="mi">800</span><span class="p">)</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">move</span><span class="p">()</span>
<span class="n">dragon</span><span class="p">.</span><span class="n">skill</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">dragon</span><span class="p">.</span><span class="n">max_num</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>출력 결과: max_num 을 모든 클래스에서 공유하는 것을 확인할 수 있다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="err">➜</span>  <span class="n">python_basic</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span><span class="n">pyt</span>
<span class="n">hon_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">Documents</span><span class="o">/</span>
<span class="n">python_basic</span><span class="o">/</span><span class="n">myvenv</span><span class="o">/</span><span class="n">Chapter8</span><span class="o">/</span><span class="mf">05.</span><span class="n">오버라이딩클래스변수</span><span class="p">.</span><span class="n">p</span>
<span class="n">y</span>
<span class="p">[</span><span class="n">울프</span><span class="p">]</span> <span class="n">지상에서</span> <span class="n">이동하기</span>
<span class="mi">999</span>
<span class="p">[</span><span class="n">샤크</span><span class="p">]</span> <span class="n">헤엄치기</span>
<span class="mi">998</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">날기</span>
<span class="p">[</span><span class="n">드래곤</span><span class="p">]</span> <span class="n">스킬</span> <span class="n">사용</span> <span class="n">꼬리치기</span>
<span class="mi">997</span>
</code></pre></div></div>

<p><br /><br /></p>

<p>이번 포스팅에서는 오버라이딩, 클래스 변수의 개념에 대해 알아보았다. 다음 포스팅에서는 실습문제를 풀어보도록 하자.</p>

<p><br /></p>

<p><strong>본 포스팅은 패스트캠퍼스 환급 챌린지 참여를 위해 작성되었습니다.</strong></p>

<p><br /></p>

<ul>
  <li>패스트캠퍼스 강의 등록하기: <a href="https://bit.ly/3L3avNW">https://bit.ly/3L3avNW</a></li>
</ul>

<p><br /></p>

<p><strong>#패스트캠퍼스 #패캠챌린지 #직장인인강 #직장인자기계발 #패스트캠퍼스후기 #캐시백챌린지 #캐시백 #환급챌린지 #한번에끝내는파이썬웹개발초격차패키지Online</strong></p>]]></content><author><name>Canary</name><email>jinnypark9393@gmail.com</email></author><category term="Programming" /><category term="패스트캠퍼스" /><category term="패캠챌린지" /><category term="직장인인강" /><category term="직장인자기계발" /><category term="패스트캠퍼스후기" /><category term="캐시백챌린지" /><category term="캐시백" /><category term="환급챌린지" /><category term="한번에끝내는파이썬웹개발초격차패키지Online" /><summary type="html"><![CDATA[패스트캠퍼스 캐시백 챌린지 24일차: 한 번에 끝내는 파이썬 웹개발 초격차 패키지 Online]]></summary></entry></feed>